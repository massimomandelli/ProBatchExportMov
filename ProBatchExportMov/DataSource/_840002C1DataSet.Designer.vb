'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("_840002C1DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class _840002C1DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableBATCH As BATCHDataTable
    
    Private tableLANGUAGE As LANGUAGEDataTable
    
    Private tableMAINBATCH As MAINBATCHDataTable
    
    Private tableMAINPROD_QUEUE As MAINPROD_QUEUEDataTable
    
    Private tableMAINPRODUCTION As MAINPRODUCTIONDataTable
    
    Private tableMAINRECIPELINE As MAINRECIPELINEDataTable
    
    Private tablePROD_QUEUE As PROD_QUEUEDataTable
    
    Private tablePRODUCTION As PRODUCTIONDataTable
    
    Private tableRECIPE As RECIPEDataTable
    
    Private tableTMP_WP_MESSAGE As TMP_WP_MESSAGEDataTable
    
    Private tableUSER As USERDataTable
    
    Private tableWINDOW As WINDOWDataTable
    
    Private relationMAINPRODUCTIONMAINBATCH As Global.System.Data.DataRelation
    
    Private relationMAINBATCHMAINRECIPELINE As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BATCH")) Is Nothing) Then
                MyBase.Tables.Add(New BATCHDataTable(ds.Tables("BATCH")))
            End If
            If (Not (ds.Tables("LANGUAGE")) Is Nothing) Then
                MyBase.Tables.Add(New LANGUAGEDataTable(ds.Tables("LANGUAGE")))
            End If
            If (Not (ds.Tables("MAINBATCH")) Is Nothing) Then
                MyBase.Tables.Add(New MAINBATCHDataTable(ds.Tables("MAINBATCH")))
            End If
            If (Not (ds.Tables("MAINPROD_QUEUE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINPROD_QUEUEDataTable(ds.Tables("MAINPROD_QUEUE")))
            End If
            If (Not (ds.Tables("MAINPRODUCTION")) Is Nothing) Then
                MyBase.Tables.Add(New MAINPRODUCTIONDataTable(ds.Tables("MAINPRODUCTION")))
            End If
            If (Not (ds.Tables("MAINRECIPELINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPELINEDataTable(ds.Tables("MAINRECIPELINE")))
            End If
            If (Not (ds.Tables("PROD_QUEUE")) Is Nothing) Then
                MyBase.Tables.Add(New PROD_QUEUEDataTable(ds.Tables("PROD_QUEUE")))
            End If
            If (Not (ds.Tables("PRODUCTION")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTIONDataTable(ds.Tables("PRODUCTION")))
            End If
            If (Not (ds.Tables("RECIPE")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPEDataTable(ds.Tables("RECIPE")))
            End If
            If (Not (ds.Tables("TMP_WP_MESSAGE")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_WP_MESSAGEDataTable(ds.Tables("TMP_WP_MESSAGE")))
            End If
            If (Not (ds.Tables("USER")) Is Nothing) Then
                MyBase.Tables.Add(New USERDataTable(ds.Tables("USER")))
            End If
            If (Not (ds.Tables("WINDOW")) Is Nothing) Then
                MyBase.Tables.Add(New WINDOWDataTable(ds.Tables("WINDOW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BATCH() As BATCHDataTable
        Get
            Return Me.tableBATCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LANGUAGE() As LANGUAGEDataTable
        Get
            Return Me.tableLANGUAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINBATCH() As MAINBATCHDataTable
        Get
            Return Me.tableMAINBATCH
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINPROD_QUEUE() As MAINPROD_QUEUEDataTable
        Get
            Return Me.tableMAINPROD_QUEUE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINPRODUCTION() As MAINPRODUCTIONDataTable
        Get
            Return Me.tableMAINPRODUCTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINRECIPELINE() As MAINRECIPELINEDataTable
        Get
            Return Me.tableMAINRECIPELINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROD_QUEUE() As PROD_QUEUEDataTable
        Get
            Return Me.tablePROD_QUEUE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTION() As PRODUCTIONDataTable
        Get
            Return Me.tablePRODUCTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RECIPE() As RECIPEDataTable
        Get
            Return Me.tableRECIPE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TMP_WP_MESSAGE() As TMP_WP_MESSAGEDataTable
        Get
            Return Me.tableTMP_WP_MESSAGE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property USER() As USERDataTable
        Get
            Return Me.tableUSER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WINDOW() As WINDOWDataTable
        Get
            Return Me.tableWINDOW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As _840002C1DataSet = CType(MyBase.Clone,_840002C1DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("BATCH")) Is Nothing) Then
                MyBase.Tables.Add(New BATCHDataTable(ds.Tables("BATCH")))
            End If
            If (Not (ds.Tables("LANGUAGE")) Is Nothing) Then
                MyBase.Tables.Add(New LANGUAGEDataTable(ds.Tables("LANGUAGE")))
            End If
            If (Not (ds.Tables("MAINBATCH")) Is Nothing) Then
                MyBase.Tables.Add(New MAINBATCHDataTable(ds.Tables("MAINBATCH")))
            End If
            If (Not (ds.Tables("MAINPROD_QUEUE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINPROD_QUEUEDataTable(ds.Tables("MAINPROD_QUEUE")))
            End If
            If (Not (ds.Tables("MAINPRODUCTION")) Is Nothing) Then
                MyBase.Tables.Add(New MAINPRODUCTIONDataTable(ds.Tables("MAINPRODUCTION")))
            End If
            If (Not (ds.Tables("MAINRECIPELINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPELINEDataTable(ds.Tables("MAINRECIPELINE")))
            End If
            If (Not (ds.Tables("PROD_QUEUE")) Is Nothing) Then
                MyBase.Tables.Add(New PROD_QUEUEDataTable(ds.Tables("PROD_QUEUE")))
            End If
            If (Not (ds.Tables("PRODUCTION")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTIONDataTable(ds.Tables("PRODUCTION")))
            End If
            If (Not (ds.Tables("RECIPE")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPEDataTable(ds.Tables("RECIPE")))
            End If
            If (Not (ds.Tables("TMP_WP_MESSAGE")) Is Nothing) Then
                MyBase.Tables.Add(New TMP_WP_MESSAGEDataTable(ds.Tables("TMP_WP_MESSAGE")))
            End If
            If (Not (ds.Tables("USER")) Is Nothing) Then
                MyBase.Tables.Add(New USERDataTable(ds.Tables("USER")))
            End If
            If (Not (ds.Tables("WINDOW")) Is Nothing) Then
                MyBase.Tables.Add(New WINDOWDataTable(ds.Tables("WINDOW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBATCH = CType(MyBase.Tables("BATCH"),BATCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBATCH) Is Nothing) Then
                Me.tableBATCH.InitVars
            End If
        End If
        Me.tableLANGUAGE = CType(MyBase.Tables("LANGUAGE"),LANGUAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLANGUAGE) Is Nothing) Then
                Me.tableLANGUAGE.InitVars
            End If
        End If
        Me.tableMAINBATCH = CType(MyBase.Tables("MAINBATCH"),MAINBATCHDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINBATCH) Is Nothing) Then
                Me.tableMAINBATCH.InitVars
            End If
        End If
        Me.tableMAINPROD_QUEUE = CType(MyBase.Tables("MAINPROD_QUEUE"),MAINPROD_QUEUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINPROD_QUEUE) Is Nothing) Then
                Me.tableMAINPROD_QUEUE.InitVars
            End If
        End If
        Me.tableMAINPRODUCTION = CType(MyBase.Tables("MAINPRODUCTION"),MAINPRODUCTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINPRODUCTION) Is Nothing) Then
                Me.tableMAINPRODUCTION.InitVars
            End If
        End If
        Me.tableMAINRECIPELINE = CType(MyBase.Tables("MAINRECIPELINE"),MAINRECIPELINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINRECIPELINE) Is Nothing) Then
                Me.tableMAINRECIPELINE.InitVars
            End If
        End If
        Me.tablePROD_QUEUE = CType(MyBase.Tables("PROD_QUEUE"),PROD_QUEUEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROD_QUEUE) Is Nothing) Then
                Me.tablePROD_QUEUE.InitVars
            End If
        End If
        Me.tablePRODUCTION = CType(MyBase.Tables("PRODUCTION"),PRODUCTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTION) Is Nothing) Then
                Me.tablePRODUCTION.InitVars
            End If
        End If
        Me.tableRECIPE = CType(MyBase.Tables("RECIPE"),RECIPEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRECIPE) Is Nothing) Then
                Me.tableRECIPE.InitVars
            End If
        End If
        Me.tableTMP_WP_MESSAGE = CType(MyBase.Tables("TMP_WP_MESSAGE"),TMP_WP_MESSAGEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTMP_WP_MESSAGE) Is Nothing) Then
                Me.tableTMP_WP_MESSAGE.InitVars
            End If
        End If
        Me.tableUSER = CType(MyBase.Tables("USER"),USERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUSER) Is Nothing) Then
                Me.tableUSER.InitVars
            End If
        End If
        Me.tableWINDOW = CType(MyBase.Tables("WINDOW"),WINDOWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWINDOW) Is Nothing) Then
                Me.tableWINDOW.InitVars
            End If
        End If
        Me.relationMAINPRODUCTIONMAINBATCH = Me.Relations("MAINPRODUCTIONMAINBATCH")
        Me.relationMAINBATCHMAINRECIPELINE = Me.Relations("MAINBATCHMAINRECIPELINE")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "_840002C1DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/_840002C1DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBATCH = New BATCHDataTable()
        MyBase.Tables.Add(Me.tableBATCH)
        Me.tableLANGUAGE = New LANGUAGEDataTable()
        MyBase.Tables.Add(Me.tableLANGUAGE)
        Me.tableMAINBATCH = New MAINBATCHDataTable()
        MyBase.Tables.Add(Me.tableMAINBATCH)
        Me.tableMAINPROD_QUEUE = New MAINPROD_QUEUEDataTable()
        MyBase.Tables.Add(Me.tableMAINPROD_QUEUE)
        Me.tableMAINPRODUCTION = New MAINPRODUCTIONDataTable()
        MyBase.Tables.Add(Me.tableMAINPRODUCTION)
        Me.tableMAINRECIPELINE = New MAINRECIPELINEDataTable()
        MyBase.Tables.Add(Me.tableMAINRECIPELINE)
        Me.tablePROD_QUEUE = New PROD_QUEUEDataTable()
        MyBase.Tables.Add(Me.tablePROD_QUEUE)
        Me.tablePRODUCTION = New PRODUCTIONDataTable()
        MyBase.Tables.Add(Me.tablePRODUCTION)
        Me.tableRECIPE = New RECIPEDataTable()
        MyBase.Tables.Add(Me.tableRECIPE)
        Me.tableTMP_WP_MESSAGE = New TMP_WP_MESSAGEDataTable()
        MyBase.Tables.Add(Me.tableTMP_WP_MESSAGE)
        Me.tableUSER = New USERDataTable()
        MyBase.Tables.Add(Me.tableUSER)
        Me.tableWINDOW = New WINDOWDataTable()
        MyBase.Tables.Add(Me.tableWINDOW)
        Me.relationMAINPRODUCTIONMAINBATCH = New Global.System.Data.DataRelation("MAINPRODUCTIONMAINBATCH", New Global.System.Data.DataColumn() {Me.tableMAINPRODUCTION.MAINPROD_NUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableMAINBATCH.MAINPROD_NUMBERColumn}, false)
        Me.Relations.Add(Me.relationMAINPRODUCTIONMAINBATCH)
        Me.relationMAINBATCHMAINRECIPELINE = New Global.System.Data.DataRelation("MAINBATCHMAINRECIPELINE", New Global.System.Data.DataColumn() {Me.tableMAINBATCH.MAINPROD_NUMBERColumn, Me.tableMAINBATCH.MAINBATCH_NUMBERColumn}, New Global.System.Data.DataColumn() {Me.tableMAINRECIPELINE.MAINPROD_NUMBERColumn, Me.tableMAINRECIPELINE.MAINBATCH_NUMBERColumn}, false)
        Me.Relations.Add(Me.relationMAINBATCHMAINRECIPELINE)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeBATCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeLANGUAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINBATCH() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINPROD_QUEUE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINPRODUCTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINRECIPELINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROD_QUEUE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePRODUCTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRECIPE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTMP_WP_MESSAGE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUSER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWINDOW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As _840002C1DataSet = New _840002C1DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub BATCHRowChangeEventHandler(ByVal sender As Object, ByVal e As BATCHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub LANGUAGERowChangeEventHandler(ByVal sender As Object, ByVal e As LANGUAGERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINBATCHRowChangeEventHandler(ByVal sender As Object, ByVal e As MAINBATCHRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINPROD_QUEUERowChangeEventHandler(ByVal sender As Object, ByVal e As MAINPROD_QUEUERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINPRODUCTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As MAINPRODUCTIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINRECIPELINERowChangeEventHandler(ByVal sender As Object, ByVal e As MAINRECIPELINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROD_QUEUERowChangeEventHandler(ByVal sender As Object, ByVal e As PROD_QUEUERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PRODUCTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTIONRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RECIPERowChangeEventHandler(ByVal sender As Object, ByVal e As RECIPERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TMP_WP_MESSAGERowChangeEventHandler(ByVal sender As Object, ByVal e As TMP_WP_MESSAGERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub USERRowChangeEventHandler(ByVal sender As Object, ByVal e As USERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WINDOWRowChangeEventHandler(ByVal sender As Object, ByVal e As WINDOWRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BATCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnBATCH_SETPOINT As Global.System.Data.DataColumn
        
        Private columnBATCH_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnBATCH_UNIT As Global.System.Data.DataColumn
        
        Private columnBATCH_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnBATCH_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnBREAKPOINT As Global.System.Data.DataColumn
        
        Private columnBATCH_ERRNUM As Global.System.Data.DataColumn
        
        Private columnBATCH_ABORT As Global.System.Data.DataColumn
        
        Private columnSEQUENCE_NUMBER As Global.System.Data.DataColumn
        
        Private columnREPBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnBATCH_ACTIVE As Global.System.Data.DataColumn
        
        Private columnBATCH_FACTOR As Global.System.Data.DataColumn
        
        Private columnBATCH_REPORT_READY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BATCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BREAKPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBREAKPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ABORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ABORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQUENCE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQUENCE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_FACTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_FACTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_REPORT_READYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_REPORT_READY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BATCHRow
            Get
                Return CType(Me.Rows(index),BATCHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BATCHRowChanging As BATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BATCHRowChanged As BATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BATCHRowDeleting As BATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event BATCHRowDeleted As BATCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddBATCHRow(ByVal row As BATCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddBATCHRow(ByVal PRODLINE_IDENT As String, ByVal BATCH_NUMBER As Short, ByVal BATCH_SETPOINT As Double, ByVal BATCH_ACTVALUE As Double, ByVal BATCH_UNIT As String, ByVal BATCH_DECIMALPOINT As Short, ByVal BATCH_MAXRESOLU_DP As Short, ByVal BREAKPOINT As Boolean, ByVal BATCH_ERRNUM As Short, ByVal BATCH_ABORT As Boolean, ByVal SEQUENCE_NUMBER As Integer, ByVal REPBATCH_NUMBER As Integer, ByVal BATCH_ACTIVE As Boolean, ByVal BATCH_FACTOR As Double, ByVal BATCH_REPORT_READY As Boolean) As BATCHRow
            Dim rowBATCHRow As BATCHRow = CType(Me.NewRow,BATCHRow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, BATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_UNIT, BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BREAKPOINT, BATCH_ERRNUM, BATCH_ABORT, SEQUENCE_NUMBER, REPBATCH_NUMBER, BATCH_ACTIVE, BATCH_FACTOR, BATCH_REPORT_READY}
            rowBATCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBATCHRow)
            Return rowBATCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTBATCH_NUMBER(ByVal PRODLINE_IDENT As String, ByVal BATCH_NUMBER As Short) As BATCHRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, BATCH_NUMBER}),BATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BATCHDataTable = CType(MyBase.Clone,BATCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BATCHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnBATCH_NUMBER = MyBase.Columns("BATCH_NUMBER")
            Me.columnBATCH_SETPOINT = MyBase.Columns("BATCH_SETPOINT")
            Me.columnBATCH_ACTVALUE = MyBase.Columns("BATCH_ACTVALUE")
            Me.columnBATCH_UNIT = MyBase.Columns("BATCH_UNIT")
            Me.columnBATCH_DECIMALPOINT = MyBase.Columns("BATCH_DECIMALPOINT")
            Me.columnBATCH_MAXRESOLU_DP = MyBase.Columns("BATCH_MAXRESOLU_DP")
            Me.columnBREAKPOINT = MyBase.Columns("BREAKPOINT")
            Me.columnBATCH_ERRNUM = MyBase.Columns("BATCH_ERRNUM")
            Me.columnBATCH_ABORT = MyBase.Columns("BATCH_ABORT")
            Me.columnSEQUENCE_NUMBER = MyBase.Columns("SEQUENCE_NUMBER")
            Me.columnREPBATCH_NUMBER = MyBase.Columns("REPBATCH_NUMBER")
            Me.columnBATCH_ACTIVE = MyBase.Columns("BATCH_ACTIVE")
            Me.columnBATCH_FACTOR = MyBase.Columns("BATCH_FACTOR")
            Me.columnBATCH_REPORT_READY = MyBase.Columns("BATCH_REPORT_READY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnBATCH_NUMBER = New Global.System.Data.DataColumn("BATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NUMBER)
            Me.columnBATCH_SETPOINT = New Global.System.Data.DataColumn("BATCH_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_SETPOINT)
            Me.columnBATCH_ACTVALUE = New Global.System.Data.DataColumn("BATCH_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ACTVALUE)
            Me.columnBATCH_UNIT = New Global.System.Data.DataColumn("BATCH_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_UNIT)
            Me.columnBATCH_DECIMALPOINT = New Global.System.Data.DataColumn("BATCH_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_DECIMALPOINT)
            Me.columnBATCH_MAXRESOLU_DP = New Global.System.Data.DataColumn("BATCH_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_MAXRESOLU_DP)
            Me.columnBREAKPOINT = New Global.System.Data.DataColumn("BREAKPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBREAKPOINT)
            Me.columnBATCH_ERRNUM = New Global.System.Data.DataColumn("BATCH_ERRNUM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ERRNUM)
            Me.columnBATCH_ABORT = New Global.System.Data.DataColumn("BATCH_ABORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ABORT)
            Me.columnSEQUENCE_NUMBER = New Global.System.Data.DataColumn("SEQUENCE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQUENCE_NUMBER)
            Me.columnREPBATCH_NUMBER = New Global.System.Data.DataColumn("REPBATCH_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPBATCH_NUMBER)
            Me.columnBATCH_ACTIVE = New Global.System.Data.DataColumn("BATCH_ACTIVE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ACTIVE)
            Me.columnBATCH_FACTOR = New Global.System.Data.DataColumn("BATCH_FACTOR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_FACTOR)
            Me.columnBATCH_REPORT_READY = New Global.System.Data.DataColumn("BATCH_REPORT_READY", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_REPORT_READY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnBATCH_NUMBER}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnBATCH_NUMBER.AllowDBNull = false
            Me.columnBATCH_UNIT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewBATCHRow() As BATCHRow
            Return CType(Me.NewRow,BATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BATCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BATCHRowChangedEvent) Is Nothing) Then
                RaiseEvent BATCHRowChanged(Me, New BATCHRowChangeEvent(CType(e.Row,BATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BATCHRowChangingEvent) Is Nothing) Then
                RaiseEvent BATCHRowChanging(Me, New BATCHRowChangeEvent(CType(e.Row,BATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BATCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent BATCHRowDeleted(Me, New BATCHRowChangeEvent(CType(e.Row,BATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BATCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent BATCHRowDeleting(Me, New BATCHRowChangeEvent(CType(e.Row,BATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveBATCHRow(ByVal row As BATCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BATCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LANGUAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private _columnProBatch_ As Global.System.Data.DataColumn
        
        Private columnEnglish As Global.System.Data.DataColumn
        
        Private _columnEnglish__US_ As Global.System.Data.DataColumn
        
        Private columnDeutsch As Global.System.Data.DataColumn
        
        Private columnFrançais As Global.System.Data.DataColumn
        
        Private columnNederlands As Global.System.Data.DataColumn
        
        Private columnSvensk As Global.System.Data.DataColumn
        
        Private columnItaliano As Global.System.Data.DataColumn
        
        Private columnEspañol As Global.System.Data.DataColumn
        
        Private columnPortuguês As Global.System.Data.DataColumn
        
        Private columnSuomi As Global.System.Data.DataColumn
        
        Private columnDansk As Global.System.Data.DataColumn
        
        Private columnPolski As Global.System.Data.DataColumn
        
        Private columnGreek As Global.System.Data.DataColumn
        
        Private columnRussian As Global.System.Data.DataColumn
        
        Private columnTurkish As Global.System.Data.DataColumn
        
        Private _column_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LANGUAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _ProBatch_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnProBatch_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EnglishColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEnglish
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _English__US_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnEnglish__US_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DeutschColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeutsch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FrançaisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrançais
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NederlandsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNederlands
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SvenskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSvensk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ItalianoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItaliano
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EspañolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEspañol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PortuguêsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPortuguês
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SuomiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSuomi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DanskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDansk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PolskiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPolski
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GreekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RussianColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRussian
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TurkishColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTurkish
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __Column() As Global.System.Data.DataColumn
            Get
                Return Me._column_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LANGUAGERow
            Get
                Return CType(Me.Rows(index),LANGUAGERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LANGUAGERowChanging As LANGUAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LANGUAGERowChanged As LANGUAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LANGUAGERowDeleting As LANGUAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event LANGUAGERowDeleted As LANGUAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddLANGUAGERow(ByVal row As LANGUAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddLANGUAGERow( _
                    ByVal _ProBatch_ As String,  _
                    ByVal English As String,  _
                    ByVal _English__US_ As String,  _
                    ByVal Deutsch As String,  _
                    ByVal Français As String,  _
                    ByVal Nederlands As String,  _
                    ByVal Svensk As String,  _
                    ByVal Italiano As String,  _
                    ByVal Español As String,  _
                    ByVal Português As String,  _
                    ByVal Suomi As String,  _
                    ByVal Dansk As String,  _
                    ByVal Polski As String,  _
                    ByVal Greek As String,  _
                    ByVal Russian As String,  _
                    ByVal Turkish As String,  _
                    ByVal __ As String) As LANGUAGERow
            Dim rowLANGUAGERow As LANGUAGERow = CType(Me.NewRow,LANGUAGERow)
            Dim columnValuesArray() As Object = New Object() {_ProBatch_, English, _English__US_, Deutsch, Français, Nederlands, Svensk, Italiano, Español, Português, Suomi, Dansk, Polski, Greek, Russian, Turkish, __}
            rowLANGUAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLANGUAGERow)
            Return rowLANGUAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBy_ProBatch_(ByVal _ProBatch_ As String) As LANGUAGERow
            Return CType(Me.Rows.Find(New Object() {_ProBatch_}),LANGUAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LANGUAGEDataTable = CType(MyBase.Clone,LANGUAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LANGUAGEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me._columnProBatch_ = MyBase.Columns("ProBatch+")
            Me.columnEnglish = MyBase.Columns("English")
            Me._columnEnglish__US_ = MyBase.Columns("English (US)")
            Me.columnDeutsch = MyBase.Columns("Deutsch")
            Me.columnFrançais = MyBase.Columns("Français")
            Me.columnNederlands = MyBase.Columns("Nederlands")
            Me.columnSvensk = MyBase.Columns("Svensk")
            Me.columnItaliano = MyBase.Columns("Italiano")
            Me.columnEspañol = MyBase.Columns("Español")
            Me.columnPortuguês = MyBase.Columns("Português")
            Me.columnSuomi = MyBase.Columns("Suomi")
            Me.columnDansk = MyBase.Columns("Dansk")
            Me.columnPolski = MyBase.Columns("Polski")
            Me.columnGreek = MyBase.Columns("Greek")
            Me.columnRussian = MyBase.Columns("Russian")
            Me.columnTurkish = MyBase.Columns("Turkish")
            Me._column_ = MyBase.Columns("*")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me._columnProBatch_ = New Global.System.Data.DataColumn("ProBatch+", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnProBatch_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnProBatch_")
            Me._columnProBatch_.ExtendedProperties.Add("Generator_UserColumnName", "ProBatch+")
            MyBase.Columns.Add(Me._columnProBatch_)
            Me.columnEnglish = New Global.System.Data.DataColumn("English", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnglish)
            Me._columnEnglish__US_ = New Global.System.Data.DataColumn("English (US)", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnEnglish__US_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnEnglish__US_")
            Me._columnEnglish__US_.ExtendedProperties.Add("Generator_UserColumnName", "English (US)")
            MyBase.Columns.Add(Me._columnEnglish__US_)
            Me.columnDeutsch = New Global.System.Data.DataColumn("Deutsch", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeutsch)
            Me.columnFrançais = New Global.System.Data.DataColumn("Français", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrançais)
            Me.columnNederlands = New Global.System.Data.DataColumn("Nederlands", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNederlands)
            Me.columnSvensk = New Global.System.Data.DataColumn("Svensk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSvensk)
            Me.columnItaliano = New Global.System.Data.DataColumn("Italiano", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItaliano)
            Me.columnEspañol = New Global.System.Data.DataColumn("Español", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEspañol)
            Me.columnPortuguês = New Global.System.Data.DataColumn("Português", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPortuguês)
            Me.columnSuomi = New Global.System.Data.DataColumn("Suomi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuomi)
            Me.columnDansk = New Global.System.Data.DataColumn("Dansk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDansk)
            Me.columnPolski = New Global.System.Data.DataColumn("Polski", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPolski)
            Me.columnGreek = New Global.System.Data.DataColumn("Greek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreek)
            Me.columnRussian = New Global.System.Data.DataColumn("Russian", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRussian)
            Me.columnTurkish = New Global.System.Data.DataColumn("Turkish", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurkish)
            Me._column_ = New Global.System.Data.DataColumn("*", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_")
            Me._column_.ExtendedProperties.Add("Generator_UserColumnName", "*")
            MyBase.Columns.Add(Me._column_)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me._columnProBatch_}, true))
            Me._columnProBatch_.AllowDBNull = false
            Me._columnProBatch_.Unique = true
            Me._columnProBatch_.MaxLength = 536870910
            Me.columnEnglish.MaxLength = 150
            Me._columnEnglish__US_.MaxLength = 150
            Me.columnDeutsch.MaxLength = 150
            Me.columnFrançais.MaxLength = 150
            Me.columnNederlands.MaxLength = 150
            Me.columnSvensk.MaxLength = 150
            Me.columnItaliano.MaxLength = 150
            Me.columnEspañol.MaxLength = 150
            Me.columnPortuguês.MaxLength = 150
            Me.columnSuomi.MaxLength = 150
            Me.columnDansk.MaxLength = 150
            Me.columnPolski.MaxLength = 150
            Me.columnGreek.MaxLength = 150
            Me.columnRussian.MaxLength = 150
            Me.columnTurkish.MaxLength = 150
            Me._column_.MaxLength = 150
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewLANGUAGERow() As LANGUAGERow
            Return CType(Me.NewRow,LANGUAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LANGUAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LANGUAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LANGUAGERowChangedEvent) Is Nothing) Then
                RaiseEvent LANGUAGERowChanged(Me, New LANGUAGERowChangeEvent(CType(e.Row,LANGUAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LANGUAGERowChangingEvent) Is Nothing) Then
                RaiseEvent LANGUAGERowChanging(Me, New LANGUAGERowChangeEvent(CType(e.Row,LANGUAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LANGUAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent LANGUAGERowDeleted(Me, New LANGUAGERowChangeEvent(CType(e.Row,LANGUAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LANGUAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent LANGUAGERowDeleting(Me, New LANGUAGERowChangeEvent(CType(e.Row,LANGUAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveLANGUAGERow(ByVal row As LANGUAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LANGUAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINBATCHDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnBATCH_SETPOINT As Global.System.Data.DataColumn
        
        Private columnBATCH_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnBATCH_UNIT As Global.System.Data.DataColumn
        
        Private columnBATCH_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnBATCH_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnBATCH_ERRNUM As Global.System.Data.DataColumn
        
        Private columnBATCH_ABORT As Global.System.Data.DataColumn
        
        Private columnBATCH_DONE As Global.System.Data.DataColumn
        
        Private columnBATCH_STATUS As Global.System.Data.DataColumn
        
        Private columnREPMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINSEQUENCE_NUMBER As Global.System.Data.DataColumn
        
        Private columnBREAKPOINT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINBATCH"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_ABORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_ABORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_DONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_DONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPMAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINSEQUENCE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINSEQUENCE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BREAKPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBREAKPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINBATCHRow
            Get
                Return CType(Me.Rows(index),MAINBATCHRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINBATCHRowChanging As MAINBATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINBATCHRowChanged As MAINBATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINBATCHRowDeleting As MAINBATCHRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINBATCHRowDeleted As MAINBATCHRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINBATCHRow(ByVal row As MAINBATCHRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINBATCHRow(ByVal parentMAINPRODUCTIONRowByMAINPRODUCTIONMAINBATCH As MAINPRODUCTIONRow, ByVal MAINBATCH_NUMBER As Short, ByVal BATCH_SETPOINT As Double, ByVal BATCH_ACTVALUE As Double, ByVal BATCH_UNIT As String, ByVal BATCH_DECIMALPOINT As Short, ByVal BATCH_MAXRESOLU_DP As Short, ByVal BATCH_ERRNUM As Short, ByVal BATCH_ABORT As Boolean, ByVal BATCH_DONE As Boolean, ByVal BATCH_STATUS As Short, ByVal REPMAINBATCH_NUMBER As Integer, ByVal MAINSEQUENCE_NUMBER As Integer, ByVal BREAKPOINT As Boolean) As MAINBATCHRow
            Dim rowMAINBATCHRow As MAINBATCHRow = CType(Me.NewRow,MAINBATCHRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MAINBATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_UNIT, BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BATCH_ERRNUM, BATCH_ABORT, BATCH_DONE, BATCH_STATUS, REPMAINBATCH_NUMBER, MAINSEQUENCE_NUMBER, BREAKPOINT}
            If (Not (parentMAINPRODUCTIONRowByMAINPRODUCTIONMAINBATCH) Is Nothing) Then
                columnValuesArray(0) = parentMAINPRODUCTIONRowByMAINPRODUCTIONMAINBATCH(0)
            End If
            rowMAINBATCHRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINBATCHRow)
            Return rowMAINBATCHRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINPROD_NUMBERMAINBATCH_NUMBER(ByVal MAINPROD_NUMBER As Integer, ByVal MAINBATCH_NUMBER As Short) As MAINBATCHRow
            Return CType(Me.Rows.Find(New Object() {MAINPROD_NUMBER, MAINBATCH_NUMBER}),MAINBATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINBATCHDataTable = CType(MyBase.Clone,MAINBATCHDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINBATCHDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINPROD_NUMBER = MyBase.Columns("MAINPROD_NUMBER")
            Me.columnMAINBATCH_NUMBER = MyBase.Columns("MAINBATCH_NUMBER")
            Me.columnBATCH_SETPOINT = MyBase.Columns("BATCH_SETPOINT")
            Me.columnBATCH_ACTVALUE = MyBase.Columns("BATCH_ACTVALUE")
            Me.columnBATCH_UNIT = MyBase.Columns("BATCH_UNIT")
            Me.columnBATCH_DECIMALPOINT = MyBase.Columns("BATCH_DECIMALPOINT")
            Me.columnBATCH_MAXRESOLU_DP = MyBase.Columns("BATCH_MAXRESOLU_DP")
            Me.columnBATCH_ERRNUM = MyBase.Columns("BATCH_ERRNUM")
            Me.columnBATCH_ABORT = MyBase.Columns("BATCH_ABORT")
            Me.columnBATCH_DONE = MyBase.Columns("BATCH_DONE")
            Me.columnBATCH_STATUS = MyBase.Columns("BATCH_STATUS")
            Me.columnREPMAINBATCH_NUMBER = MyBase.Columns("REPMAINBATCH_NUMBER")
            Me.columnMAINSEQUENCE_NUMBER = MyBase.Columns("MAINSEQUENCE_NUMBER")
            Me.columnBREAKPOINT = MyBase.Columns("BREAKPOINT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINPROD_NUMBER = New Global.System.Data.DataColumn("MAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPROD_NUMBER)
            Me.columnMAINBATCH_NUMBER = New Global.System.Data.DataColumn("MAINBATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINBATCH_NUMBER)
            Me.columnBATCH_SETPOINT = New Global.System.Data.DataColumn("BATCH_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_SETPOINT)
            Me.columnBATCH_ACTVALUE = New Global.System.Data.DataColumn("BATCH_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ACTVALUE)
            Me.columnBATCH_UNIT = New Global.System.Data.DataColumn("BATCH_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_UNIT)
            Me.columnBATCH_DECIMALPOINT = New Global.System.Data.DataColumn("BATCH_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_DECIMALPOINT)
            Me.columnBATCH_MAXRESOLU_DP = New Global.System.Data.DataColumn("BATCH_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_MAXRESOLU_DP)
            Me.columnBATCH_ERRNUM = New Global.System.Data.DataColumn("BATCH_ERRNUM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ERRNUM)
            Me.columnBATCH_ABORT = New Global.System.Data.DataColumn("BATCH_ABORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_ABORT)
            Me.columnBATCH_DONE = New Global.System.Data.DataColumn("BATCH_DONE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_DONE)
            Me.columnBATCH_STATUS = New Global.System.Data.DataColumn("BATCH_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_STATUS)
            Me.columnREPMAINBATCH_NUMBER = New Global.System.Data.DataColumn("REPMAINBATCH_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPMAINBATCH_NUMBER)
            Me.columnMAINSEQUENCE_NUMBER = New Global.System.Data.DataColumn("MAINSEQUENCE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINSEQUENCE_NUMBER)
            Me.columnBREAKPOINT = New Global.System.Data.DataColumn("BREAKPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBREAKPOINT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINPROD_NUMBER, Me.columnMAINBATCH_NUMBER}, true))
            Me.columnMAINPROD_NUMBER.AllowDBNull = false
            Me.columnMAINBATCH_NUMBER.AllowDBNull = false
            Me.columnBATCH_UNIT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINBATCHRow() As MAINBATCHRow
            Return CType(Me.NewRow,MAINBATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINBATCHRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINBATCHRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINBATCHRowChangedEvent) Is Nothing) Then
                RaiseEvent MAINBATCHRowChanged(Me, New MAINBATCHRowChangeEvent(CType(e.Row,MAINBATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINBATCHRowChangingEvent) Is Nothing) Then
                RaiseEvent MAINBATCHRowChanging(Me, New MAINBATCHRowChangeEvent(CType(e.Row,MAINBATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINBATCHRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINBATCHRowDeleted(Me, New MAINBATCHRowChangeEvent(CType(e.Row,MAINBATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINBATCHRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINBATCHRowDeleting(Me, New MAINBATCHRowChangeEvent(CType(e.Row,MAINBATCHRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINBATCHRow(ByVal row As MAINBATCHRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINBATCHDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINPROD_QUEUEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnSTART_DATETIME As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_USER As Global.System.Data.DataColumn
        
        Private columnPROD_START_SYNCHRON As Global.System.Data.DataColumn
        
        Private columnPROD_CYCLE As Global.System.Data.DataColumn
        
        Private columnMAINPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINPLAN_LINE As Global.System.Data.DataColumn
        
        Private columnPROD_PCAUTOSTART As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINPROD_QUEUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property START_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_START_SYNCHRONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_START_SYNCHRON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPLAN_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPLAN_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_PCAUTOSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_PCAUTOSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINPROD_QUEUERow
            Get
                Return CType(Me.Rows(index),MAINPROD_QUEUERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPROD_QUEUERowChanging As MAINPROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPROD_QUEUERowChanged As MAINPROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPROD_QUEUERowDeleting As MAINPROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPROD_QUEUERowDeleted As MAINPROD_QUEUERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINPROD_QUEUERow(ByVal row As MAINPROD_QUEUERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINPROD_QUEUERow(ByVal START_DATETIME As Date, ByVal MAINRECIPE_IDENT As String, ByVal PROD_SETPOINT As Double, ByVal PROD_UNIT As String, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Integer, ByVal PROD_USER As String, ByVal PROD_START_SYNCHRON As Boolean, ByVal PROD_CYCLE As Short, ByVal MAINPLAN_IDENT As String, ByVal MAINPLAN_LINE As Short, ByVal PROD_PCAUTOSTART As Boolean) As MAINPROD_QUEUERow
            Dim rowMAINPROD_QUEUERow As MAINPROD_QUEUERow = CType(Me.NewRow,MAINPROD_QUEUERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, START_DATETIME, MAINRECIPE_IDENT, PROD_SETPOINT, PROD_UNIT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_USER, PROD_START_SYNCHRON, PROD_CYCLE, MAINPLAN_IDENT, MAINPLAN_LINE, PROD_PCAUTOSTART}
            rowMAINPROD_QUEUERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINPROD_QUEUERow)
            Return rowMAINPROD_QUEUERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROD_NUMBERSTART_DATETIME(ByVal PROD_NUMBER As Integer, ByVal START_DATETIME As Date) As MAINPROD_QUEUERow
            Return CType(Me.Rows.Find(New Object() {PROD_NUMBER, START_DATETIME}),MAINPROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINPROD_QUEUEDataTable = CType(MyBase.Clone,MAINPROD_QUEUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINPROD_QUEUEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROD_NUMBER = MyBase.Columns("PROD_NUMBER")
            Me.columnSTART_DATETIME = MyBase.Columns("START_DATETIME")
            Me.columnMAINRECIPE_IDENT = MyBase.Columns("MAINRECIPE_IDENT")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_USER = MyBase.Columns("PROD_USER")
            Me.columnPROD_START_SYNCHRON = MyBase.Columns("PROD_START_SYNCHRON")
            Me.columnPROD_CYCLE = MyBase.Columns("PROD_CYCLE")
            Me.columnMAINPLAN_IDENT = MyBase.Columns("MAINPLAN_IDENT")
            Me.columnMAINPLAN_LINE = MyBase.Columns("MAINPLAN_LINE")
            Me.columnPROD_PCAUTOSTART = MyBase.Columns("PROD_PCAUTOSTART")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROD_NUMBER = New Global.System.Data.DataColumn("PROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUMBER)
            Me.columnSTART_DATETIME = New Global.System.Data.DataColumn("START_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_DATETIME)
            Me.columnMAINRECIPE_IDENT = New Global.System.Data.DataColumn("MAINRECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_IDENT)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_USER = New Global.System.Data.DataColumn("PROD_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_USER)
            Me.columnPROD_START_SYNCHRON = New Global.System.Data.DataColumn("PROD_START_SYNCHRON", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_START_SYNCHRON)
            Me.columnPROD_CYCLE = New Global.System.Data.DataColumn("PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_CYCLE)
            Me.columnMAINPLAN_IDENT = New Global.System.Data.DataColumn("MAINPLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPLAN_IDENT)
            Me.columnMAINPLAN_LINE = New Global.System.Data.DataColumn("MAINPLAN_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPLAN_LINE)
            Me.columnPROD_PCAUTOSTART = New Global.System.Data.DataColumn("PROD_PCAUTOSTART", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_PCAUTOSTART)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROD_NUMBER, Me.columnSTART_DATETIME}, true))
            Me.columnPROD_NUMBER.AutoIncrement = true
            Me.columnPROD_NUMBER.AutoIncrementSeed = -1
            Me.columnPROD_NUMBER.AutoIncrementStep = -1
            Me.columnPROD_NUMBER.AllowDBNull = false
            Me.columnSTART_DATETIME.AllowDBNull = false
            Me.columnMAINRECIPE_IDENT.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_USER.MaxLength = 20
            Me.columnMAINPLAN_IDENT.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINPROD_QUEUERow() As MAINPROD_QUEUERow
            Return CType(Me.NewRow,MAINPROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINPROD_QUEUERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINPROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINPROD_QUEUERowChangedEvent) Is Nothing) Then
                RaiseEvent MAINPROD_QUEUERowChanged(Me, New MAINPROD_QUEUERowChangeEvent(CType(e.Row,MAINPROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINPROD_QUEUERowChangingEvent) Is Nothing) Then
                RaiseEvent MAINPROD_QUEUERowChanging(Me, New MAINPROD_QUEUERowChangeEvent(CType(e.Row,MAINPROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINPROD_QUEUERowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINPROD_QUEUERowDeleted(Me, New MAINPROD_QUEUERowChangeEvent(CType(e.Row,MAINPROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINPROD_QUEUERowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINPROD_QUEUERowDeleting(Me, New MAINPROD_QUEUERowChangeEvent(CType(e.Row,MAINPROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINPROD_QUEUERow(ByVal row As MAINPROD_QUEUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINPROD_QUEUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINPRODUCTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_NAME As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_CREATE_DATE As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_CHANGE_DATE As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_USER As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT_ENABLED As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT_TIME As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT_ACTIVE As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnPROD_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_USER As Global.System.Data.DataColumn
        
        Private columnPROD_START_SYNCHRON As Global.System.Data.DataColumn
        
        Private columnBATCH_MAXNUM As Global.System.Data.DataColumn
        
        Private columnPROD_STATUS As Global.System.Data.DataColumn
        
        Private columnREPMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnLOG_REPORT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINPRODUCTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_CREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_CHANGE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_CHANGE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUT_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUT_TIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT_TIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUT_ACTIVEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT_ACTIVE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_START_SYNCHRONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_START_SYNCHRON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_MAXNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_MAXNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPMAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINPRODUCTIONRow
            Get
                Return CType(Me.Rows(index),MAINPRODUCTIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPRODUCTIONRowChanging As MAINPRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPRODUCTIONRowChanged As MAINPRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPRODUCTIONRowDeleting As MAINPRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINPRODUCTIONRowDeleted As MAINPRODUCTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINPRODUCTIONRow(ByVal row As MAINPRODUCTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINPRODUCTIONRow( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_TIMEOUT As Date,  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TIMEOUT_TIME As Date,  _
                    ByVal MAINRECIPE_TIMEOUT_ACTIVE As Boolean,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_ACTVALUE As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Short,  _
                    ByVal PROD_MAXRESOLU_DP As Short,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Integer,  _
                    ByVal PROD_USER As String,  _
                    ByVal PROD_START_SYNCHRON As Boolean,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal PROD_STATUS As Short,  _
                    ByVal REPMAINPROD_NUMBER As Integer,  _
                    ByVal LOG_REPORT As Boolean) As MAINPRODUCTIONRow
            Dim rowMAINPRODUCTIONRow As MAINPRODUCTIONRow = CType(Me.NewRow,MAINPRODUCTIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MAINRECIPE_IDENT, MAINRECIPE_NAME, MAINRECIPE_CREATE_DATE, MAINRECIPE_CHANGE_DATE, MAINRECIPE_USER, MAINRECIPE_TIMEOUT, MAINRECIPE_TIMEOUT_ENABLED, MAINRECIPE_TIMEOUT_TIME, MAINRECIPE_TIMEOUT_ACTIVE, PROD_SETPOINT, PROD_ACTVALUE, PROD_UNIT, PROD_DECIMALPOINT, PROD_MAXRESOLU_DP, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_USER, PROD_START_SYNCHRON, BATCH_MAXNUM, PROD_STATUS, REPMAINPROD_NUMBER, LOG_REPORT}
            rowMAINPRODUCTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINPRODUCTIONRow)
            Return rowMAINPRODUCTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINPROD_NUMBER(ByVal MAINPROD_NUMBER As Integer) As MAINPRODUCTIONRow
            Return CType(Me.Rows.Find(New Object() {MAINPROD_NUMBER}),MAINPRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINPRODUCTIONDataTable = CType(MyBase.Clone,MAINPRODUCTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINPRODUCTIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINPROD_NUMBER = MyBase.Columns("MAINPROD_NUMBER")
            Me.columnMAINRECIPE_IDENT = MyBase.Columns("MAINRECIPE_IDENT")
            Me.columnMAINRECIPE_NAME = MyBase.Columns("MAINRECIPE_NAME")
            Me.columnMAINRECIPE_CREATE_DATE = MyBase.Columns("MAINRECIPE_CREATE_DATE")
            Me.columnMAINRECIPE_CHANGE_DATE = MyBase.Columns("MAINRECIPE_CHANGE_DATE")
            Me.columnMAINRECIPE_USER = MyBase.Columns("MAINRECIPE_USER")
            Me.columnMAINRECIPE_TIMEOUT = MyBase.Columns("MAINRECIPE_TIMEOUT")
            Me.columnMAINRECIPE_TIMEOUT_ENABLED = MyBase.Columns("MAINRECIPE_TIMEOUT_ENABLED")
            Me.columnMAINRECIPE_TIMEOUT_TIME = MyBase.Columns("MAINRECIPE_TIMEOUT_TIME")
            Me.columnMAINRECIPE_TIMEOUT_ACTIVE = MyBase.Columns("MAINRECIPE_TIMEOUT_ACTIVE")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_ACTVALUE = MyBase.Columns("PROD_ACTVALUE")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnPROD_DECIMALPOINT = MyBase.Columns("PROD_DECIMALPOINT")
            Me.columnPROD_MAXRESOLU_DP = MyBase.Columns("PROD_MAXRESOLU_DP")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_USER = MyBase.Columns("PROD_USER")
            Me.columnPROD_START_SYNCHRON = MyBase.Columns("PROD_START_SYNCHRON")
            Me.columnBATCH_MAXNUM = MyBase.Columns("BATCH_MAXNUM")
            Me.columnPROD_STATUS = MyBase.Columns("PROD_STATUS")
            Me.columnREPMAINPROD_NUMBER = MyBase.Columns("REPMAINPROD_NUMBER")
            Me.columnLOG_REPORT = MyBase.Columns("LOG_REPORT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINPROD_NUMBER = New Global.System.Data.DataColumn("MAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPROD_NUMBER)
            Me.columnMAINRECIPE_IDENT = New Global.System.Data.DataColumn("MAINRECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_IDENT)
            Me.columnMAINRECIPE_NAME = New Global.System.Data.DataColumn("MAINRECIPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_NAME)
            Me.columnMAINRECIPE_CREATE_DATE = New Global.System.Data.DataColumn("MAINRECIPE_CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_CREATE_DATE)
            Me.columnMAINRECIPE_CHANGE_DATE = New Global.System.Data.DataColumn("MAINRECIPE_CHANGE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_CHANGE_DATE)
            Me.columnMAINRECIPE_USER = New Global.System.Data.DataColumn("MAINRECIPE_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_USER)
            Me.columnMAINRECIPE_TIMEOUT = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT)
            Me.columnMAINRECIPE_TIMEOUT_ENABLED = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT_ENABLED)
            Me.columnMAINRECIPE_TIMEOUT_TIME = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT_TIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT_TIME)
            Me.columnMAINRECIPE_TIMEOUT_ACTIVE = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT_ACTIVE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT_ACTIVE)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_ACTVALUE = New Global.System.Data.DataColumn("PROD_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_ACTVALUE)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnPROD_DECIMALPOINT = New Global.System.Data.DataColumn("PROD_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_DECIMALPOINT)
            Me.columnPROD_MAXRESOLU_DP = New Global.System.Data.DataColumn("PROD_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_MAXRESOLU_DP)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_USER = New Global.System.Data.DataColumn("PROD_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_USER)
            Me.columnPROD_START_SYNCHRON = New Global.System.Data.DataColumn("PROD_START_SYNCHRON", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_START_SYNCHRON)
            Me.columnBATCH_MAXNUM = New Global.System.Data.DataColumn("BATCH_MAXNUM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_MAXNUM)
            Me.columnPROD_STATUS = New Global.System.Data.DataColumn("PROD_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_STATUS)
            Me.columnREPMAINPROD_NUMBER = New Global.System.Data.DataColumn("REPMAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPMAINPROD_NUMBER)
            Me.columnLOG_REPORT = New Global.System.Data.DataColumn("LOG_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_REPORT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINPROD_NUMBER}, true))
            Me.columnMAINPROD_NUMBER.AutoIncrement = true
            Me.columnMAINPROD_NUMBER.AutoIncrementSeed = -1
            Me.columnMAINPROD_NUMBER.AutoIncrementStep = -1
            Me.columnMAINPROD_NUMBER.AllowDBNull = false
            Me.columnMAINPROD_NUMBER.Unique = true
            Me.columnMAINRECIPE_IDENT.MaxLength = 20
            Me.columnMAINRECIPE_NAME.MaxLength = 30
            Me.columnMAINRECIPE_USER.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_USER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINPRODUCTIONRow() As MAINPRODUCTIONRow
            Return CType(Me.NewRow,MAINPRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINPRODUCTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINPRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINPRODUCTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent MAINPRODUCTIONRowChanged(Me, New MAINPRODUCTIONRowChangeEvent(CType(e.Row,MAINPRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINPRODUCTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent MAINPRODUCTIONRowChanging(Me, New MAINPRODUCTIONRowChangeEvent(CType(e.Row,MAINPRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINPRODUCTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINPRODUCTIONRowDeleted(Me, New MAINPRODUCTIONRowChangeEvent(CType(e.Row,MAINPRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINPRODUCTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINPRODUCTIONRowDeleting(Me, New MAINPRODUCTIONRowChangeEvent(CType(e.Row,MAINPRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINPRODUCTIONRow(ByVal row As MAINPRODUCTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINPRODUCTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINRECIPELINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnRECIPE_BATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnRECIPE_BATCH_MAXNUM As Global.System.Data.DataColumn
        
        Private columnRECIPE_STATUS As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_CALCSETP As Global.System.Data.DataColumn
        
        Private columnRECIPE_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnRECIPE_UNIT As Global.System.Data.DataColumn
        
        Private columnRECIPE_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnRECIPE_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnRECIPE_PRIORITY As Global.System.Data.DataColumn
        
        Private columnRECIPE_DONE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINRECIPELINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_BATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_BATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_BATCH_MAXNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_BATCH_MAXNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CALCSETPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CALCSETP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_PRIORITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_PRIORITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_DONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_DONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINRECIPELINERow
            Get
                Return CType(Me.Rows(index),MAINRECIPELINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPELINERowChanging As MAINRECIPELINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPELINERowChanged As MAINRECIPELINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPELINERowDeleting As MAINRECIPELINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPELINERowDeleted As MAINRECIPELINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINRECIPELINERow(ByVal row As MAINRECIPELINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINRECIPELINERow(ByVal MAINPROD_NUMBER As Integer, ByVal PRODLINE_IDENT As String, ByVal MAINBATCH_NUMBER As Short, ByVal RECIPE_BATCH_NUMBER As String, ByVal RECIPE_BATCH_MAXNUM As Short, ByVal RECIPE_STATUS As Short, ByVal RECIPE_IDENT As String, ByVal RECIPE_CALCSETP As Double, ByVal RECIPE_ACTVALUE As Double, ByVal RECIPE_UNIT As String, ByVal RECIPE_DECIMALPOINT As Short, ByVal RECIPE_MAXRESOLU_DP As Short, ByVal RECIPE_PRIORITY As Short, ByVal RECIPE_DONE As Boolean) As MAINRECIPELINERow
            Dim rowMAINRECIPELINERow As MAINRECIPELINERow = CType(Me.NewRow,MAINRECIPELINERow)
            Dim columnValuesArray() As Object = New Object() {MAINPROD_NUMBER, PRODLINE_IDENT, MAINBATCH_NUMBER, RECIPE_BATCH_NUMBER, RECIPE_BATCH_MAXNUM, RECIPE_STATUS, RECIPE_IDENT, RECIPE_CALCSETP, RECIPE_ACTVALUE, RECIPE_UNIT, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_PRIORITY, RECIPE_DONE}
            rowMAINRECIPELINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINRECIPELINERow)
            Return rowMAINRECIPELINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINPROD_NUMBERPRODLINE_IDENTMAINBATCH_NUMBER(ByVal MAINPROD_NUMBER As Integer, ByVal PRODLINE_IDENT As String, ByVal MAINBATCH_NUMBER As Short) As MAINRECIPELINERow
            Return CType(Me.Rows.Find(New Object() {MAINPROD_NUMBER, PRODLINE_IDENT, MAINBATCH_NUMBER}),MAINRECIPELINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINRECIPELINEDataTable = CType(MyBase.Clone,MAINRECIPELINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINRECIPELINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINPROD_NUMBER = MyBase.Columns("MAINPROD_NUMBER")
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnMAINBATCH_NUMBER = MyBase.Columns("MAINBATCH_NUMBER")
            Me.columnRECIPE_BATCH_NUMBER = MyBase.Columns("RECIPE_BATCH_NUMBER")
            Me.columnRECIPE_BATCH_MAXNUM = MyBase.Columns("RECIPE_BATCH_MAXNUM")
            Me.columnRECIPE_STATUS = MyBase.Columns("RECIPE_STATUS")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_CALCSETP = MyBase.Columns("RECIPE_CALCSETP")
            Me.columnRECIPE_ACTVALUE = MyBase.Columns("RECIPE_ACTVALUE")
            Me.columnRECIPE_UNIT = MyBase.Columns("RECIPE_UNIT")
            Me.columnRECIPE_DECIMALPOINT = MyBase.Columns("RECIPE_DECIMALPOINT")
            Me.columnRECIPE_MAXRESOLU_DP = MyBase.Columns("RECIPE_MAXRESOLU_DP")
            Me.columnRECIPE_PRIORITY = MyBase.Columns("RECIPE_PRIORITY")
            Me.columnRECIPE_DONE = MyBase.Columns("RECIPE_DONE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINPROD_NUMBER = New Global.System.Data.DataColumn("MAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPROD_NUMBER)
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnMAINBATCH_NUMBER = New Global.System.Data.DataColumn("MAINBATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINBATCH_NUMBER)
            Me.columnRECIPE_BATCH_NUMBER = New Global.System.Data.DataColumn("RECIPE_BATCH_NUMBER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_BATCH_NUMBER)
            Me.columnRECIPE_BATCH_MAXNUM = New Global.System.Data.DataColumn("RECIPE_BATCH_MAXNUM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_BATCH_MAXNUM)
            Me.columnRECIPE_STATUS = New Global.System.Data.DataColumn("RECIPE_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_STATUS)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_CALCSETP = New Global.System.Data.DataColumn("RECIPE_CALCSETP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CALCSETP)
            Me.columnRECIPE_ACTVALUE = New Global.System.Data.DataColumn("RECIPE_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_ACTVALUE)
            Me.columnRECIPE_UNIT = New Global.System.Data.DataColumn("RECIPE_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_UNIT)
            Me.columnRECIPE_DECIMALPOINT = New Global.System.Data.DataColumn("RECIPE_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_DECIMALPOINT)
            Me.columnRECIPE_MAXRESOLU_DP = New Global.System.Data.DataColumn("RECIPE_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_MAXRESOLU_DP)
            Me.columnRECIPE_PRIORITY = New Global.System.Data.DataColumn("RECIPE_PRIORITY", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_PRIORITY)
            Me.columnRECIPE_DONE = New Global.System.Data.DataColumn("RECIPE_DONE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_DONE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINPROD_NUMBER, Me.columnPRODLINE_IDENT, Me.columnMAINBATCH_NUMBER}, true))
            Me.columnMAINPROD_NUMBER.AllowDBNull = false
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnMAINBATCH_NUMBER.AllowDBNull = false
            Me.columnRECIPE_BATCH_NUMBER.MaxLength = 50
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_UNIT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINRECIPELINERow() As MAINRECIPELINERow
            Return CType(Me.NewRow,MAINRECIPELINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINRECIPELINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINRECIPELINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINRECIPELINERowChangedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPELINERowChanged(Me, New MAINRECIPELINERowChangeEvent(CType(e.Row,MAINRECIPELINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINRECIPELINERowChangingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPELINERowChanging(Me, New MAINRECIPELINERowChangeEvent(CType(e.Row,MAINRECIPELINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINRECIPELINERowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPELINERowDeleted(Me, New MAINRECIPELINERowChangeEvent(CType(e.Row,MAINRECIPELINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINRECIPELINERowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPELINERowDeleting(Me, New MAINRECIPELINERowChangeEvent(CType(e.Row,MAINRECIPELINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINRECIPELINERow(ByVal row As MAINRECIPELINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINRECIPELINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROD_QUEUEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnSTART_DATETIME As Global.System.Data.DataColumn
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_LINE As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_CYCLE As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnPROD_PCAUTOSTART As Global.System.Data.DataColumn
        
        Private columnPROD_USER As Global.System.Data.DataColumn
        
        Private columnREPMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnREPMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROD_QUEUE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property START_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_PCAUTOSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_PCAUTOSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPMAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPMAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROD_QUEUERow
            Get
                Return CType(Me.Rows(index),PROD_QUEUERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROD_QUEUERowChanging As PROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROD_QUEUERowChanged As PROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROD_QUEUERowDeleting As PROD_QUEUERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROD_QUEUERowDeleted As PROD_QUEUERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROD_QUEUERow(ByVal row As PROD_QUEUERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROD_QUEUERow( _
                    ByVal START_DATETIME As Date,  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Integer,  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal REPMAINPROD_NUMBER As Integer,  _
                    ByVal REPMAINBATCH_NUMBER As Integer,  _
                    ByVal MAINPROD_NUMBER As Integer,  _
                    ByVal MAINBATCH_NUMBER As Short) As PROD_QUEUERow
            Dim rowPROD_QUEUERow As PROD_QUEUERow = CType(Me.NewRow,PROD_QUEUERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, START_DATETIME, PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE, RECIPE_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_CYCLE, PROD_SETPOINT, PROD_UNIT, PROD_PCAUTOSTART, PROD_USER, REPMAINPROD_NUMBER, REPMAINBATCH_NUMBER, MAINPROD_NUMBER, MAINBATCH_NUMBER}
            rowPROD_QUEUERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROD_QUEUERow)
            Return rowPROD_QUEUERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROD_NUMBERSTART_DATETIME(ByVal PROD_NUMBER As Integer, ByVal START_DATETIME As Date) As PROD_QUEUERow
            Return CType(Me.Rows.Find(New Object() {PROD_NUMBER, START_DATETIME}),PROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROD_QUEUEDataTable = CType(MyBase.Clone,PROD_QUEUEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROD_QUEUEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROD_NUMBER = MyBase.Columns("PROD_NUMBER")
            Me.columnSTART_DATETIME = MyBase.Columns("START_DATETIME")
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnPLAN_IDENT = MyBase.Columns("PLAN_IDENT")
            Me.columnPLAN_LINE = MyBase.Columns("PLAN_LINE")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_CYCLE = MyBase.Columns("PROD_CYCLE")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnPROD_PCAUTOSTART = MyBase.Columns("PROD_PCAUTOSTART")
            Me.columnPROD_USER = MyBase.Columns("PROD_USER")
            Me.columnREPMAINPROD_NUMBER = MyBase.Columns("REPMAINPROD_NUMBER")
            Me.columnREPMAINBATCH_NUMBER = MyBase.Columns("REPMAINBATCH_NUMBER")
            Me.columnMAINPROD_NUMBER = MyBase.Columns("MAINPROD_NUMBER")
            Me.columnMAINBATCH_NUMBER = MyBase.Columns("MAINBATCH_NUMBER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROD_NUMBER = New Global.System.Data.DataColumn("PROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUMBER)
            Me.columnSTART_DATETIME = New Global.System.Data.DataColumn("START_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_DATETIME)
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnPLAN_IDENT = New Global.System.Data.DataColumn("PLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_IDENT)
            Me.columnPLAN_LINE = New Global.System.Data.DataColumn("PLAN_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_LINE)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_CYCLE = New Global.System.Data.DataColumn("PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_CYCLE)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnPROD_PCAUTOSTART = New Global.System.Data.DataColumn("PROD_PCAUTOSTART", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_PCAUTOSTART)
            Me.columnPROD_USER = New Global.System.Data.DataColumn("PROD_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_USER)
            Me.columnREPMAINPROD_NUMBER = New Global.System.Data.DataColumn("REPMAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPMAINPROD_NUMBER)
            Me.columnREPMAINBATCH_NUMBER = New Global.System.Data.DataColumn("REPMAINBATCH_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPMAINBATCH_NUMBER)
            Me.columnMAINPROD_NUMBER = New Global.System.Data.DataColumn("MAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPROD_NUMBER)
            Me.columnMAINBATCH_NUMBER = New Global.System.Data.DataColumn("MAINBATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINBATCH_NUMBER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROD_NUMBER, Me.columnSTART_DATETIME}, true))
            Me.columnPROD_NUMBER.AutoIncrement = true
            Me.columnPROD_NUMBER.AutoIncrementSeed = -1
            Me.columnPROD_NUMBER.AutoIncrementStep = -1
            Me.columnPROD_NUMBER.AllowDBNull = false
            Me.columnSTART_DATETIME.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnPLAN_IDENT.MaxLength = 20
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
            Me.columnPROD_USER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROD_QUEUERow() As PROD_QUEUERow
            Return CType(Me.NewRow,PROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROD_QUEUERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROD_QUEUERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROD_QUEUERowChangedEvent) Is Nothing) Then
                RaiseEvent PROD_QUEUERowChanged(Me, New PROD_QUEUERowChangeEvent(CType(e.Row,PROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROD_QUEUERowChangingEvent) Is Nothing) Then
                RaiseEvent PROD_QUEUERowChanging(Me, New PROD_QUEUERowChangeEvent(CType(e.Row,PROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROD_QUEUERowDeletedEvent) Is Nothing) Then
                RaiseEvent PROD_QUEUERowDeleted(Me, New PROD_QUEUERowChangeEvent(CType(e.Row,PROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROD_QUEUERowDeletingEvent) Is Nothing) Then
                RaiseEvent PROD_QUEUERowDeleting(Me, New PROD_QUEUERowChangeEvent(CType(e.Row,PROD_QUEUERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROD_QUEUERow(ByVal row As PROD_QUEUERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROD_QUEUEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTIONDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_STATUS As Global.System.Data.DataColumn
        
        Private columnPROD_PREV_STATUS As Global.System.Data.DataColumn
        
        Private columnSEQUENCE_NUMBER As Global.System.Data.DataColumn
        
        Private columnREPPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnREPBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_NAME As Global.System.Data.DataColumn
        
        Private columnPLAN_LINE As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_NAME As Global.System.Data.DataColumn
        
        Private columnRECIPE_TOTAL As Global.System.Data.DataColumn
        
        Private columnRECIPE_REFWEIGHT As Global.System.Data.DataColumn
        
        Private columnRECIPE_CREATE_DATE As Global.System.Data.DataColumn
        
        Private columnRECIPE_CHANGE_DATE As Global.System.Data.DataColumn
        
        Private columnRECIPE_USER As Global.System.Data.DataColumn
        
        Private columnRECIPE_CHECK As Global.System.Data.DataColumn
        
        Private columnRECIPE_TIMEOUT As Global.System.Data.DataColumn
        
        Private columnRECIPE_TIMEOUT_ENABLED As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_START_DATE As Global.System.Data.DataColumn
        
        Private columnPROD_END_DATE As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnPROD_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnPROD_PCAUTOSTART As Global.System.Data.DataColumn
        
        Private columnPROD_USER As Global.System.Data.DataColumn
        
        Private columnBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnBATCH_MAXNUM As Global.System.Data.DataColumn
        
        Private columnBATCH_REPEAT As Global.System.Data.DataColumn
        
        Private columnPROD_ABORT As Global.System.Data.DataColumn
        
        Private columnCORR_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINPROD_NUMBER As Global.System.Data.DataColumn
        
        Private columnMAINBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_PREV_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_PREV_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQUENCE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQUENCE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_REFWEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_REFWEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CHANGE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CHANGE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CHECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CHECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TIMEOUT_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TIMEOUT_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_START_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_START_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_END_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_END_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_PCAUTOSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_PCAUTOSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_MAXNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_MAXNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_REPEATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_REPEAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_ABORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_ABORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CORR_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORR_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINPROD_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINPROD_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINBATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTIONRow
            Get
                Return CType(Me.Rows(index),PRODUCTIONRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONRowChanging As PRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONRowChanged As PRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONRowDeleting As PRODUCTIONRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONRowDeleted As PRODUCTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPRODUCTIONRow(ByVal row As PRODUCTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPRODUCTIONRow( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PROD_STATUS As Short,  _
                    ByVal PROD_PREV_STATUS As Short,  _
                    ByVal SEQUENCE_NUMBER As Integer,  _
                    ByVal REPPROD_NUMBER As Integer,  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_NAME As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_CREATE_DATE As Date,  _
                    ByVal RECIPE_CHANGE_DATE As Date,  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Date,  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Integer,  _
                    ByVal PROD_START_DATE As Date,  _
                    ByVal PROD_END_DATE As Date,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_ACTVALUE As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Short,  _
                    ByVal PROD_MAXRESOLU_DP As Short,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal BATCH_NUMBER As Short,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal BATCH_REPEAT As Boolean,  _
                    ByVal PROD_ABORT As Boolean,  _
                    ByVal CORR_NUMBER As Short,  _
                    ByVal MAINPROD_NUMBER As Integer,  _
                    ByVal MAINBATCH_NUMBER As Short,  _
                    ByVal SCRIPT_DIT As String) As PRODUCTIONRow
            Dim rowPRODUCTIONRow As PRODUCTIONRow = CType(Me.NewRow,PRODUCTIONRow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, PROD_STATUS, PROD_PREV_STATUS, SEQUENCE_NUMBER, REPPROD_NUMBER, REPBATCH_NUMBER, PLAN_IDENT, PLAN_NAME, PLAN_LINE, RECIPE_IDENT, RECIPE_NAME, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_CREATE_DATE, RECIPE_CHANGE_DATE, RECIPE_USER, RECIPE_CHECK, RECIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_START_DATE, PROD_END_DATE, PROD_SETPOINT, PROD_ACTVALUE, PROD_UNIT, PROD_DECIMALPOINT, PROD_MAXRESOLU_DP, PROD_PCAUTOSTART, PROD_USER, BATCH_NUMBER, BATCH_MAXNUM, BATCH_REPEAT, PROD_ABORT, CORR_NUMBER, MAINPROD_NUMBER, MAINBATCH_NUMBER, SCRIPT_DIT}
            rowPRODUCTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTIONRow)
            Return rowPRODUCTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENT(ByVal PRODLINE_IDENT As String) As PRODUCTIONRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT}),PRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTIONDataTable = CType(MyBase.Clone,PRODUCTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTIONDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnPROD_STATUS = MyBase.Columns("PROD_STATUS")
            Me.columnPROD_PREV_STATUS = MyBase.Columns("PROD_PREV_STATUS")
            Me.columnSEQUENCE_NUMBER = MyBase.Columns("SEQUENCE_NUMBER")
            Me.columnREPPROD_NUMBER = MyBase.Columns("REPPROD_NUMBER")
            Me.columnREPBATCH_NUMBER = MyBase.Columns("REPBATCH_NUMBER")
            Me.columnPLAN_IDENT = MyBase.Columns("PLAN_IDENT")
            Me.columnPLAN_NAME = MyBase.Columns("PLAN_NAME")
            Me.columnPLAN_LINE = MyBase.Columns("PLAN_LINE")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_NAME = MyBase.Columns("RECIPE_NAME")
            Me.columnRECIPE_TOTAL = MyBase.Columns("RECIPE_TOTAL")
            Me.columnRECIPE_REFWEIGHT = MyBase.Columns("RECIPE_REFWEIGHT")
            Me.columnRECIPE_CREATE_DATE = MyBase.Columns("RECIPE_CREATE_DATE")
            Me.columnRECIPE_CHANGE_DATE = MyBase.Columns("RECIPE_CHANGE_DATE")
            Me.columnRECIPE_USER = MyBase.Columns("RECIPE_USER")
            Me.columnRECIPE_CHECK = MyBase.Columns("RECIPE_CHECK")
            Me.columnRECIPE_TIMEOUT = MyBase.Columns("RECIPE_TIMEOUT")
            Me.columnRECIPE_TIMEOUT_ENABLED = MyBase.Columns("RECIPE_TIMEOUT_ENABLED")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_START_DATE = MyBase.Columns("PROD_START_DATE")
            Me.columnPROD_END_DATE = MyBase.Columns("PROD_END_DATE")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_ACTVALUE = MyBase.Columns("PROD_ACTVALUE")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnPROD_DECIMALPOINT = MyBase.Columns("PROD_DECIMALPOINT")
            Me.columnPROD_MAXRESOLU_DP = MyBase.Columns("PROD_MAXRESOLU_DP")
            Me.columnPROD_PCAUTOSTART = MyBase.Columns("PROD_PCAUTOSTART")
            Me.columnPROD_USER = MyBase.Columns("PROD_USER")
            Me.columnBATCH_NUMBER = MyBase.Columns("BATCH_NUMBER")
            Me.columnBATCH_MAXNUM = MyBase.Columns("BATCH_MAXNUM")
            Me.columnBATCH_REPEAT = MyBase.Columns("BATCH_REPEAT")
            Me.columnPROD_ABORT = MyBase.Columns("PROD_ABORT")
            Me.columnCORR_NUMBER = MyBase.Columns("CORR_NUMBER")
            Me.columnMAINPROD_NUMBER = MyBase.Columns("MAINPROD_NUMBER")
            Me.columnMAINBATCH_NUMBER = MyBase.Columns("MAINBATCH_NUMBER")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnPROD_STATUS = New Global.System.Data.DataColumn("PROD_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_STATUS)
            Me.columnPROD_PREV_STATUS = New Global.System.Data.DataColumn("PROD_PREV_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_PREV_STATUS)
            Me.columnSEQUENCE_NUMBER = New Global.System.Data.DataColumn("SEQUENCE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQUENCE_NUMBER)
            Me.columnREPPROD_NUMBER = New Global.System.Data.DataColumn("REPPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPPROD_NUMBER)
            Me.columnREPBATCH_NUMBER = New Global.System.Data.DataColumn("REPBATCH_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPBATCH_NUMBER)
            Me.columnPLAN_IDENT = New Global.System.Data.DataColumn("PLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_IDENT)
            Me.columnPLAN_NAME = New Global.System.Data.DataColumn("PLAN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_NAME)
            Me.columnPLAN_LINE = New Global.System.Data.DataColumn("PLAN_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_LINE)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_NAME = New Global.System.Data.DataColumn("RECIPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_NAME)
            Me.columnRECIPE_TOTAL = New Global.System.Data.DataColumn("RECIPE_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TOTAL)
            Me.columnRECIPE_REFWEIGHT = New Global.System.Data.DataColumn("RECIPE_REFWEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_REFWEIGHT)
            Me.columnRECIPE_CREATE_DATE = New Global.System.Data.DataColumn("RECIPE_CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CREATE_DATE)
            Me.columnRECIPE_CHANGE_DATE = New Global.System.Data.DataColumn("RECIPE_CHANGE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CHANGE_DATE)
            Me.columnRECIPE_USER = New Global.System.Data.DataColumn("RECIPE_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_USER)
            Me.columnRECIPE_CHECK = New Global.System.Data.DataColumn("RECIPE_CHECK", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CHECK)
            Me.columnRECIPE_TIMEOUT = New Global.System.Data.DataColumn("RECIPE_TIMEOUT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TIMEOUT)
            Me.columnRECIPE_TIMEOUT_ENABLED = New Global.System.Data.DataColumn("RECIPE_TIMEOUT_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TIMEOUT_ENABLED)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_START_DATE = New Global.System.Data.DataColumn("PROD_START_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_START_DATE)
            Me.columnPROD_END_DATE = New Global.System.Data.DataColumn("PROD_END_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_END_DATE)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_ACTVALUE = New Global.System.Data.DataColumn("PROD_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_ACTVALUE)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnPROD_DECIMALPOINT = New Global.System.Data.DataColumn("PROD_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_DECIMALPOINT)
            Me.columnPROD_MAXRESOLU_DP = New Global.System.Data.DataColumn("PROD_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_MAXRESOLU_DP)
            Me.columnPROD_PCAUTOSTART = New Global.System.Data.DataColumn("PROD_PCAUTOSTART", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_PCAUTOSTART)
            Me.columnPROD_USER = New Global.System.Data.DataColumn("PROD_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_USER)
            Me.columnBATCH_NUMBER = New Global.System.Data.DataColumn("BATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NUMBER)
            Me.columnBATCH_MAXNUM = New Global.System.Data.DataColumn("BATCH_MAXNUM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_MAXNUM)
            Me.columnBATCH_REPEAT = New Global.System.Data.DataColumn("BATCH_REPEAT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_REPEAT)
            Me.columnPROD_ABORT = New Global.System.Data.DataColumn("PROD_ABORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_ABORT)
            Me.columnCORR_NUMBER = New Global.System.Data.DataColumn("CORR_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORR_NUMBER)
            Me.columnMAINPROD_NUMBER = New Global.System.Data.DataColumn("MAINPROD_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINPROD_NUMBER)
            Me.columnMAINBATCH_NUMBER = New Global.System.Data.DataColumn("MAINBATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINBATCH_NUMBER)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.Unique = true
            Me.columnPRODLINE_IDENT.MaxLength = 21
            Me.columnPLAN_IDENT.MaxLength = 20
            Me.columnPLAN_NAME.MaxLength = 30
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_NAME.MaxLength = 30
            Me.columnRECIPE_USER.MaxLength = 20
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
            Me.columnPROD_USER.MaxLength = 20
            Me.columnSCRIPT_DIT.MaxLength = 536870910
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPRODUCTIONRow() As PRODUCTIONRow
            Return CType(Me.NewRow,PRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONRowChanged(Me, New PRODUCTIONRowChangeEvent(CType(e.Row,PRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONRowChanging(Me, New PRODUCTIONRowChangeEvent(CType(e.Row,PRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONRowDeleted(Me, New PRODUCTIONRowChangeEvent(CType(e.Row,PRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONRowDeleting(Me, New PRODUCTIONRowChangeEvent(CType(e.Row,PRODUCTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePRODUCTIONRow(ByVal row As PRODUCTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RECIPEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_LINE As Global.System.Data.DataColumn
        
        Private columnBATCH_NUMBER As Global.System.Data.DataColumn
        
        Private columnRECIPE_LINE_STATUS As Global.System.Data.DataColumn
        
        Private columnRECIPE_LINE_PARA As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_NAME As Global.System.Data.DataColumn
        
        Private columnMAT_PARA As Global.System.Data.DataColumn
        
        Private columnMAT_SETPOINT As Global.System.Data.DataColumn
        
        Private columnMAT_CALCSETP As Global.System.Data.DataColumn
        
        Private columnMAT_ACTVALUE As Global.System.Data.DataColumn
        
        Private columnMAT_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnBREAKPOINT As Global.System.Data.DataColumn
        
        Private columnMAT_CALCULATE_SETPOINT As Global.System.Data.DataColumn
        
        Private columnWP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnWP_IDENT As Global.System.Data.DataColumn
        
        Private columnWP_NAME As Global.System.Data.DataColumn
        
        Private columnMAT_BATCH_MODE As Global.System.Data.DataColumn
        
        Private columnMAT_SPM_INADR As Global.System.Data.DataColumn
        
        Private columnMAT_SPM_OUTADR As Global.System.Data.DataColumn
        
        Private columnMAT_ADD_TO_TOTAL As Global.System.Data.DataColumn
        
        Private columnMAT_BATCH_REPORT As Global.System.Data.DataColumn
        
        Private columnMAT_PROD_REPORT As Global.System.Data.DataColumn
        
        Private columnMAT_PRESET As Global.System.Data.DataColumn
        
        Private columnMAT_DISCHARGETIME As Global.System.Data.DataColumn
        
        Private columnMAT_OVERSHOOT As Global.System.Data.DataColumn
        
        Private columnMAT_FLOWRATE As Global.System.Data.DataColumn
        
        Private columnMAT_POS_TOL As Global.System.Data.DataColumn
        
        Private columnMAT_NEG_TOL As Global.System.Data.DataColumn
        
        Private columnMAT_CALMINGTIME As Global.System.Data.DataColumn
        
        Private columnMAT_RESTART_MODE As Global.System.Data.DataColumn
        
        Private columnMAT_A1_MAX As Global.System.Data.DataColumn
        
        Private columnMAT_A1_MIN As Global.System.Data.DataColumn
        
        Private columnMAT_A1_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_ABORT As Global.System.Data.DataColumn
        
        Private columnMAT_TIMEOUT As Global.System.Data.DataColumn
        
        Private columnMAT_TOLERANCE_ALARM As Global.System.Data.DataColumn
        
        Private columnMAT_ADC_ERROR As Global.System.Data.DataColumn
        
        Private columnMAT_SKIP As Global.System.Data.DataColumn
        
        Private columnMAT_FLOW_ALARM As Global.System.Data.DataColumn
        
        Private columnMAT_POS_TOL_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_NEG_TOL_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_ORDER As Global.System.Data.DataColumn
        
        Private columnMAT_DELIVERY As Global.System.Data.DataColumn
        
        Private columnMAT_LOT As Global.System.Data.DataColumn
        
        Private columnMAT_DATETIME As Global.System.Data.DataColumn
        
        Private columnSUBREC_STARTED As Global.System.Data.DataColumn
        
        Private columnMAT_REPORT_READY As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        Private columnSCRIPT_CIC As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_COD_SRC As Global.System.Data.DataColumn
        
        Private columnLABEL_PRINT As Global.System.Data.DataColumn
        
        Private columnLABEL_COPIES As Global.System.Data.DataColumn
        
        Private columnLABEL_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RECIPE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_LINE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_LINE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_LINE_PARAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_LINE_PARA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PARAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PARA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_CALCSETPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_CALCSETP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ACTVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ACTVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BREAKPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBREAKPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_CALCULATE_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_CALCULATE_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_BATCH_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_BATCH_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SPM_INADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SPM_INADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SPM_OUTADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SPM_OUTADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ADD_TO_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ADD_TO_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_BATCH_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_BATCH_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PROD_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PROD_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PRESETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PRESET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DISCHARGETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DISCHARGETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_OVERSHOOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_OVERSHOOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_FLOWRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_FLOWRATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_POS_TOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_POS_TOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NEG_TOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NEG_TOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_CALMINGTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_CALMINGTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_RESTART_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_RESTART_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ABORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ABORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_TIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_TOLERANCE_ALARMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_TOLERANCE_ALARM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ADC_ERRORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ADC_ERROR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SKIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SKIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_FLOW_ALARMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_FLOW_ALARM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_POS_TOL_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_POS_TOL_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NEG_TOL_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NEG_TOL_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DELIVERYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DELIVERY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_LOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_LOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUBREC_STARTEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUBREC_STARTED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_REPORT_READYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_REPORT_READY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_CICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_CIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_COD_SRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_COD_SRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_PRINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_PRINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_COPIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_COPIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RECIPERow
            Get
                Return CType(Me.Rows(index),RECIPERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPERowChanging As RECIPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPERowChanged As RECIPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPERowDeleting As RECIPERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPERowDeleted As RECIPERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRECIPERow(ByVal row As RECIPERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRECIPERow( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_LINE As Short,  _
                    ByVal BATCH_NUMBER As Short,  _
                    ByVal RECIPE_LINE_STATUS As Short,  _
                    ByVal RECIPE_LINE_PARA As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_SETPOINT As Double,  _
                    ByVal MAT_CALCSETP As Double,  _
                    ByVal MAT_ACTVALUE As Double,  _
                    ByVal MAT_UNIT As String,  _
                    ByVal MAT_DECIMALPOINT As Short,  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_PRESET As Single,  _
                    ByVal MAT_DISCHARGETIME As Short,  _
                    ByVal MAT_OVERSHOOT As Double,  _
                    ByVal MAT_FLOWRATE As Double,  _
                    ByVal MAT_POS_TOL As Double,  _
                    ByVal MAT_NEG_TOL As Double,  _
                    ByVal MAT_CALMINGTIME As Short,  _
                    ByVal MAT_RESTART_MODE As Short,  _
                    ByVal MAT_A1_MAX As Double,  _
                    ByVal MAT_A1_MIN As Double,  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_ABORT As Boolean,  _
                    ByVal MAT_TIMEOUT As Boolean,  _
                    ByVal MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal MAT_ADC_ERROR As Boolean,  _
                    ByVal MAT_SKIP As Boolean,  _
                    ByVal MAT_FLOW_ALARM As Boolean,  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Date,  _
                    ByVal SUBREC_STARTED As Boolean,  _
                    ByVal MAT_REPORT_READY As Boolean,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Short,  _
                    ByVal LABEL_NAME As String) As RECIPERow
            Dim rowRECIPERow As RECIPERow = CType(Me.NewRow,RECIPERow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE, BATCH_NUMBER, RECIPE_LINE_STATUS, RECIPE_LINE_PARA, MAT_IDENT, MAT_NAME, MAT_PARA, MAT_SETPOINT, MAT_CALCSETP, MAT_ACTVALUE, MAT_UNIT, MAT_DECIMALPOINT, BREAKPOINT, MAT_CALCULATE_SETPOINT, WP_ADDRESS, WP_IDENT, WP_NAME, MAT_BATCH_MODE, MAT_SPM_INADR, MAT_SPM_OUTADR, MAT_ADD_TO_TOTAL, MAT_BATCH_REPORT, MAT_PROD_REPORT, MAT_PRESET, MAT_DISCHARGETIME, MAT_OVERSHOOT, MAT_FLOWRATE, MAT_POS_TOL, MAT_NEG_TOL, MAT_CALMINGTIME, MAT_RESTART_MODE, MAT_A1_MAX, MAT_A1_MIN, MAT_A1_UNIT, MAT_ABORT, MAT_TIMEOUT, MAT_TOLERANCE_ALARM, MAT_ADC_ERROR, MAT_SKIP, MAT_FLOW_ALARM, MAT_POS_TOL_UNIT, MAT_NEG_TOL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SUBREC_STARTED, MAT_REPORT_READY, SCRIPT_DIT, SCRIPT_CIC, SCRIPT_VAR_COD_SRC, LABEL_PRINT, LABEL_COPIES, LABEL_NAME}
            rowRECIPERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRECIPERow)
            Return rowRECIPERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTRECIPE_IDENTRECIPE_LINEBATCH_NUMBER(ByVal PRODLINE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_LINE As Short, ByVal BATCH_NUMBER As Short) As RECIPERow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE, BATCH_NUMBER}),RECIPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RECIPEDataTable = CType(MyBase.Clone,RECIPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RECIPEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_LINE = MyBase.Columns("RECIPE_LINE")
            Me.columnBATCH_NUMBER = MyBase.Columns("BATCH_NUMBER")
            Me.columnRECIPE_LINE_STATUS = MyBase.Columns("RECIPE_LINE_STATUS")
            Me.columnRECIPE_LINE_PARA = MyBase.Columns("RECIPE_LINE_PARA")
            Me.columnMAT_IDENT = MyBase.Columns("MAT_IDENT")
            Me.columnMAT_NAME = MyBase.Columns("MAT_NAME")
            Me.columnMAT_PARA = MyBase.Columns("MAT_PARA")
            Me.columnMAT_SETPOINT = MyBase.Columns("MAT_SETPOINT")
            Me.columnMAT_CALCSETP = MyBase.Columns("MAT_CALCSETP")
            Me.columnMAT_ACTVALUE = MyBase.Columns("MAT_ACTVALUE")
            Me.columnMAT_UNIT = MyBase.Columns("MAT_UNIT")
            Me.columnMAT_DECIMALPOINT = MyBase.Columns("MAT_DECIMALPOINT")
            Me.columnBREAKPOINT = MyBase.Columns("BREAKPOINT")
            Me.columnMAT_CALCULATE_SETPOINT = MyBase.Columns("MAT_CALCULATE_SETPOINT")
            Me.columnWP_ADDRESS = MyBase.Columns("WP_ADDRESS")
            Me.columnWP_IDENT = MyBase.Columns("WP_IDENT")
            Me.columnWP_NAME = MyBase.Columns("WP_NAME")
            Me.columnMAT_BATCH_MODE = MyBase.Columns("MAT_BATCH_MODE")
            Me.columnMAT_SPM_INADR = MyBase.Columns("MAT_SPM_INADR")
            Me.columnMAT_SPM_OUTADR = MyBase.Columns("MAT_SPM_OUTADR")
            Me.columnMAT_ADD_TO_TOTAL = MyBase.Columns("MAT_ADD_TO_TOTAL")
            Me.columnMAT_BATCH_REPORT = MyBase.Columns("MAT_BATCH_REPORT")
            Me.columnMAT_PROD_REPORT = MyBase.Columns("MAT_PROD_REPORT")
            Me.columnMAT_PRESET = MyBase.Columns("MAT_PRESET")
            Me.columnMAT_DISCHARGETIME = MyBase.Columns("MAT_DISCHARGETIME")
            Me.columnMAT_OVERSHOOT = MyBase.Columns("MAT_OVERSHOOT")
            Me.columnMAT_FLOWRATE = MyBase.Columns("MAT_FLOWRATE")
            Me.columnMAT_POS_TOL = MyBase.Columns("MAT_POS_TOL")
            Me.columnMAT_NEG_TOL = MyBase.Columns("MAT_NEG_TOL")
            Me.columnMAT_CALMINGTIME = MyBase.Columns("MAT_CALMINGTIME")
            Me.columnMAT_RESTART_MODE = MyBase.Columns("MAT_RESTART_MODE")
            Me.columnMAT_A1_MAX = MyBase.Columns("MAT_A1_MAX")
            Me.columnMAT_A1_MIN = MyBase.Columns("MAT_A1_MIN")
            Me.columnMAT_A1_UNIT = MyBase.Columns("MAT_A1_UNIT")
            Me.columnMAT_ABORT = MyBase.Columns("MAT_ABORT")
            Me.columnMAT_TIMEOUT = MyBase.Columns("MAT_TIMEOUT")
            Me.columnMAT_TOLERANCE_ALARM = MyBase.Columns("MAT_TOLERANCE_ALARM")
            Me.columnMAT_ADC_ERROR = MyBase.Columns("MAT_ADC_ERROR")
            Me.columnMAT_SKIP = MyBase.Columns("MAT_SKIP")
            Me.columnMAT_FLOW_ALARM = MyBase.Columns("MAT_FLOW_ALARM")
            Me.columnMAT_POS_TOL_UNIT = MyBase.Columns("MAT_POS_TOL_UNIT")
            Me.columnMAT_NEG_TOL_UNIT = MyBase.Columns("MAT_NEG_TOL_UNIT")
            Me.columnMAT_ORDER = MyBase.Columns("MAT_ORDER")
            Me.columnMAT_DELIVERY = MyBase.Columns("MAT_DELIVERY")
            Me.columnMAT_LOT = MyBase.Columns("MAT_LOT")
            Me.columnMAT_DATETIME = MyBase.Columns("MAT_DATETIME")
            Me.columnSUBREC_STARTED = MyBase.Columns("SUBREC_STARTED")
            Me.columnMAT_REPORT_READY = MyBase.Columns("MAT_REPORT_READY")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
            Me.columnSCRIPT_CIC = MyBase.Columns("SCRIPT_CIC")
            Me.columnSCRIPT_VAR_COD_SRC = MyBase.Columns("SCRIPT_VAR_COD_SRC")
            Me.columnLABEL_PRINT = MyBase.Columns("LABEL_PRINT")
            Me.columnLABEL_COPIES = MyBase.Columns("LABEL_COPIES")
            Me.columnLABEL_NAME = MyBase.Columns("LABEL_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_LINE = New Global.System.Data.DataColumn("RECIPE_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_LINE)
            Me.columnBATCH_NUMBER = New Global.System.Data.DataColumn("BATCH_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_NUMBER)
            Me.columnRECIPE_LINE_STATUS = New Global.System.Data.DataColumn("RECIPE_LINE_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_LINE_STATUS)
            Me.columnRECIPE_LINE_PARA = New Global.System.Data.DataColumn("RECIPE_LINE_PARA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_LINE_PARA)
            Me.columnMAT_IDENT = New Global.System.Data.DataColumn("MAT_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT)
            Me.columnMAT_NAME = New Global.System.Data.DataColumn("MAT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NAME)
            Me.columnMAT_PARA = New Global.System.Data.DataColumn("MAT_PARA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PARA)
            Me.columnMAT_SETPOINT = New Global.System.Data.DataColumn("MAT_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SETPOINT)
            Me.columnMAT_CALCSETP = New Global.System.Data.DataColumn("MAT_CALCSETP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_CALCSETP)
            Me.columnMAT_ACTVALUE = New Global.System.Data.DataColumn("MAT_ACTVALUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ACTVALUE)
            Me.columnMAT_UNIT = New Global.System.Data.DataColumn("MAT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_UNIT)
            Me.columnMAT_DECIMALPOINT = New Global.System.Data.DataColumn("MAT_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DECIMALPOINT)
            Me.columnBREAKPOINT = New Global.System.Data.DataColumn("BREAKPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBREAKPOINT)
            Me.columnMAT_CALCULATE_SETPOINT = New Global.System.Data.DataColumn("MAT_CALCULATE_SETPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_CALCULATE_SETPOINT)
            Me.columnWP_ADDRESS = New Global.System.Data.DataColumn("WP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_ADDRESS)
            Me.columnWP_IDENT = New Global.System.Data.DataColumn("WP_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_IDENT)
            Me.columnWP_NAME = New Global.System.Data.DataColumn("WP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_NAME)
            Me.columnMAT_BATCH_MODE = New Global.System.Data.DataColumn("MAT_BATCH_MODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_BATCH_MODE)
            Me.columnMAT_SPM_INADR = New Global.System.Data.DataColumn("MAT_SPM_INADR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SPM_INADR)
            Me.columnMAT_SPM_OUTADR = New Global.System.Data.DataColumn("MAT_SPM_OUTADR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SPM_OUTADR)
            Me.columnMAT_ADD_TO_TOTAL = New Global.System.Data.DataColumn("MAT_ADD_TO_TOTAL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ADD_TO_TOTAL)
            Me.columnMAT_BATCH_REPORT = New Global.System.Data.DataColumn("MAT_BATCH_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_BATCH_REPORT)
            Me.columnMAT_PROD_REPORT = New Global.System.Data.DataColumn("MAT_PROD_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PROD_REPORT)
            Me.columnMAT_PRESET = New Global.System.Data.DataColumn("MAT_PRESET", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PRESET)
            Me.columnMAT_DISCHARGETIME = New Global.System.Data.DataColumn("MAT_DISCHARGETIME", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DISCHARGETIME)
            Me.columnMAT_OVERSHOOT = New Global.System.Data.DataColumn("MAT_OVERSHOOT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_OVERSHOOT)
            Me.columnMAT_FLOWRATE = New Global.System.Data.DataColumn("MAT_FLOWRATE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_FLOWRATE)
            Me.columnMAT_POS_TOL = New Global.System.Data.DataColumn("MAT_POS_TOL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_POS_TOL)
            Me.columnMAT_NEG_TOL = New Global.System.Data.DataColumn("MAT_NEG_TOL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NEG_TOL)
            Me.columnMAT_CALMINGTIME = New Global.System.Data.DataColumn("MAT_CALMINGTIME", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_CALMINGTIME)
            Me.columnMAT_RESTART_MODE = New Global.System.Data.DataColumn("MAT_RESTART_MODE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_RESTART_MODE)
            Me.columnMAT_A1_MAX = New Global.System.Data.DataColumn("MAT_A1_MAX", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_MAX)
            Me.columnMAT_A1_MIN = New Global.System.Data.DataColumn("MAT_A1_MIN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_MIN)
            Me.columnMAT_A1_UNIT = New Global.System.Data.DataColumn("MAT_A1_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_UNIT)
            Me.columnMAT_ABORT = New Global.System.Data.DataColumn("MAT_ABORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ABORT)
            Me.columnMAT_TIMEOUT = New Global.System.Data.DataColumn("MAT_TIMEOUT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_TIMEOUT)
            Me.columnMAT_TOLERANCE_ALARM = New Global.System.Data.DataColumn("MAT_TOLERANCE_ALARM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_TOLERANCE_ALARM)
            Me.columnMAT_ADC_ERROR = New Global.System.Data.DataColumn("MAT_ADC_ERROR", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ADC_ERROR)
            Me.columnMAT_SKIP = New Global.System.Data.DataColumn("MAT_SKIP", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SKIP)
            Me.columnMAT_FLOW_ALARM = New Global.System.Data.DataColumn("MAT_FLOW_ALARM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_FLOW_ALARM)
            Me.columnMAT_POS_TOL_UNIT = New Global.System.Data.DataColumn("MAT_POS_TOL_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_POS_TOL_UNIT)
            Me.columnMAT_NEG_TOL_UNIT = New Global.System.Data.DataColumn("MAT_NEG_TOL_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NEG_TOL_UNIT)
            Me.columnMAT_ORDER = New Global.System.Data.DataColumn("MAT_ORDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ORDER)
            Me.columnMAT_DELIVERY = New Global.System.Data.DataColumn("MAT_DELIVERY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DELIVERY)
            Me.columnMAT_LOT = New Global.System.Data.DataColumn("MAT_LOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_LOT)
            Me.columnMAT_DATETIME = New Global.System.Data.DataColumn("MAT_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DATETIME)
            Me.columnSUBREC_STARTED = New Global.System.Data.DataColumn("SUBREC_STARTED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUBREC_STARTED)
            Me.columnMAT_REPORT_READY = New Global.System.Data.DataColumn("MAT_REPORT_READY", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_REPORT_READY)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me.columnSCRIPT_CIC = New Global.System.Data.DataColumn("SCRIPT_CIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_CIC)
            Me.columnSCRIPT_VAR_COD_SRC = New Global.System.Data.DataColumn("SCRIPT_VAR_COD_SRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_COD_SRC)
            Me.columnLABEL_PRINT = New Global.System.Data.DataColumn("LABEL_PRINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_PRINT)
            Me.columnLABEL_COPIES = New Global.System.Data.DataColumn("LABEL_COPIES", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_COPIES)
            Me.columnLABEL_NAME = New Global.System.Data.DataColumn("LABEL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnRECIPE_IDENT, Me.columnRECIPE_LINE, Me.columnBATCH_NUMBER}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnRECIPE_IDENT.AllowDBNull = false
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_LINE.AllowDBNull = false
            Me.columnBATCH_NUMBER.AllowDBNull = false
            Me.columnRECIPE_LINE_PARA.MaxLength = 255
            Me.columnMAT_IDENT.MaxLength = 20
            Me.columnMAT_NAME.MaxLength = 30
            Me.columnMAT_PARA.MaxLength = 255
            Me.columnMAT_UNIT.MaxLength = 10
            Me.columnWP_ADDRESS.MaxLength = 1
            Me.columnWP_IDENT.MaxLength = 20
            Me.columnWP_NAME.MaxLength = 30
            Me.columnMAT_BATCH_MODE.MaxLength = 20
            Me.columnMAT_A1_UNIT.MaxLength = 10
            Me.columnMAT_POS_TOL_UNIT.MaxLength = 4
            Me.columnMAT_NEG_TOL_UNIT.MaxLength = 4
            Me.columnMAT_ORDER.MaxLength = 30
            Me.columnMAT_DELIVERY.MaxLength = 30
            Me.columnMAT_LOT.MaxLength = 30
            Me.columnSCRIPT_DIT.MaxLength = 536870910
            Me.columnSCRIPT_CIC.MaxLength = 536870910
            Me.columnSCRIPT_VAR_COD_SRC.MaxLength = 536870910
            Me.columnLABEL_NAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRECIPERow() As RECIPERow
            Return CType(Me.NewRow,RECIPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RECIPERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RECIPERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RECIPERowChangedEvent) Is Nothing) Then
                RaiseEvent RECIPERowChanged(Me, New RECIPERowChangeEvent(CType(e.Row,RECIPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RECIPERowChangingEvent) Is Nothing) Then
                RaiseEvent RECIPERowChanging(Me, New RECIPERowChangeEvent(CType(e.Row,RECIPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RECIPERowDeletedEvent) Is Nothing) Then
                RaiseEvent RECIPERowDeleted(Me, New RECIPERowChangeEvent(CType(e.Row,RECIPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RECIPERowDeletingEvent) Is Nothing) Then
                RaiseEvent RECIPERowDeleting(Me, New RECIPERowChangeEvent(CType(e.Row,RECIPERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRECIPERow(ByVal row As RECIPERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RECIPEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TMP_WP_MESSAGEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnMESSAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TMP_WP_MESSAGE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MESSAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMESSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TMP_WP_MESSAGERow
            Get
                Return CType(Me.Rows(index),TMP_WP_MESSAGERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TMP_WP_MESSAGERowChanging As TMP_WP_MESSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TMP_WP_MESSAGERowChanged As TMP_WP_MESSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TMP_WP_MESSAGERowDeleting As TMP_WP_MESSAGERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TMP_WP_MESSAGERowDeleted As TMP_WP_MESSAGERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTMP_WP_MESSAGERow(ByVal row As TMP_WP_MESSAGERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTMP_WP_MESSAGERow(ByVal PRODLINE_IDENT As String, ByVal MESSAGE As String) As TMP_WP_MESSAGERow
            Dim rowTMP_WP_MESSAGERow As TMP_WP_MESSAGERow = CType(Me.NewRow,TMP_WP_MESSAGERow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, MESSAGE}
            rowTMP_WP_MESSAGERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTMP_WP_MESSAGERow)
            Return rowTMP_WP_MESSAGERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TMP_WP_MESSAGEDataTable = CType(MyBase.Clone,TMP_WP_MESSAGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TMP_WP_MESSAGEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnMESSAGE = MyBase.Columns("MESSAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnMESSAGE = New Global.System.Data.DataColumn("MESSAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMESSAGE)
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnMESSAGE.MaxLength = 536870910
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTMP_WP_MESSAGERow() As TMP_WP_MESSAGERow
            Return CType(Me.NewRow,TMP_WP_MESSAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TMP_WP_MESSAGERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TMP_WP_MESSAGERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TMP_WP_MESSAGERowChangedEvent) Is Nothing) Then
                RaiseEvent TMP_WP_MESSAGERowChanged(Me, New TMP_WP_MESSAGERowChangeEvent(CType(e.Row,TMP_WP_MESSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TMP_WP_MESSAGERowChangingEvent) Is Nothing) Then
                RaiseEvent TMP_WP_MESSAGERowChanging(Me, New TMP_WP_MESSAGERowChangeEvent(CType(e.Row,TMP_WP_MESSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TMP_WP_MESSAGERowDeletedEvent) Is Nothing) Then
                RaiseEvent TMP_WP_MESSAGERowDeleted(Me, New TMP_WP_MESSAGERowChangeEvent(CType(e.Row,TMP_WP_MESSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TMP_WP_MESSAGERowDeletingEvent) Is Nothing) Then
                RaiseEvent TMP_WP_MESSAGERowDeleting(Me, New TMP_WP_MESSAGERowChangeEvent(CType(e.Row,TMP_WP_MESSAGERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTMP_WP_MESSAGERow(ByVal row As TMP_WP_MESSAGERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TMP_WP_MESSAGEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class USERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUSER As Global.System.Data.DataColumn
        
        Private columnPASSWORD As Global.System.Data.DataColumn
        
        Private columnPRODUCTION As Global.System.Data.DataColumn
        
        Private columnRECIPE As Global.System.Data.DataColumn
        
        Private columnMATERIAL As Global.System.Data.DataColumn
        
        Private columnREPORT As Global.System.Data.DataColumn
        
        Private columnSYSTEM As Global.System.Data.DataColumn
        
        Private columnTIMEOUT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "USER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PASSWORDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPASSWORD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODUCTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODUCTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MATERIALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMATERIAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As USERRow
            Get
                Return CType(Me.Rows(index),USERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USERRowChanging As USERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USERRowChanged As USERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USERRowDeleting As USERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USERRowDeleted As USERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUSERRow(ByVal row As USERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUSERRow(ByVal USER As String, ByVal PASSWORD As String, ByVal PRODUCTION As Short, ByVal RECIPE As Short, ByVal MATERIAL As Short, ByVal REPORT As Short, ByVal SYSTEM As Short, ByVal TIMEOUT As Short) As USERRow
            Dim rowUSERRow As USERRow = CType(Me.NewRow,USERRow)
            Dim columnValuesArray() As Object = New Object() {USER, PASSWORD, PRODUCTION, RECIPE, MATERIAL, REPORT, SYSTEM, TIMEOUT}
            rowUSERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUSERRow)
            Return rowUSERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByUSER(ByVal USER As String) As USERRow
            Return CType(Me.Rows.Find(New Object() {USER}),USERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As USERDataTable = CType(MyBase.Clone,USERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New USERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnUSER = MyBase.Columns("USER")
            Me.columnPASSWORD = MyBase.Columns("PASSWORD")
            Me.columnPRODUCTION = MyBase.Columns("PRODUCTION")
            Me.columnRECIPE = MyBase.Columns("RECIPE")
            Me.columnMATERIAL = MyBase.Columns("MATERIAL")
            Me.columnREPORT = MyBase.Columns("REPORT")
            Me.columnSYSTEM = MyBase.Columns("SYSTEM")
            Me.columnTIMEOUT = MyBase.Columns("TIMEOUT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnUSER = New Global.System.Data.DataColumn("USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER)
            Me.columnPASSWORD = New Global.System.Data.DataColumn("PASSWORD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPASSWORD)
            Me.columnPRODUCTION = New Global.System.Data.DataColumn("PRODUCTION", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODUCTION)
            Me.columnRECIPE = New Global.System.Data.DataColumn("RECIPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE)
            Me.columnMATERIAL = New Global.System.Data.DataColumn("MATERIAL", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMATERIAL)
            Me.columnREPORT = New Global.System.Data.DataColumn("REPORT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREPORT)
            Me.columnSYSTEM = New Global.System.Data.DataColumn("SYSTEM", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEM)
            Me.columnTIMEOUT = New Global.System.Data.DataColumn("TIMEOUT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIMEOUT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUSER}, true))
            Me.columnUSER.AllowDBNull = false
            Me.columnUSER.Unique = true
            Me.columnUSER.MaxLength = 20
            Me.columnPASSWORD.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUSERRow() As USERRow
            Return CType(Me.NewRow,USERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New USERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(USERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.USERRowChangedEvent) Is Nothing) Then
                RaiseEvent USERRowChanged(Me, New USERRowChangeEvent(CType(e.Row,USERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.USERRowChangingEvent) Is Nothing) Then
                RaiseEvent USERRowChanging(Me, New USERRowChangeEvent(CType(e.Row,USERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.USERRowDeletedEvent) Is Nothing) Then
                RaiseEvent USERRowDeleted(Me, New USERRowChangeEvent(CType(e.Row,USERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.USERRowDeletingEvent) Is Nothing) Then
                RaiseEvent USERRowDeleting(Me, New USERRowChangeEvent(CType(e.Row,USERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUSERRow(ByVal row As USERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "USERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WINDOWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFORM As Global.System.Data.DataColumn
        
        Private columnCONTROL As Global.System.Data.DataColumn
        
        Private columnTOP As Global.System.Data.DataColumn
        
        Private columnLEFT As Global.System.Data.DataColumn
        
        Private columnWIDTH As Global.System.Data.DataColumn
        
        Private columnHEIGHT As Global.System.Data.DataColumn
        
        Private columnFONT_SIZE As Global.System.Data.DataColumn
        
        Private columnSTATE As Global.System.Data.DataColumn
        
        Private columnCOL0_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL1_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL2_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL3_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL4_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL5_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL6_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL7_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL8_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL9_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL10_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL11_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL12_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL13_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL14_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL15_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL16_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL17_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL18_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL19_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL20_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL21_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL22_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL23_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL24_WIDTH As Global.System.Data.DataColumn
        
        Private columnCOL25_WIDTH As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WINDOW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FORMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFORM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONTROLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONTROL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LEFTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLEFT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FONT_SIZEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFONT_SIZE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property STATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL0_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL0_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL1_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL1_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL2_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL2_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL3_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL3_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL4_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL4_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL5_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL5_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL6_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL6_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL7_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL7_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL8_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL8_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL9_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL9_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL10_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL10_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL11_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL11_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL12_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL12_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL13_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL13_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL14_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL14_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL15_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL15_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL16_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL16_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL17_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL17_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL18_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL18_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL19_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL19_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL20_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL20_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL21_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL21_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL22_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL22_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL23_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL23_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL24_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL24_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COL25_WIDTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOL25_WIDTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WINDOWRow
            Get
                Return CType(Me.Rows(index),WINDOWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WINDOWRowChanging As WINDOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WINDOWRowChanged As WINDOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WINDOWRowDeleting As WINDOWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WINDOWRowDeleted As WINDOWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWINDOWRow(ByVal row As WINDOWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWINDOWRow( _
                    ByVal FORM As String,  _
                    ByVal CONTROL As String,  _
                    ByVal TOP As Short,  _
                    ByVal LEFT As Short,  _
                    ByVal WIDTH As Short,  _
                    ByVal HEIGHT As Short,  _
                    ByVal FONT_SIZE As Single,  _
                    ByVal STATE As Short,  _
                    ByVal COL0_WIDTH As Short,  _
                    ByVal COL1_WIDTH As Short,  _
                    ByVal COL2_WIDTH As Short,  _
                    ByVal COL3_WIDTH As Short,  _
                    ByVal COL4_WIDTH As Short,  _
                    ByVal COL5_WIDTH As Short,  _
                    ByVal COL6_WIDTH As Short,  _
                    ByVal COL7_WIDTH As Short,  _
                    ByVal COL8_WIDTH As Short,  _
                    ByVal COL9_WIDTH As Short,  _
                    ByVal COL10_WIDTH As Short,  _
                    ByVal COL11_WIDTH As Short,  _
                    ByVal COL12_WIDTH As Short,  _
                    ByVal COL13_WIDTH As Short,  _
                    ByVal COL14_WIDTH As Short,  _
                    ByVal COL15_WIDTH As Short,  _
                    ByVal COL16_WIDTH As Short,  _
                    ByVal COL17_WIDTH As Short,  _
                    ByVal COL18_WIDTH As Short,  _
                    ByVal COL19_WIDTH As Short,  _
                    ByVal COL20_WIDTH As Short,  _
                    ByVal COL21_WIDTH As Short,  _
                    ByVal COL22_WIDTH As Short,  _
                    ByVal COL23_WIDTH As Short,  _
                    ByVal COL24_WIDTH As Short,  _
                    ByVal COL25_WIDTH As Short) As WINDOWRow
            Dim rowWINDOWRow As WINDOWRow = CType(Me.NewRow,WINDOWRow)
            Dim columnValuesArray() As Object = New Object() {FORM, CONTROL, TOP, LEFT, WIDTH, HEIGHT, FONT_SIZE, STATE, COL0_WIDTH, COL1_WIDTH, COL2_WIDTH, COL3_WIDTH, COL4_WIDTH, COL5_WIDTH, COL6_WIDTH, COL7_WIDTH, COL8_WIDTH, COL9_WIDTH, COL10_WIDTH, COL11_WIDTH, COL12_WIDTH, COL13_WIDTH, COL14_WIDTH, COL15_WIDTH, COL16_WIDTH, COL17_WIDTH, COL18_WIDTH, COL19_WIDTH, COL20_WIDTH, COL21_WIDTH, COL22_WIDTH, COL23_WIDTH, COL24_WIDTH, COL25_WIDTH}
            rowWINDOWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWINDOWRow)
            Return rowWINDOWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByFORMCONTROL(ByVal FORM As String, ByVal CONTROL As String) As WINDOWRow
            Return CType(Me.Rows.Find(New Object() {FORM, CONTROL}),WINDOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WINDOWDataTable = CType(MyBase.Clone,WINDOWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WINDOWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnFORM = MyBase.Columns("FORM")
            Me.columnCONTROL = MyBase.Columns("CONTROL")
            Me.columnTOP = MyBase.Columns("TOP")
            Me.columnLEFT = MyBase.Columns("LEFT")
            Me.columnWIDTH = MyBase.Columns("WIDTH")
            Me.columnHEIGHT = MyBase.Columns("HEIGHT")
            Me.columnFONT_SIZE = MyBase.Columns("FONT_SIZE")
            Me.columnSTATE = MyBase.Columns("STATE")
            Me.columnCOL0_WIDTH = MyBase.Columns("COL0_WIDTH")
            Me.columnCOL1_WIDTH = MyBase.Columns("COL1_WIDTH")
            Me.columnCOL2_WIDTH = MyBase.Columns("COL2_WIDTH")
            Me.columnCOL3_WIDTH = MyBase.Columns("COL3_WIDTH")
            Me.columnCOL4_WIDTH = MyBase.Columns("COL4_WIDTH")
            Me.columnCOL5_WIDTH = MyBase.Columns("COL5_WIDTH")
            Me.columnCOL6_WIDTH = MyBase.Columns("COL6_WIDTH")
            Me.columnCOL7_WIDTH = MyBase.Columns("COL7_WIDTH")
            Me.columnCOL8_WIDTH = MyBase.Columns("COL8_WIDTH")
            Me.columnCOL9_WIDTH = MyBase.Columns("COL9_WIDTH")
            Me.columnCOL10_WIDTH = MyBase.Columns("COL10_WIDTH")
            Me.columnCOL11_WIDTH = MyBase.Columns("COL11_WIDTH")
            Me.columnCOL12_WIDTH = MyBase.Columns("COL12_WIDTH")
            Me.columnCOL13_WIDTH = MyBase.Columns("COL13_WIDTH")
            Me.columnCOL14_WIDTH = MyBase.Columns("COL14_WIDTH")
            Me.columnCOL15_WIDTH = MyBase.Columns("COL15_WIDTH")
            Me.columnCOL16_WIDTH = MyBase.Columns("COL16_WIDTH")
            Me.columnCOL17_WIDTH = MyBase.Columns("COL17_WIDTH")
            Me.columnCOL18_WIDTH = MyBase.Columns("COL18_WIDTH")
            Me.columnCOL19_WIDTH = MyBase.Columns("COL19_WIDTH")
            Me.columnCOL20_WIDTH = MyBase.Columns("COL20_WIDTH")
            Me.columnCOL21_WIDTH = MyBase.Columns("COL21_WIDTH")
            Me.columnCOL22_WIDTH = MyBase.Columns("COL22_WIDTH")
            Me.columnCOL23_WIDTH = MyBase.Columns("COL23_WIDTH")
            Me.columnCOL24_WIDTH = MyBase.Columns("COL24_WIDTH")
            Me.columnCOL25_WIDTH = MyBase.Columns("COL25_WIDTH")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnFORM = New Global.System.Data.DataColumn("FORM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFORM)
            Me.columnCONTROL = New Global.System.Data.DataColumn("CONTROL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONTROL)
            Me.columnTOP = New Global.System.Data.DataColumn("TOP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOP)
            Me.columnLEFT = New Global.System.Data.DataColumn("LEFT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLEFT)
            Me.columnWIDTH = New Global.System.Data.DataColumn("WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWIDTH)
            Me.columnHEIGHT = New Global.System.Data.DataColumn("HEIGHT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEIGHT)
            Me.columnFONT_SIZE = New Global.System.Data.DataColumn("FONT_SIZE", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFONT_SIZE)
            Me.columnSTATE = New Global.System.Data.DataColumn("STATE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATE)
            Me.columnCOL0_WIDTH = New Global.System.Data.DataColumn("COL0_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL0_WIDTH)
            Me.columnCOL1_WIDTH = New Global.System.Data.DataColumn("COL1_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL1_WIDTH)
            Me.columnCOL2_WIDTH = New Global.System.Data.DataColumn("COL2_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL2_WIDTH)
            Me.columnCOL3_WIDTH = New Global.System.Data.DataColumn("COL3_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL3_WIDTH)
            Me.columnCOL4_WIDTH = New Global.System.Data.DataColumn("COL4_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL4_WIDTH)
            Me.columnCOL5_WIDTH = New Global.System.Data.DataColumn("COL5_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL5_WIDTH)
            Me.columnCOL6_WIDTH = New Global.System.Data.DataColumn("COL6_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL6_WIDTH)
            Me.columnCOL7_WIDTH = New Global.System.Data.DataColumn("COL7_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL7_WIDTH)
            Me.columnCOL8_WIDTH = New Global.System.Data.DataColumn("COL8_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL8_WIDTH)
            Me.columnCOL9_WIDTH = New Global.System.Data.DataColumn("COL9_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL9_WIDTH)
            Me.columnCOL10_WIDTH = New Global.System.Data.DataColumn("COL10_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL10_WIDTH)
            Me.columnCOL11_WIDTH = New Global.System.Data.DataColumn("COL11_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL11_WIDTH)
            Me.columnCOL12_WIDTH = New Global.System.Data.DataColumn("COL12_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL12_WIDTH)
            Me.columnCOL13_WIDTH = New Global.System.Data.DataColumn("COL13_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL13_WIDTH)
            Me.columnCOL14_WIDTH = New Global.System.Data.DataColumn("COL14_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL14_WIDTH)
            Me.columnCOL15_WIDTH = New Global.System.Data.DataColumn("COL15_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL15_WIDTH)
            Me.columnCOL16_WIDTH = New Global.System.Data.DataColumn("COL16_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL16_WIDTH)
            Me.columnCOL17_WIDTH = New Global.System.Data.DataColumn("COL17_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL17_WIDTH)
            Me.columnCOL18_WIDTH = New Global.System.Data.DataColumn("COL18_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL18_WIDTH)
            Me.columnCOL19_WIDTH = New Global.System.Data.DataColumn("COL19_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL19_WIDTH)
            Me.columnCOL20_WIDTH = New Global.System.Data.DataColumn("COL20_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL20_WIDTH)
            Me.columnCOL21_WIDTH = New Global.System.Data.DataColumn("COL21_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL21_WIDTH)
            Me.columnCOL22_WIDTH = New Global.System.Data.DataColumn("COL22_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL22_WIDTH)
            Me.columnCOL23_WIDTH = New Global.System.Data.DataColumn("COL23_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL23_WIDTH)
            Me.columnCOL24_WIDTH = New Global.System.Data.DataColumn("COL24_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL24_WIDTH)
            Me.columnCOL25_WIDTH = New Global.System.Data.DataColumn("COL25_WIDTH", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOL25_WIDTH)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFORM, Me.columnCONTROL}, true))
            Me.columnFORM.AllowDBNull = false
            Me.columnFORM.MaxLength = 50
            Me.columnCONTROL.AllowDBNull = false
            Me.columnCONTROL.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWINDOWRow() As WINDOWRow
            Return CType(Me.NewRow,WINDOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WINDOWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WINDOWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WINDOWRowChangedEvent) Is Nothing) Then
                RaiseEvent WINDOWRowChanged(Me, New WINDOWRowChangeEvent(CType(e.Row,WINDOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WINDOWRowChangingEvent) Is Nothing) Then
                RaiseEvent WINDOWRowChanging(Me, New WINDOWRowChangeEvent(CType(e.Row,WINDOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WINDOWRowDeletedEvent) Is Nothing) Then
                RaiseEvent WINDOWRowDeleted(Me, New WINDOWRowChangeEvent(CType(e.Row,WINDOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WINDOWRowDeletingEvent) Is Nothing) Then
                RaiseEvent WINDOWRowDeleting(Me, New WINDOWRowChangeEvent(CType(e.Row,WINDOWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWINDOWRow(ByVal row As WINDOWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002C1DataSet = New _840002C1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WINDOWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class BATCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableBATCH As BATCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBATCH = CType(Me.Table,BATCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableBATCH.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableBATCH.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_NUMBER() As Short
            Get
                Return CType(Me(Me.tableBATCH.BATCH_NUMBERColumn),Short)
            End Get
            Set
                Me(Me.tableBATCH.BATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_SETPOINT' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ACTVALUE' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_UNIT' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_DECIMALPOINT' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_MAXRESOLU_DP' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BREAKPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BREAKPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BREAKPOINT' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BREAKPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ERRNUM() As Short
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_ERRNUMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ERRNUM' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ABORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_ABORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ABORT' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_ABORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQUENCE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.SEQUENCE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQUENCE_NUMBER' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.SEQUENCE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPBATCH_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.REPBATCH_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPBATCH_NUMBER' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.REPBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ACTIVE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_ACTIVEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ACTIVE' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_ACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_FACTOR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_FACTORColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_FACTOR' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_FACTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_REPORT_READY() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBATCH.BATCH_REPORT_READYColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_REPORT_READY' in table 'BATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBATCH.BATCH_REPORT_READYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_SETPOINTNull()
            Me(Me.tableBATCH.BATCH_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ACTVALUENull()
            Me(Me.tableBATCH.BATCH_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_UNITNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_UNITNull()
            Me(Me.tableBATCH.BATCH_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_DECIMALPOINTNull()
            Me(Me.tableBATCH.BATCH_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_MAXRESOLU_DPNull()
            Me(Me.tableBATCH.BATCH_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBREAKPOINTNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BREAKPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBREAKPOINTNull()
            Me(Me.tableBATCH.BREAKPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ERRNUMNull()
            Me(Me.tableBATCH.BATCH_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ABORTNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_ABORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ABORTNull()
            Me(Me.tableBATCH.BATCH_ABORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQUENCE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.SEQUENCE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQUENCE_NUMBERNull()
            Me(Me.tableBATCH.SEQUENCE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.REPBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPBATCH_NUMBERNull()
            Me(Me.tableBATCH.REPBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ACTIVENull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_ACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ACTIVENull()
            Me(Me.tableBATCH.BATCH_ACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_FACTORNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_FACTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_FACTORNull()
            Me(Me.tableBATCH.BATCH_FACTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_REPORT_READYNull() As Boolean
            Return Me.IsNull(Me.tableBATCH.BATCH_REPORT_READYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_REPORT_READYNull()
            Me(Me.tableBATCH.BATCH_REPORT_READYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class LANGUAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableLANGUAGE As LANGUAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLANGUAGE = CType(Me.Table,LANGUAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _ProBatch_() As String
            Get
                Return CType(Me(Me.tableLANGUAGE._ProBatch_Column),String)
            End Get
            Set
                Me(Me.tableLANGUAGE._ProBatch_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property English() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.EnglishColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'English' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.EnglishColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _English__US_() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE._English__US_Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'English (US)' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE._English__US_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Deutsch() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.DeutschColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deutsch' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.DeutschColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Français() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.FrançaisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Français' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.FrançaisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nederlands() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.NederlandsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nederlands' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.NederlandsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Svensk() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.SvenskColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Svensk' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.SvenskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Italiano() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.ItalianoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Italiano' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.ItalianoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Español() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.EspañolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Español' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.EspañolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Português() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.PortuguêsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Português' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.PortuguêsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Suomi() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.SuomiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Suomi' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.SuomiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Dansk() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.DanskColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Dansk' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.DanskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Polski() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.PolskiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Polski' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.PolskiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Greek() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.GreekColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Greek' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.GreekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Russian() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.RussianColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Russian' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.RussianColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Turkish() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.TurkishColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Turkish' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.TurkishColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __() As String
            Get
                Try 
                    Return CType(Me(Me.tableLANGUAGE.__Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '*' in table 'LANGUAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLANGUAGE.__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEnglishNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.EnglishColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEnglishNull()
            Me(Me.tableLANGUAGE.EnglishColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_English__US_Null() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE._English__US_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_English__US_Null()
            Me(Me.tableLANGUAGE._English__US_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDeutschNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.DeutschColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDeutschNull()
            Me(Me.tableLANGUAGE.DeutschColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFrançaisNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.FrançaisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFrançaisNull()
            Me(Me.tableLANGUAGE.FrançaisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNederlandsNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.NederlandsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNederlandsNull()
            Me(Me.tableLANGUAGE.NederlandsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSvenskNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.SvenskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSvenskNull()
            Me(Me.tableLANGUAGE.SvenskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsItalianoNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.ItalianoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetItalianoNull()
            Me(Me.tableLANGUAGE.ItalianoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEspañolNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.EspañolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEspañolNull()
            Me(Me.tableLANGUAGE.EspañolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPortuguêsNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.PortuguêsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPortuguêsNull()
            Me(Me.tableLANGUAGE.PortuguêsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSuomiNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.SuomiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSuomiNull()
            Me(Me.tableLANGUAGE.SuomiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDanskNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.DanskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDanskNull()
            Me(Me.tableLANGUAGE.DanskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPolskiNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.PolskiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPolskiNull()
            Me(Me.tableLANGUAGE.PolskiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsGreekNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.GreekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetGreekNull()
            Me(Me.tableLANGUAGE.GreekColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRussianNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.RussianColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRussianNull()
            Me(Me.tableLANGUAGE.RussianColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTurkishNull() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.TurkishColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTurkishNull()
            Me(Me.tableLANGUAGE.TurkishColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__Null() As Boolean
            Return Me.IsNull(Me.tableLANGUAGE.__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__Null()
            Me(Me.tableLANGUAGE.__Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINBATCHRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINBATCH As MAINBATCHDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINBATCH = CType(Me.Table,MAINBATCHDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPROD_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableMAINBATCH.MAINPROD_NUMBERColumn),Integer)
            End Get
            Set
                Me(Me.tableMAINBATCH.MAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINBATCH_NUMBER() As Short
            Get
                Return CType(Me(Me.tableMAINBATCH.MAINBATCH_NUMBERColumn),Short)
            End Get
            Set
                Me(Me.tableMAINBATCH.MAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_SETPOINT' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ACTVALUE' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_UNIT' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_DECIMALPOINT' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_MAXRESOLU_DP' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ERRNUM() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_ERRNUMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ERRNUM' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_ABORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_ABORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_ABORT' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_ABORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_DONE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_DONEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_DONE' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_DONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BATCH_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_STATUS' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BATCH_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPMAINBATCH_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.REPMAINBATCH_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPMAINBATCH_NUMBER' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.REPMAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINSEQUENCE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.MAINSEQUENCE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINSEQUENCE_NUMBER' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.MAINSEQUENCE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BREAKPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINBATCH.BREAKPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BREAKPOINT' in table 'MAINBATCH' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINBATCH.BREAKPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPRODUCTIONRow() As MAINPRODUCTIONRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MAINPRODUCTIONMAINBATCH")),MAINPRODUCTIONRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MAINPRODUCTIONMAINBATCH"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_SETPOINTNull()
            Me(Me.tableMAINBATCH.BATCH_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ACTVALUENull()
            Me(Me.tableMAINBATCH.BATCH_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_UNITNull()
            Me(Me.tableMAINBATCH.BATCH_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_DECIMALPOINTNull()
            Me(Me.tableMAINBATCH.BATCH_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_MAXRESOLU_DPNull()
            Me(Me.tableMAINBATCH.BATCH_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ERRNUMNull()
            Me(Me.tableMAINBATCH.BATCH_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_ABORTNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_ABORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_ABORTNull()
            Me(Me.tableMAINBATCH.BATCH_ABORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_DONENull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_DONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_DONENull()
            Me(Me.tableMAINBATCH.BATCH_DONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BATCH_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_STATUSNull()
            Me(Me.tableMAINBATCH.BATCH_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPMAINBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.REPMAINBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPMAINBATCH_NUMBERNull()
            Me(Me.tableMAINBATCH.REPMAINBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINSEQUENCE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.MAINSEQUENCE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINSEQUENCE_NUMBERNull()
            Me(Me.tableMAINBATCH.MAINSEQUENCE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBREAKPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINBATCH.BREAKPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBREAKPOINTNull()
            Me(Me.tableMAINBATCH.BREAKPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINRECIPELINERows() As MAINRECIPELINERow()
            If (Me.Table.ChildRelations("MAINBATCHMAINRECIPELINE") Is Nothing) Then
                Return New MAINRECIPELINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MAINBATCHMAINRECIPELINE")),MAINRECIPELINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINPROD_QUEUERow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINPROD_QUEUE As MAINPROD_QUEUEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINPROD_QUEUE = CType(Me.Table,MAINPROD_QUEUEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_NUMBERColumn),Integer)
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property START_DATETIME() As Date
            Get
                Return CType(Me(Me.tableMAINPROD_QUEUE.START_DATETIMEColumn),Date)
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.START_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.MAINRECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_IDENT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.MAINRECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_USER' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_START_SYNCHRON() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_START_SYNCHRONColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_START_SYNCHRON' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_START_SYNCHRONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_CYCLE' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPLAN_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.MAINPLAN_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINPLAN_IDENT' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.MAINPLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPLAN_LINE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.MAINPLAN_LINEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINPLAN_LINE' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.MAINPLAN_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_PCAUTOSTART() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPROD_QUEUE.PROD_PCAUTOSTARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_PCAUTOSTART' in table 'MAINPROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPROD_QUEUE.PROD_PCAUTOSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.MAINRECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_IDENTNull()
            Me(Me.tableMAINPROD_QUEUE.MAINRECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tableMAINPROD_QUEUE.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tableMAINPROD_QUEUE.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_USERNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_USERNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_START_SYNCHRONNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_START_SYNCHRONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_START_SYNCHRONNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_START_SYNCHRONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_CYCLENull()
            Me(Me.tableMAINPROD_QUEUE.PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINPLAN_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.MAINPLAN_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINPLAN_IDENTNull()
            Me(Me.tableMAINPROD_QUEUE.MAINPLAN_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINPLAN_LINENull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.MAINPLAN_LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINPLAN_LINENull()
            Me(Me.tableMAINPROD_QUEUE.MAINPLAN_LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_PCAUTOSTARTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPROD_QUEUE.PROD_PCAUTOSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_PCAUTOSTARTNull()
            Me(Me.tableMAINPROD_QUEUE.PROD_PCAUTOSTARTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINPRODUCTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINPRODUCTION As MAINPRODUCTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINPRODUCTION = CType(Me.Table,MAINPRODUCTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPROD_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableMAINPRODUCTION.MAINPROD_NUMBERColumn),Integer)
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_IDENT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_NAME' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_CREATE_DATE' in table 'MAINPRODUCTION' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_CHANGE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_CHANGE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_CHANGE_DATE' in table 'MAINPRODUCTION' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_CHANGE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_USER' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT_ENABLED' in table 'MAINPRODUCTION' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT_TIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_TIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT_TIME' in table 'MAINPRODUCTION' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_TIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT_ACTIVE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ACTIVEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT_ACTIVE' in table 'MAINPRODUCTION' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ACTIVEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_ACTVALUE' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_DECIMALPOINT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_MAXRESOLU_DP' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_USER' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_START_SYNCHRON() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_START_SYNCHRONColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_START_SYNCHRON' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_START_SYNCHRONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_MAXNUM() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.BATCH_MAXNUMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_MAXNUM' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.BATCH_MAXNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.PROD_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_STATUS' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.PROD_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPMAINPROD_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.REPMAINPROD_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPMAINPROD_NUMBER' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.REPMAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINPRODUCTION.LOG_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_REPORT' in table 'MAINPRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINPRODUCTION.LOG_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_IDENTNull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_NAMENull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_CREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_CREATE_DATENull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_CHANGE_DATENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_CHANGE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_CHANGE_DATENull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_CHANGE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_USERNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_USERNull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUTNull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUT_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUT_ENABLEDNull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUT_TIMENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_TIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUT_TIMENull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_TIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUT_ACTIVENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ACTIVEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUT_ACTIVENull()
            Me(Me.tableMAINPRODUCTION.MAINRECIPE_TIMEOUT_ACTIVEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tableMAINPRODUCTION.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_ACTVALUENull()
            Me(Me.tableMAINPRODUCTION.PROD_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tableMAINPRODUCTION.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_DECIMALPOINTNull()
            Me(Me.tableMAINPRODUCTION.PROD_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_MAXRESOLU_DPNull()
            Me(Me.tableMAINPRODUCTION.PROD_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tableMAINPRODUCTION.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tableMAINPRODUCTION.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tableMAINPRODUCTION.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_USERNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_USERNull()
            Me(Me.tableMAINPRODUCTION.PROD_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_START_SYNCHRONNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_START_SYNCHRONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_START_SYNCHRONNull()
            Me(Me.tableMAINPRODUCTION.PROD_START_SYNCHRONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_MAXNUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.BATCH_MAXNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_MAXNUMNull()
            Me(Me.tableMAINPRODUCTION.BATCH_MAXNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.PROD_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_STATUSNull()
            Me(Me.tableMAINPRODUCTION.PROD_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPMAINPROD_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.REPMAINPROD_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPMAINPROD_NUMBERNull()
            Me(Me.tableMAINPRODUCTION.REPMAINPROD_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_REPORTNull() As Boolean
            Return Me.IsNull(Me.tableMAINPRODUCTION.LOG_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_REPORTNull()
            Me(Me.tableMAINPRODUCTION.LOG_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINBATCHRows() As MAINBATCHRow()
            If (Me.Table.ChildRelations("MAINPRODUCTIONMAINBATCH") Is Nothing) Then
                Return New MAINBATCHRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MAINPRODUCTIONMAINBATCH")),MAINBATCHRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINRECIPELINERow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINRECIPELINE As MAINRECIPELINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINRECIPELINE = CType(Me.Table,MAINRECIPELINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPROD_NUMBER() As Integer
            Get
                Return CType(Me(Me.tableMAINRECIPELINE.MAINPROD_NUMBERColumn),Integer)
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.MAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPELINE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINBATCH_NUMBER() As Short
            Get
                Return CType(Me(Me.tableMAINRECIPELINE.MAINBATCH_NUMBERColumn),Short)
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.MAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_BATCH_NUMBER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_NUMBERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_BATCH_NUMBER' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_BATCH_MAXNUM() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_MAXNUMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_BATCH_MAXNUM' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_MAXNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_STATUS' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IDENT' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CALCSETP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_CALCSETPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CALCSETP' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_CALCSETPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_ACTVALUE' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_UNIT' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_DECIMALPOINT' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_MAXRESOLU_DP' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_PRIORITY() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_PRIORITYColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_PRIORITY' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_PRIORITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_DONE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPELINE.RECIPE_DONEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_DONE' in table 'MAINRECIPELINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPELINE.RECIPE_DONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINBATCHRowParent() As MAINBATCHRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MAINBATCHMAINRECIPELINE")),MAINBATCHRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MAINBATCHMAINRECIPELINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_BATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_BATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_BATCH_NUMBERNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_BATCH_MAXNUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_BATCH_MAXNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_BATCH_MAXNUMNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_BATCH_MAXNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_STATUSNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IDENTNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CALCSETPNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_CALCSETPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CALCSETPNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_CALCSETPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_ACTVALUENull()
            Me(Me.tableMAINRECIPELINE.RECIPE_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_UNITNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_DECIMALPOINTNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_MAXRESOLU_DPNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_PRIORITYNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_PRIORITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_PRIORITYNull()
            Me(Me.tableMAINRECIPELINE.RECIPE_PRIORITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_DONENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPELINE.RECIPE_DONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_DONENull()
            Me(Me.tableMAINRECIPELINE.RECIPE_DONEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROD_QUEUERow
        Inherits Global.System.Data.DataRow
        
        Private tablePROD_QUEUE As PROD_QUEUEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROD_QUEUE = CType(Me.Table,PROD_QUEUEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUMBER() As Integer
            Get
                Return CType(Me(Me.tablePROD_QUEUE.PROD_NUMBERColumn),Integer)
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property START_DATETIME() As Date
            Get
                Return CType(Me(Me.tablePROD_QUEUE.START_DATETIMEColumn),Date)
            End Get
            Set
                Me(Me.tablePROD_QUEUE.START_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PRODLINE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODLINE_IDENT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PLAN_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_IDENT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_LINE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PLAN_LINEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_LINE' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PLAN_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IDENT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_CYCLE' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_PCAUTOSTART() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_PCAUTOSTARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_PCAUTOSTART' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_PCAUTOSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.PROD_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_USER' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.PROD_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPMAINPROD_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.REPMAINPROD_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPMAINPROD_NUMBER' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.REPMAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPMAINBATCH_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.REPMAINBATCH_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPMAINBATCH_NUMBER' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.REPMAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPROD_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.MAINPROD_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINPROD_NUMBER' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.MAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINBATCH_NUMBER() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePROD_QUEUE.MAINBATCH_NUMBERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINBATCH_NUMBER' in table 'PROD_QUEUE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROD_QUEUE.MAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODLINE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PRODLINE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODLINE_IDENTNull()
            Me(Me.tablePROD_QUEUE.PRODLINE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PLAN_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_IDENTNull()
            Me(Me.tablePROD_QUEUE.PLAN_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_LINENull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PLAN_LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_LINENull()
            Me(Me.tablePROD_QUEUE.PLAN_LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IDENTNull()
            Me(Me.tablePROD_QUEUE.RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tablePROD_QUEUE.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tablePROD_QUEUE.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tablePROD_QUEUE.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_CYCLENull()
            Me(Me.tablePROD_QUEUE.PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tablePROD_QUEUE.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tablePROD_QUEUE.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_PCAUTOSTARTNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_PCAUTOSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_PCAUTOSTARTNull()
            Me(Me.tablePROD_QUEUE.PROD_PCAUTOSTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_USERNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.PROD_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_USERNull()
            Me(Me.tablePROD_QUEUE.PROD_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPMAINPROD_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.REPMAINPROD_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPMAINPROD_NUMBERNull()
            Me(Me.tablePROD_QUEUE.REPMAINPROD_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPMAINBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.REPMAINBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPMAINBATCH_NUMBERNull()
            Me(Me.tablePROD_QUEUE.REPMAINBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINPROD_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.MAINPROD_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINPROD_NUMBERNull()
            Me(Me.tablePROD_QUEUE.MAINPROD_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePROD_QUEUE.MAINBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINBATCH_NUMBERNull()
            Me(Me.tablePROD_QUEUE.MAINBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PRODUCTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTION As PRODUCTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTION = CType(Me.Table,PRODUCTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tablePRODUCTION.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTION.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_STATUS' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_PREV_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_PREV_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_PREV_STATUS' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_PREV_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQUENCE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.SEQUENCE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQUENCE_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.SEQUENCE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPPROD_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.REPPROD_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPPROD_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.REPPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPBATCH_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.REPBATCH_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPBATCH_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.REPBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PLAN_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_IDENT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PLAN_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_NAME' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PLAN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_LINE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PLAN_LINEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_LINE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PLAN_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IDENT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_NAME' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TOTAL' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_REFWEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_REFWEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_REFWEIGHT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_REFWEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CREATE_DATE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CHANGE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_CHANGE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CHANGE_DATE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_CHANGE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_USER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CHECK() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_CHECKColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CHECK' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_CHECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TIMEOUT() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_TIMEOUTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TIMEOUT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TIMEOUT_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.RECIPE_TIMEOUT_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TIMEOUT_ENABLED' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.RECIPE_TIMEOUT_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_START_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_START_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_START_DATE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_START_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_END_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_END_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_END_DATE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_END_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_ACTVALUE' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_DECIMALPOINT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_MAXRESOLU_DP' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_PCAUTOSTART() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_PCAUTOSTARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_PCAUTOSTART' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_PCAUTOSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_USER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_NUMBER() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.BATCH_NUMBERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.BATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_MAXNUM() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.BATCH_MAXNUMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_MAXNUM' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.BATCH_MAXNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_REPEAT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.BATCH_REPEATColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_REPEAT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.BATCH_REPEATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_ABORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.PROD_ABORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_ABORT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.PROD_ABORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CORR_NUMBER() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.CORR_NUMBERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CORR_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.CORR_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINPROD_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.MAINPROD_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINPROD_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.MAINPROD_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINBATCH_NUMBER() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.MAINBATCH_NUMBERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINBATCH_NUMBER' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.MAINBATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTION.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'PRODUCTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTION.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_STATUSNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_STATUSNull()
            Me(Me.tablePRODUCTION.PROD_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_PREV_STATUSNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_PREV_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_PREV_STATUSNull()
            Me(Me.tablePRODUCTION.PROD_PREV_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQUENCE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.SEQUENCE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQUENCE_NUMBERNull()
            Me(Me.tablePRODUCTION.SEQUENCE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPPROD_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.REPPROD_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPPROD_NUMBERNull()
            Me(Me.tablePRODUCTION.REPPROD_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.REPBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPBATCH_NUMBERNull()
            Me(Me.tablePRODUCTION.REPBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PLAN_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_IDENTNull()
            Me(Me.tablePRODUCTION.PLAN_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PLAN_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_NAMENull()
            Me(Me.tablePRODUCTION.PLAN_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_LINENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PLAN_LINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_LINENull()
            Me(Me.tablePRODUCTION.PLAN_LINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IDENTNull()
            Me(Me.tablePRODUCTION.RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_NAMENull()
            Me(Me.tablePRODUCTION.RECIPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TOTALNull()
            Me(Me.tablePRODUCTION.RECIPE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_REFWEIGHTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_REFWEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_REFWEIGHTNull()
            Me(Me.tablePRODUCTION.RECIPE_REFWEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CREATE_DATENull()
            Me(Me.tablePRODUCTION.RECIPE_CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CHANGE_DATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_CHANGE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CHANGE_DATENull()
            Me(Me.tablePRODUCTION.RECIPE_CHANGE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_USERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_USERNull()
            Me(Me.tablePRODUCTION.RECIPE_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CHECKNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_CHECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CHECKNull()
            Me(Me.tablePRODUCTION.RECIPE_CHECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TIMEOUTNull()
            Me(Me.tablePRODUCTION.RECIPE_TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TIMEOUT_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.RECIPE_TIMEOUT_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TIMEOUT_ENABLEDNull()
            Me(Me.tablePRODUCTION.RECIPE_TIMEOUT_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tablePRODUCTION.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tablePRODUCTION.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tablePRODUCTION.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_START_DATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_START_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_START_DATENull()
            Me(Me.tablePRODUCTION.PROD_START_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_END_DATENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_END_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_END_DATENull()
            Me(Me.tablePRODUCTION.PROD_END_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tablePRODUCTION.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_ACTVALUENull()
            Me(Me.tablePRODUCTION.PROD_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tablePRODUCTION.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_DECIMALPOINTNull()
            Me(Me.tablePRODUCTION.PROD_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_MAXRESOLU_DPNull()
            Me(Me.tablePRODUCTION.PROD_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_PCAUTOSTARTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_PCAUTOSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_PCAUTOSTARTNull()
            Me(Me.tablePRODUCTION.PROD_PCAUTOSTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_USERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_USERNull()
            Me(Me.tablePRODUCTION.PROD_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.BATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_NUMBERNull()
            Me(Me.tablePRODUCTION.BATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_MAXNUMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.BATCH_MAXNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_MAXNUMNull()
            Me(Me.tablePRODUCTION.BATCH_MAXNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_REPEATNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.BATCH_REPEATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_REPEATNull()
            Me(Me.tablePRODUCTION.BATCH_REPEATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_ABORTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.PROD_ABORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_ABORTNull()
            Me(Me.tablePRODUCTION.PROD_ABORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCORR_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.CORR_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCORR_NUMBERNull()
            Me(Me.tablePRODUCTION.CORR_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINPROD_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.MAINPROD_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINPROD_NUMBERNull()
            Me(Me.tablePRODUCTION.MAINPROD_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINBATCH_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.MAINBATCH_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINBATCH_NUMBERNull()
            Me(Me.tablePRODUCTION.MAINBATCH_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTION.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tablePRODUCTION.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RECIPERow
        Inherits Global.System.Data.DataRow
        
        Private tableRECIPE As RECIPEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRECIPE = CType(Me.Table,RECIPEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE.RECIPE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_LINE() As Short
            Get
                Return CType(Me(Me.tableRECIPE.RECIPE_LINEColumn),Short)
            End Get
            Set
                Me(Me.tableRECIPE.RECIPE_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_NUMBER() As Short
            Get
                Return CType(Me(Me.tableRECIPE.BATCH_NUMBERColumn),Short)
            End Get
            Set
                Me(Me.tableRECIPE.BATCH_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_LINE_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.RECIPE_LINE_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_LINE_STATUS' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.RECIPE_LINE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_LINE_PARA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.RECIPE_LINE_PARAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_LINE_PARA' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.RECIPE_LINE_PARAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_IDENT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NAME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PARA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_PARAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PARA' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_PARAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SETPOINT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_CALCSETP() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_CALCSETPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_CALCSETP' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_CALCSETPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ACTVALUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_ACTVALUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ACTVALUE' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_ACTVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_UNIT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DECIMALPOINT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BREAKPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.BREAKPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BREAKPOINT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.BREAKPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_CALCULATE_SETPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_CALCULATE_SETPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_CALCULATE_SETPOINT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_CALCULATE_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.WP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_ADDRESS' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.WP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.WP_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_IDENT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.WP_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.WP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_NAME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.WP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_BATCH_MODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_BATCH_MODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_BATCH_MODE' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_BATCH_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SPM_INADR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_SPM_INADRColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SPM_INADR' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_SPM_INADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SPM_OUTADR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_SPM_OUTADRColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SPM_OUTADR' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_SPM_OUTADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ADD_TO_TOTAL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_ADD_TO_TOTALColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ADD_TO_TOTAL' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_ADD_TO_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_BATCH_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_BATCH_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_BATCH_REPORT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_BATCH_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PROD_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_PROD_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PROD_REPORT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_PROD_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PRESET() As Single
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_PRESETColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PRESET' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_PRESETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DISCHARGETIME() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_DISCHARGETIMEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DISCHARGETIME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_DISCHARGETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_OVERSHOOT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_OVERSHOOTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_OVERSHOOT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_OVERSHOOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_FLOWRATE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_FLOWRATEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_FLOWRATE' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_FLOWRATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_POS_TOL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_POS_TOLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_POS_TOL' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_POS_TOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NEG_TOL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_NEG_TOLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NEG_TOL' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_NEG_TOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_CALMINGTIME() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_CALMINGTIMEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_CALMINGTIME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_CALMINGTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_RESTART_MODE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_RESTART_MODEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_RESTART_MODE' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_RESTART_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_MAX() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_A1_MAXColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_MAX' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_A1_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_MIN() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_A1_MINColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_MIN' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_A1_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_A1_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_UNIT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_A1_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ABORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_ABORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ABORT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_ABORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_TIMEOUT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_TIMEOUTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_TIMEOUT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_TOLERANCE_ALARM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_TOLERANCE_ALARMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_TOLERANCE_ALARM' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_TOLERANCE_ALARMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ADC_ERROR() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_ADC_ERRORColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ADC_ERROR' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_ADC_ERRORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SKIP() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_SKIPColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SKIP' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_SKIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_FLOW_ALARM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_FLOW_ALARMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_FLOW_ALARM' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_FLOW_ALARMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_POS_TOL_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_POS_TOL_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_POS_TOL_UNIT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_POS_TOL_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NEG_TOL_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_NEG_TOL_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NEG_TOL_UNIT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_NEG_TOL_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ORDER() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_ORDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ORDER' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_ORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DELIVERY() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_DELIVERYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DELIVERY' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_DELIVERYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_LOT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_LOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_LOT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_LOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DATETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_DATETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DATETIME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUBREC_STARTED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.SUBREC_STARTEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUBREC_STARTED' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.SUBREC_STARTEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_REPORT_READY() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.MAT_REPORT_READYColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_REPORT_READY' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.MAT_REPORT_READYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_CIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.SCRIPT_CICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_CIC' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.SCRIPT_CICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_COD_SRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.SCRIPT_VAR_COD_SRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_COD_SRC' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.SCRIPT_VAR_COD_SRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_PRINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.LABEL_PRINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_PRINT' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.LABEL_PRINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_COPIES() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.LABEL_COPIESColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_COPIES' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.LABEL_COPIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE.LABEL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_NAME' in table 'RECIPE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE.LABEL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_LINE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.RECIPE_LINE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_LINE_STATUSNull()
            Me(Me.tableRECIPE.RECIPE_LINE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_LINE_PARANull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.RECIPE_LINE_PARAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_LINE_PARANull()
            Me(Me.tableRECIPE.RECIPE_LINE_PARAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_IDENTNull()
            Me(Me.tableRECIPE.MAT_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NAMENull()
            Me(Me.tableRECIPE.MAT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PARANull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_PARAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PARANull()
            Me(Me.tableRECIPE.MAT_PARAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SETPOINTNull()
            Me(Me.tableRECIPE.MAT_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_CALCSETPNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_CALCSETPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_CALCSETPNull()
            Me(Me.tableRECIPE.MAT_CALCSETPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ACTVALUENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_ACTVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ACTVALUENull()
            Me(Me.tableRECIPE.MAT_ACTVALUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_UNITNull()
            Me(Me.tableRECIPE.MAT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DECIMALPOINTNull()
            Me(Me.tableRECIPE.MAT_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBREAKPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.BREAKPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBREAKPOINTNull()
            Me(Me.tableRECIPE.BREAKPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_CALCULATE_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_CALCULATE_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_CALCULATE_SETPOINTNull()
            Me(Me.tableRECIPE.MAT_CALCULATE_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.WP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_ADDRESSNull()
            Me(Me.tableRECIPE.WP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.WP_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_IDENTNull()
            Me(Me.tableRECIPE.WP_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.WP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_NAMENull()
            Me(Me.tableRECIPE.WP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_BATCH_MODENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_BATCH_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_BATCH_MODENull()
            Me(Me.tableRECIPE.MAT_BATCH_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SPM_INADRNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_SPM_INADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SPM_INADRNull()
            Me(Me.tableRECIPE.MAT_SPM_INADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SPM_OUTADRNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_SPM_OUTADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SPM_OUTADRNull()
            Me(Me.tableRECIPE.MAT_SPM_OUTADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ADD_TO_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_ADD_TO_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ADD_TO_TOTALNull()
            Me(Me.tableRECIPE.MAT_ADD_TO_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_BATCH_REPORTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_BATCH_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_BATCH_REPORTNull()
            Me(Me.tableRECIPE.MAT_BATCH_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PROD_REPORTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_PROD_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PROD_REPORTNull()
            Me(Me.tableRECIPE.MAT_PROD_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PRESETNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_PRESETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PRESETNull()
            Me(Me.tableRECIPE.MAT_PRESETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DISCHARGETIMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_DISCHARGETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DISCHARGETIMENull()
            Me(Me.tableRECIPE.MAT_DISCHARGETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_OVERSHOOTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_OVERSHOOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_OVERSHOOTNull()
            Me(Me.tableRECIPE.MAT_OVERSHOOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_FLOWRATENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_FLOWRATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_FLOWRATENull()
            Me(Me.tableRECIPE.MAT_FLOWRATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_POS_TOLNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_POS_TOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_POS_TOLNull()
            Me(Me.tableRECIPE.MAT_POS_TOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NEG_TOLNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_NEG_TOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NEG_TOLNull()
            Me(Me.tableRECIPE.MAT_NEG_TOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_CALMINGTIMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_CALMINGTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_CALMINGTIMENull()
            Me(Me.tableRECIPE.MAT_CALMINGTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_RESTART_MODENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_RESTART_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_RESTART_MODENull()
            Me(Me.tableRECIPE.MAT_RESTART_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_MAXNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_A1_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_MAXNull()
            Me(Me.tableRECIPE.MAT_A1_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_MINNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_A1_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_MINNull()
            Me(Me.tableRECIPE.MAT_A1_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_A1_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_UNITNull()
            Me(Me.tableRECIPE.MAT_A1_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ABORTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_ABORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ABORTNull()
            Me(Me.tableRECIPE.MAT_ABORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_TIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_TIMEOUTNull()
            Me(Me.tableRECIPE.MAT_TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_TOLERANCE_ALARMNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_TOLERANCE_ALARMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_TOLERANCE_ALARMNull()
            Me(Me.tableRECIPE.MAT_TOLERANCE_ALARMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ADC_ERRORNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_ADC_ERRORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ADC_ERRORNull()
            Me(Me.tableRECIPE.MAT_ADC_ERRORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SKIPNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_SKIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SKIPNull()
            Me(Me.tableRECIPE.MAT_SKIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_FLOW_ALARMNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_FLOW_ALARMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_FLOW_ALARMNull()
            Me(Me.tableRECIPE.MAT_FLOW_ALARMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_POS_TOL_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_POS_TOL_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_POS_TOL_UNITNull()
            Me(Me.tableRECIPE.MAT_POS_TOL_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NEG_TOL_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_NEG_TOL_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NEG_TOL_UNITNull()
            Me(Me.tableRECIPE.MAT_NEG_TOL_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ORDERNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_ORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ORDERNull()
            Me(Me.tableRECIPE.MAT_ORDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DELIVERYNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_DELIVERYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DELIVERYNull()
            Me(Me.tableRECIPE.MAT_DELIVERYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_LOTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_LOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_LOTNull()
            Me(Me.tableRECIPE.MAT_LOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DATETIMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_DATETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DATETIMENull()
            Me(Me.tableRECIPE.MAT_DATETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUBREC_STARTEDNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.SUBREC_STARTEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUBREC_STARTEDNull()
            Me(Me.tableRECIPE.SUBREC_STARTEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_REPORT_READYNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.MAT_REPORT_READYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_REPORT_READYNull()
            Me(Me.tableRECIPE.MAT_REPORT_READYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tableRECIPE.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_CICNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.SCRIPT_CICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_CICNull()
            Me(Me.tableRECIPE.SCRIPT_CICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_COD_SRCNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.SCRIPT_VAR_COD_SRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_COD_SRCNull()
            Me(Me.tableRECIPE.SCRIPT_VAR_COD_SRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_PRINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.LABEL_PRINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_PRINTNull()
            Me(Me.tableRECIPE.LABEL_PRINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_COPIESNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.LABEL_COPIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_COPIESNull()
            Me(Me.tableRECIPE.LABEL_COPIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE.LABEL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_NAMENull()
            Me(Me.tableRECIPE.LABEL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TMP_WP_MESSAGERow
        Inherits Global.System.Data.DataRow
        
        Private tableTMP_WP_MESSAGE As TMP_WP_MESSAGEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTMP_WP_MESSAGE = CType(Me.Table,TMP_WP_MESSAGEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_WP_MESSAGE.PRODLINE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODLINE_IDENT' in table 'TMP_WP_MESSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_WP_MESSAGE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MESSAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTMP_WP_MESSAGE.MESSAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MESSAGE' in table 'TMP_WP_MESSAGE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTMP_WP_MESSAGE.MESSAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODLINE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableTMP_WP_MESSAGE.PRODLINE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODLINE_IDENTNull()
            Me(Me.tableTMP_WP_MESSAGE.PRODLINE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMESSAGENull() As Boolean
            Return Me.IsNull(Me.tableTMP_WP_MESSAGE.MESSAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMESSAGENull()
            Me(Me.tableTMP_WP_MESSAGE.MESSAGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class USERRow
        Inherits Global.System.Data.DataRow
        
        Private tableUSER As USERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUSER = CType(Me.Table,USERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USER() As String
            Get
                Return CType(Me(Me.tableUSER.USERColumn),String)
            End Get
            Set
                Me(Me.tableUSER.USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PASSWORD() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSER.PASSWORDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PASSWORD' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.PASSWORDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCTION() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.PRODUCTIONColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODUCTION' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.PRODUCTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.RECIPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MATERIAL() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.MATERIALColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MATERIAL' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.MATERIALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property REPORT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.REPORTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REPORT' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEM() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.SYSTEMColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYSTEM' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.SYSTEMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIMEOUT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSER.TIMEOUTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TIMEOUT' in table 'USER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSER.TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPASSWORDNull() As Boolean
            Return Me.IsNull(Me.tableUSER.PASSWORDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPASSWORDNull()
            Me(Me.tableUSER.PASSWORDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODUCTIONNull() As Boolean
            Return Me.IsNull(Me.tableUSER.PRODUCTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODUCTIONNull()
            Me(Me.tableUSER.PRODUCTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPENull() As Boolean
            Return Me.IsNull(Me.tableUSER.RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPENull()
            Me(Me.tableUSER.RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMATERIALNull() As Boolean
            Return Me.IsNull(Me.tableUSER.MATERIALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMATERIALNull()
            Me(Me.tableUSER.MATERIALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsREPORTNull() As Boolean
            Return Me.IsNull(Me.tableUSER.REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetREPORTNull()
            Me(Me.tableUSER.REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSYSTEMNull() As Boolean
            Return Me.IsNull(Me.tableUSER.SYSTEMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSYSTEMNull()
            Me(Me.tableUSER.SYSTEMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tableUSER.TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTIMEOUTNull()
            Me(Me.tableUSER.TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WINDOWRow
        Inherits Global.System.Data.DataRow
        
        Private tableWINDOW As WINDOWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWINDOW = CType(Me.Table,WINDOWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FORM() As String
            Get
                Return CType(Me(Me.tableWINDOW.FORMColumn),String)
            End Get
            Set
                Me(Me.tableWINDOW.FORMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONTROL() As String
            Get
                Return CType(Me(Me.tableWINDOW.CONTROLColumn),String)
            End Get
            Set
                Me(Me.tableWINDOW.CONTROLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TOP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.TOPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOP' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.TOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LEFT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.LEFTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LEFT' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.LEFTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HEIGHT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.HEIGHTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEIGHT' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.HEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FONT_SIZE() As Single
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.FONT_SIZEColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FONT_SIZE' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.FONT_SIZEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property STATE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.STATEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATE' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.STATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL0_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL0_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL0_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL0_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL1_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL1_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL1_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL1_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL2_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL2_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL2_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL2_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL3_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL3_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL3_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL3_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL4_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL4_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL4_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL4_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL5_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL5_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL5_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL5_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL6_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL6_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL6_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL6_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL7_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL7_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL7_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL7_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL8_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL8_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL8_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL8_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL9_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL9_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL9_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL9_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL10_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL10_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL10_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL10_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL11_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL11_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL11_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL11_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL12_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL12_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL12_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL12_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL13_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL13_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL13_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL13_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL14_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL14_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL14_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL14_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL15_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL15_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL15_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL15_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL16_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL16_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL16_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL16_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL17_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL17_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL17_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL17_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL18_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL18_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL18_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL18_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL19_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL19_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL19_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL19_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL20_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL20_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL20_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL20_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL21_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL21_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL21_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL21_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL22_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL22_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL22_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL22_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL23_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL23_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL23_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL23_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL24_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL24_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL24_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL24_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COL25_WIDTH() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWINDOW.COL25_WIDTHColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COL25_WIDTH' in table 'WINDOW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWINDOW.COL25_WIDTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTOPNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.TOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTOPNull()
            Me(Me.tableWINDOW.TOPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLEFTNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.LEFTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLEFTNull()
            Me(Me.tableWINDOW.LEFTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWIDTHNull()
            Me(Me.tableWINDOW.WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.HEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHEIGHTNull()
            Me(Me.tableWINDOW.HEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFONT_SIZENull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.FONT_SIZEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFONT_SIZENull()
            Me(Me.tableWINDOW.FONT_SIZEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTATENull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.STATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTATENull()
            Me(Me.tableWINDOW.STATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL0_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL0_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL0_WIDTHNull()
            Me(Me.tableWINDOW.COL0_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL1_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL1_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL1_WIDTHNull()
            Me(Me.tableWINDOW.COL1_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL2_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL2_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL2_WIDTHNull()
            Me(Me.tableWINDOW.COL2_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL3_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL3_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL3_WIDTHNull()
            Me(Me.tableWINDOW.COL3_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL4_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL4_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL4_WIDTHNull()
            Me(Me.tableWINDOW.COL4_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL5_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL5_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL5_WIDTHNull()
            Me(Me.tableWINDOW.COL5_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL6_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL6_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL6_WIDTHNull()
            Me(Me.tableWINDOW.COL6_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL7_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL7_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL7_WIDTHNull()
            Me(Me.tableWINDOW.COL7_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL8_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL8_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL8_WIDTHNull()
            Me(Me.tableWINDOW.COL8_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL9_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL9_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL9_WIDTHNull()
            Me(Me.tableWINDOW.COL9_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL10_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL10_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL10_WIDTHNull()
            Me(Me.tableWINDOW.COL10_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL11_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL11_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL11_WIDTHNull()
            Me(Me.tableWINDOW.COL11_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL12_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL12_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL12_WIDTHNull()
            Me(Me.tableWINDOW.COL12_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL13_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL13_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL13_WIDTHNull()
            Me(Me.tableWINDOW.COL13_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL14_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL14_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL14_WIDTHNull()
            Me(Me.tableWINDOW.COL14_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL15_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL15_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL15_WIDTHNull()
            Me(Me.tableWINDOW.COL15_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL16_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL16_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL16_WIDTHNull()
            Me(Me.tableWINDOW.COL16_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL17_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL17_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL17_WIDTHNull()
            Me(Me.tableWINDOW.COL17_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL18_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL18_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL18_WIDTHNull()
            Me(Me.tableWINDOW.COL18_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL19_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL19_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL19_WIDTHNull()
            Me(Me.tableWINDOW.COL19_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL20_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL20_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL20_WIDTHNull()
            Me(Me.tableWINDOW.COL20_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL21_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL21_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL21_WIDTHNull()
            Me(Me.tableWINDOW.COL21_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL22_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL22_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL22_WIDTHNull()
            Me(Me.tableWINDOW.COL22_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL23_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL23_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL23_WIDTHNull()
            Me(Me.tableWINDOW.COL23_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL24_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL24_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL24_WIDTHNull()
            Me(Me.tableWINDOW.COL24_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOL25_WIDTHNull() As Boolean
            Return Me.IsNull(Me.tableWINDOW.COL25_WIDTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOL25_WIDTHNull()
            Me(Me.tableWINDOW.COL25_WIDTHColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class BATCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BATCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As BATCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As BATCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class LANGUAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LANGUAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As LANGUAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As LANGUAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINBATCHRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINBATCHRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINBATCHRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINBATCHRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINPROD_QUEUERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINPROD_QUEUERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINPROD_QUEUERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINPROD_QUEUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINPRODUCTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINPRODUCTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINPRODUCTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINPRODUCTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINRECIPELINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINRECIPELINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINRECIPELINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINRECIPELINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROD_QUEUERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROD_QUEUERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROD_QUEUERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROD_QUEUERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PRODUCTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PRODUCTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PRODUCTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RECIPERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RECIPERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RECIPERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RECIPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TMP_WP_MESSAGERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TMP_WP_MESSAGERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TMP_WP_MESSAGERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TMP_WP_MESSAGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class USERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As USERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As USERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As USERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WINDOWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WINDOWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WINDOWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WINDOWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace _840002C1DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BATCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BATCH"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("BATCH_NUMBER", "BATCH_NUMBER")
            tableMapping.ColumnMappings.Add("BATCH_SETPOINT", "BATCH_SETPOINT")
            tableMapping.ColumnMappings.Add("BATCH_ACTVALUE", "BATCH_ACTVALUE")
            tableMapping.ColumnMappings.Add("BATCH_UNIT", "BATCH_UNIT")
            tableMapping.ColumnMappings.Add("BATCH_DECIMALPOINT", "BATCH_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("BATCH_MAXRESOLU_DP", "BATCH_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("BREAKPOINT", "BREAKPOINT")
            tableMapping.ColumnMappings.Add("BATCH_ERRNUM", "BATCH_ERRNUM")
            tableMapping.ColumnMappings.Add("BATCH_ABORT", "BATCH_ABORT")
            tableMapping.ColumnMappings.Add("SEQUENCE_NUMBER", "SEQUENCE_NUMBER")
            tableMapping.ColumnMappings.Add("REPBATCH_NUMBER", "REPBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("BATCH_ACTIVE", "BATCH_ACTIVE")
            tableMapping.ColumnMappings.Add("BATCH_FACTOR", "BATCH_FACTOR")
            tableMapping.ColumnMappings.Add("BATCH_REPORT_READY", "BATCH_REPORT_READY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `BATCH` WHERE ((`PRODLINE_IDENT` = ?) AND (`BATCH_NUMBER` = ?) AND (("& _ 
                "? = 1 AND `BATCH_SETPOINT` IS NULL) OR (`BATCH_SETPOINT` = ?)) AND ((? = 1 AND `"& _ 
                "BATCH_ACTVALUE` IS NULL) OR (`BATCH_ACTVALUE` = ?)) AND ((? = 1 AND `BATCH_UNIT`"& _ 
                " IS NULL) OR (`BATCH_UNIT` = ?)) AND ((? = 1 AND `BATCH_DECIMALPOINT` IS NULL) O"& _ 
                "R (`BATCH_DECIMALPOINT` = ?)) AND ((? = 1 AND `BATCH_MAXRESOLU_DP` IS NULL) OR ("& _ 
                "`BATCH_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `BREAKPOINT` IS NULL) OR (`BREAKPOINT"& _ 
                "` = ?)) AND ((? = 1 AND `BATCH_ERRNUM` IS NULL) OR (`BATCH_ERRNUM` = ?)) AND ((?"& _ 
                " = 1 AND `BATCH_ABORT` IS NULL) OR (`BATCH_ABORT` = ?)) AND ((? = 1 AND `SEQUENC"& _ 
                "E_NUMBER` IS NULL) OR (`SEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `REPBATCH_NUMBER`"& _ 
                " IS NULL) OR (`REPBATCH_NUMBER` = ?)) AND ((? = 1 AND `BATCH_ACTIVE` IS NULL) OR"& _ 
                " (`BATCH_ACTIVE` = ?)) AND ((? = 1 AND `BATCH_FACTOR` IS NULL) OR (`BATCH_FACTOR"& _ 
                "` = ?)) AND ((? = 1 AND `BATCH_REPORT_READY` IS NULL) OR (`BATCH_REPORT_READY` ="& _ 
                " ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `BATCH` (`PRODLINE_IDENT`, `BATCH_NUMBER`, `BATCH_SETPOINT`, `BATCH_A"& _ 
                "CTVALUE`, `BATCH_UNIT`, `BATCH_DECIMALPOINT`, `BATCH_MAXRESOLU_DP`, `BREAKPOINT`"& _ 
                ", `BATCH_ERRNUM`, `BATCH_ABORT`, `SEQUENCE_NUMBER`, `REPBATCH_NUMBER`, `BATCH_AC"& _ 
                "TIVE`, `BATCH_FACTOR`, `BATCH_REPORT_READY`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `BATCH` SET `PRODLINE_IDENT` = ?, `BATCH_NUMBER` = ?, `BATCH_SETPOINT` = ?"& _ 
                ", `BATCH_ACTVALUE` = ?, `BATCH_UNIT` = ?, `BATCH_DECIMALPOINT` = ?, `BATCH_MAXRE"& _ 
                "SOLU_DP` = ?, `BREAKPOINT` = ?, `BATCH_ERRNUM` = ?, `BATCH_ABORT` = ?, `SEQUENCE"& _ 
                "_NUMBER` = ?, `REPBATCH_NUMBER` = ?, `BATCH_ACTIVE` = ?, `BATCH_FACTOR` = ?, `BA"& _ 
                "TCH_REPORT_READY` = ? WHERE ((`PRODLINE_IDENT` = ?) AND (`BATCH_NUMBER` = ?) AND"& _ 
                " ((? = 1 AND `BATCH_SETPOINT` IS NULL) OR (`BATCH_SETPOINT` = ?)) AND ((? = 1 AN"& _ 
                "D `BATCH_ACTVALUE` IS NULL) OR (`BATCH_ACTVALUE` = ?)) AND ((? = 1 AND `BATCH_UN"& _ 
                "IT` IS NULL) OR (`BATCH_UNIT` = ?)) AND ((? = 1 AND `BATCH_DECIMALPOINT` IS NULL"& _ 
                ") OR (`BATCH_DECIMALPOINT` = ?)) AND ((? = 1 AND `BATCH_MAXRESOLU_DP` IS NULL) O"& _ 
                "R (`BATCH_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `BREAKPOINT` IS NULL) OR (`BREAKPO"& _ 
                "INT` = ?)) AND ((? = 1 AND `BATCH_ERRNUM` IS NULL) OR (`BATCH_ERRNUM` = ?)) AND "& _ 
                "((? = 1 AND `BATCH_ABORT` IS NULL) OR (`BATCH_ABORT` = ?)) AND ((? = 1 AND `SEQU"& _ 
                "ENCE_NUMBER` IS NULL) OR (`SEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `REPBATCH_NUMB"& _ 
                "ER` IS NULL) OR (`REPBATCH_NUMBER` = ?)) AND ((? = 1 AND `BATCH_ACTIVE` IS NULL)"& _ 
                " OR (`BATCH_ACTIVE` = ?)) AND ((? = 1 AND `BATCH_FACTOR` IS NULL) OR (`BATCH_FAC"& _ 
                "TOR` = ?)) AND ((? = 1 AND `BATCH_REPORT_READY` IS NULL) OR (`BATCH_REPORT_READY"& _ 
                "` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_FACTOR", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_FACTOR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPORT_READY", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, BATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_UNIT, "& _ 
                "BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BREAKPOINT, BATCH_ERRNUM, BATCH_ABORT, S"& _ 
                "EQUENCE_NUMBER, REPBATCH_NUMBER, BATCH_ACTIVE, BATCH_FACTOR, BATCH_REPORT_READY "& _ 
                "FROM BATCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.BATCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.BATCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.BATCHDataTable = New _840002C1DataSet.BATCHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.BATCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "BATCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short), ByVal Original_BATCH_SETPOINT As Double, ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double), ByVal Original_BATCH_UNIT As String, ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal Original_BREAKPOINT As Boolean, ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short), ByVal Original_BATCH_ABORT As Boolean, ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer), ByVal Original_REPBATCH_NUMBER As Integer, ByVal Original_BATCH_ACTIVE As Boolean, ByVal Original_BATCH_FACTOR As Global.System.Nullable(Of Double), ByVal Original_BATCH_REPORT_READY As Boolean) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_BATCH_SETPOINT,Double)
            If (Original_BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_BATCH_UNIT,String)
            End If
            If (Original_BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_BREAKPOINT,Boolean)
            If (Original_BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_BATCH_ABORT,Boolean)
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_REPBATCH_NUMBER,Integer)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_BATCH_ACTIVE,Boolean)
            If (Original_BATCH_FACTOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_BATCH_FACTOR.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_BATCH_REPORT_READY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal BATCH_NUMBER As Global.System.Nullable(Of Short), ByVal BATCH_SETPOINT As Double, ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double), ByVal BATCH_UNIT As String, ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal BREAKPOINT As Boolean, ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short), ByVal BATCH_ABORT As Boolean, ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer), ByVal REPBATCH_NUMBER As Integer, ByVal BATCH_ACTIVE As Boolean, ByVal BATCH_FACTOR As Global.System.Nullable(Of Double), ByVal BATCH_REPORT_READY As Boolean) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(BATCH_SETPOINT,Double)
            If (BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BATCH_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BATCH_UNIT,String)
            End If
            If (BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(BREAKPOINT,Boolean)
            If (BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(BATCH_ABORT,Boolean)
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(REPBATCH_NUMBER,Integer)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(BATCH_ACTIVE,Boolean)
            If (BATCH_FACTOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(BATCH_FACTOR.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(BATCH_REPORT_READY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_SETPOINT As Double,  _
                    ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_UNIT As String,  _
                    ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ABORT As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal BATCH_ACTIVE As Boolean,  _
                    ByVal BATCH_FACTOR As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_REPORT_READY As Boolean,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_SETPOINT As Double,  _
                    ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_UNIT As String,  _
                    ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_BREAKPOINT As Boolean,  _
                    ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ABORT As Boolean,  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPBATCH_NUMBER As Integer,  _
                    ByVal Original_BATCH_ACTIVE As Boolean,  _
                    ByVal Original_BATCH_FACTOR As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_REPORT_READY As Boolean) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BATCH_SETPOINT,Double)
            If (BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BATCH_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BATCH_UNIT,String)
            End If
            If (BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BREAKPOINT,Boolean)
            If (BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(BATCH_ABORT,Boolean)
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(REPBATCH_NUMBER,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(BATCH_ACTIVE,Boolean)
            If (BATCH_FACTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(BATCH_FACTOR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(BATCH_REPORT_READY,Boolean)
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_BATCH_SETPOINT,Double)
            If (Original_BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_BATCH_UNIT,String)
            End If
            If (Original_BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_BREAKPOINT,Boolean)
            If (Original_BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_BATCH_ABORT,Boolean)
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_REPBATCH_NUMBER,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_BATCH_ACTIVE,Boolean)
            If (Original_BATCH_FACTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_BATCH_FACTOR.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_BATCH_REPORT_READY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal BATCH_SETPOINT As Double,  _
                    ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_UNIT As String,  _
                    ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ABORT As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal BATCH_ACTIVE As Boolean,  _
                    ByVal BATCH_FACTOR As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_REPORT_READY As Boolean,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_SETPOINT As Double,  _
                    ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_UNIT As String,  _
                    ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_BREAKPOINT As Boolean,  _
                    ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ABORT As Boolean,  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPBATCH_NUMBER As Integer,  _
                    ByVal Original_BATCH_ACTIVE As Boolean,  _
                    ByVal Original_BATCH_FACTOR As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_REPORT_READY As Boolean) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_BATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_UNIT, BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BREAKPOINT, BATCH_ERRNUM, BATCH_ABORT, SEQUENCE_NUMBER, REPBATCH_NUMBER, BATCH_ACTIVE, BATCH_FACTOR, BATCH_REPORT_READY, Original_PRODLINE_IDENT, Original_BATCH_NUMBER, Original_BATCH_SETPOINT, Original_BATCH_ACTVALUE, Original_BATCH_UNIT, Original_BATCH_DECIMALPOINT, Original_BATCH_MAXRESOLU_DP, Original_BREAKPOINT, Original_BATCH_ERRNUM, Original_BATCH_ABORT, Original_SEQUENCE_NUMBER, Original_REPBATCH_NUMBER, Original_BATCH_ACTIVE, Original_BATCH_FACTOR, Original_BATCH_REPORT_READY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LANGUAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "LANGUAGE"
            tableMapping.ColumnMappings.Add("ProBatch+", "ProBatch+")
            tableMapping.ColumnMappings.Add("English", "English")
            tableMapping.ColumnMappings.Add("English (US)", "English (US)")
            tableMapping.ColumnMappings.Add("Deutsch", "Deutsch")
            tableMapping.ColumnMappings.Add("Français", "Français")
            tableMapping.ColumnMappings.Add("Nederlands", "Nederlands")
            tableMapping.ColumnMappings.Add("Svensk", "Svensk")
            tableMapping.ColumnMappings.Add("Italiano", "Italiano")
            tableMapping.ColumnMappings.Add("Español", "Español")
            tableMapping.ColumnMappings.Add("Português", "Português")
            tableMapping.ColumnMappings.Add("Suomi", "Suomi")
            tableMapping.ColumnMappings.Add("Dansk", "Dansk")
            tableMapping.ColumnMappings.Add("Polski", "Polski")
            tableMapping.ColumnMappings.Add("Greek", "Greek")
            tableMapping.ColumnMappings.Add("Russian", "Russian")
            tableMapping.ColumnMappings.Add("Turkish", "Turkish")
            tableMapping.ColumnMappings.Add("*", "*")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `LANGUAGE` (`ProBatch+`, `English`, `English (US)`, `Deutsch`, `Franç"& _ 
                "ais`, `Nederlands`, `Svensk`, `Italiano`, `Español`, `Português`, `Suomi`, `Dans"& _ 
                "k`, `Polski`, `Greek`, `Russian`, `Turkish`, `*`) VALUES (?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ProBatch+", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ProBatch+", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("English", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "English", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("English_(US)", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "English (US)", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Deutsch", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deutsch", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Français", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Français", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Nederlands", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Nederlands", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Svensk", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Svensk", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Italiano", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Italiano", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Español", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Español", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Português", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Português", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Suomi", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Suomi", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Dansk", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Dansk", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Polski", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Polski", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Greek", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Greek", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Russian", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Russian", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Turkish", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turkish", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("*", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "*", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [ProBatch+], English, [English (US)], Deutsch, Français, Nederlands, Svens"& _ 
                "k, Italiano, Español, Português, Suomi, Dansk, Polski, Greek, Russian, Turkish, "& _ 
                "[*] FROM [LANGUAGE]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.LANGUAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.LANGUAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.LANGUAGEDataTable = New _840002C1DataSet.LANGUAGEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.LANGUAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "LANGUAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal _ProBatch_ As String,  _
                    ByVal English As String,  _
                    ByVal _English__US_ As String,  _
                    ByVal Deutsch As String,  _
                    ByVal Français As String,  _
                    ByVal Nederlands As String,  _
                    ByVal Svensk As String,  _
                    ByVal Italiano As String,  _
                    ByVal Español As String,  _
                    ByVal Português As String,  _
                    ByVal Suomi As String,  _
                    ByVal Dansk As String,  _
                    ByVal Polski As String,  _
                    ByVal Greek As String,  _
                    ByVal Russian As String,  _
                    ByVal Turkish As String,  _
                    ByVal __ As String) As Integer
            If (_ProBatch_ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(_ProBatch_,String)
            End If
            If (English Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(English,String)
            End If
            If (_English__US_ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_English__US_,String)
            End If
            If (Deutsch Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Deutsch,String)
            End If
            If (Français Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Français,String)
            End If
            If (Nederlands Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Nederlands,String)
            End If
            If (Svensk Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Svensk,String)
            End If
            If (Italiano Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Italiano,String)
            End If
            If (Español Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Español,String)
            End If
            If (Português Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Português,String)
            End If
            If (Suomi Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Suomi,String)
            End If
            If (Dansk Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Dansk,String)
            End If
            If (Polski Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Polski,String)
            End If
            If (Greek Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Greek,String)
            End If
            If (Russian Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Russian,String)
            End If
            If (Turkish Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Turkish,String)
            End If
            If (__ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(__,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINBATCHTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINBATCH"
            tableMapping.ColumnMappings.Add("MAINPROD_NUMBER", "MAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("MAINBATCH_NUMBER", "MAINBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("BATCH_SETPOINT", "BATCH_SETPOINT")
            tableMapping.ColumnMappings.Add("BATCH_ACTVALUE", "BATCH_ACTVALUE")
            tableMapping.ColumnMappings.Add("BATCH_UNIT", "BATCH_UNIT")
            tableMapping.ColumnMappings.Add("BATCH_DECIMALPOINT", "BATCH_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("BATCH_MAXRESOLU_DP", "BATCH_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("BATCH_ERRNUM", "BATCH_ERRNUM")
            tableMapping.ColumnMappings.Add("BATCH_ABORT", "BATCH_ABORT")
            tableMapping.ColumnMappings.Add("BATCH_DONE", "BATCH_DONE")
            tableMapping.ColumnMappings.Add("BATCH_STATUS", "BATCH_STATUS")
            tableMapping.ColumnMappings.Add("REPMAINBATCH_NUMBER", "REPMAINBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("MAINSEQUENCE_NUMBER", "MAINSEQUENCE_NUMBER")
            tableMapping.ColumnMappings.Add("BREAKPOINT", "BREAKPOINT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINBATCH` WHERE ((`MAINPROD_NUMBER` = ?) AND (`MAINBATCH_NUMBER` = "& _ 
                "?) AND ((? = 1 AND `BATCH_SETPOINT` IS NULL) OR (`BATCH_SETPOINT` = ?)) AND ((? "& _ 
                "= 1 AND `BATCH_ACTVALUE` IS NULL) OR (`BATCH_ACTVALUE` = ?)) AND ((? = 1 AND `BA"& _ 
                "TCH_UNIT` IS NULL) OR (`BATCH_UNIT` = ?)) AND ((? = 1 AND `BATCH_DECIMALPOINT` I"& _ 
                "S NULL) OR (`BATCH_DECIMALPOINT` = ?)) AND ((? = 1 AND `BATCH_MAXRESOLU_DP` IS N"& _ 
                "ULL) OR (`BATCH_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `BATCH_ERRNUM` IS NULL) OR ("& _ 
                "`BATCH_ERRNUM` = ?)) AND ((? = 1 AND `BATCH_ABORT` IS NULL) OR (`BATCH_ABORT` = "& _ 
                "?)) AND ((? = 1 AND `BATCH_DONE` IS NULL) OR (`BATCH_DONE` = ?)) AND ((? = 1 AND"& _ 
                " `BATCH_STATUS` IS NULL) OR (`BATCH_STATUS` = ?)) AND ((? = 1 AND `REPMAINBATCH_"& _ 
                "NUMBER` IS NULL) OR (`REPMAINBATCH_NUMBER` = ?)) AND ((? = 1 AND `MAINSEQUENCE_N"& _ 
                "UMBER` IS NULL) OR (`MAINSEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `BREAKPOINT` IS "& _ 
                "NULL) OR (`BREAKPOINT` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINBATCH` (`MAINPROD_NUMBER`, `MAINBATCH_NUMBER`, `BATCH_SETPOINT`,"& _ 
                " `BATCH_ACTVALUE`, `BATCH_UNIT`, `BATCH_DECIMALPOINT`, `BATCH_MAXRESOLU_DP`, `BA"& _ 
                "TCH_ERRNUM`, `BATCH_ABORT`, `BATCH_DONE`, `BATCH_STATUS`, `REPMAINBATCH_NUMBER`,"& _ 
                " `MAINSEQUENCE_NUMBER`, `BREAKPOINT`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINBATCH` SET `MAINPROD_NUMBER` = ?, `MAINBATCH_NUMBER` = ?, `BATCH_SETP"& _ 
                "OINT` = ?, `BATCH_ACTVALUE` = ?, `BATCH_UNIT` = ?, `BATCH_DECIMALPOINT` = ?, `BA"& _ 
                "TCH_MAXRESOLU_DP` = ?, `BATCH_ERRNUM` = ?, `BATCH_ABORT` = ?, `BATCH_DONE` = ?, "& _ 
                "`BATCH_STATUS` = ?, `REPMAINBATCH_NUMBER` = ?, `MAINSEQUENCE_NUMBER` = ?, `BREAK"& _ 
                "POINT` = ? WHERE ((`MAINPROD_NUMBER` = ?) AND (`MAINBATCH_NUMBER` = ?) AND ((? ="& _ 
                " 1 AND `BATCH_SETPOINT` IS NULL) OR (`BATCH_SETPOINT` = ?)) AND ((? = 1 AND `BAT"& _ 
                "CH_ACTVALUE` IS NULL) OR (`BATCH_ACTVALUE` = ?)) AND ((? = 1 AND `BATCH_UNIT` IS"& _ 
                " NULL) OR (`BATCH_UNIT` = ?)) AND ((? = 1 AND `BATCH_DECIMALPOINT` IS NULL) OR ("& _ 
                "`BATCH_DECIMALPOINT` = ?)) AND ((? = 1 AND `BATCH_MAXRESOLU_DP` IS NULL) OR (`BA"& _ 
                "TCH_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `BATCH_ERRNUM` IS NULL) OR (`BATCH_ERRNU"& _ 
                "M` = ?)) AND ((? = 1 AND `BATCH_ABORT` IS NULL) OR (`BATCH_ABORT` = ?)) AND ((? "& _ 
                "= 1 AND `BATCH_DONE` IS NULL) OR (`BATCH_DONE` = ?)) AND ((? = 1 AND `BATCH_STAT"& _ 
                "US` IS NULL) OR (`BATCH_STATUS` = ?)) AND ((? = 1 AND `REPMAINBATCH_NUMBER` IS N"& _ 
                "ULL) OR (`REPMAINBATCH_NUMBER` = ?)) AND ((? = 1 AND `MAINSEQUENCE_NUMBER` IS NU"& _ 
                "LL) OR (`MAINSEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `BREAKPOINT` IS NULL) OR (`B"& _ 
                "REAKPOINT` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ERRNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_DONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINPROD_NUMBER, MAINBATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_U"& _ 
                "NIT, BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BATCH_ERRNUM, BATCH_ABORT, BATCH_DO"& _ 
                "NE, BATCH_STATUS, REPMAINBATCH_NUMBER, MAINSEQUENCE_NUMBER, BREAKPOINT FROM MAIN"& _ 
                "BATCH"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.MAINBATCHDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.MAINBATCHDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.MAINBATCHDataTable = New _840002C1DataSet.MAINBATCHDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.MAINBATCHDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINBATCH")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer), ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short), ByVal Original_BATCH_SETPOINT As Double, ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double), ByVal Original_BATCH_UNIT As String, ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short), ByVal Original_BATCH_ABORT As Boolean, ByVal Original_BATCH_DONE As Boolean, ByVal Original_BATCH_STATUS As Global.System.Nullable(Of Short), ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer), ByVal Original_MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer), ByVal Original_BREAKPOINT As Boolean) As Integer
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_BATCH_SETPOINT,Double)
            If (Original_BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_BATCH_UNIT,String)
            End If
            If (Original_BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_BATCH_ABORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_BATCH_DONE,Boolean)
            If (Original_BATCH_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_BATCH_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINSEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_MAINSEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_BREAKPOINT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer), ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short), ByVal BATCH_SETPOINT As Double, ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double), ByVal BATCH_UNIT As String, ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short), ByVal BATCH_ABORT As Boolean, ByVal BATCH_DONE As Boolean, ByVal BATCH_STATUS As Global.System.Nullable(Of Short), ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer), ByVal MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer), ByVal BREAKPOINT As Boolean) As Integer
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(BATCH_SETPOINT,Double)
            If (BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BATCH_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BATCH_UNIT,String)
            End If
            If (BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(BATCH_ABORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(BATCH_DONE,Boolean)
            If (BATCH_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(BATCH_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAINSEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MAINSEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(BREAKPOINT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_SETPOINT As Double,  _
                    ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_UNIT As String,  _
                    ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ABORT As Boolean,  _
                    ByVal BATCH_DONE As Boolean,  _
                    ByVal BATCH_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_SETPOINT As Double,  _
                    ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_UNIT As String,  _
                    ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ABORT As Boolean,  _
                    ByVal Original_BATCH_DONE As Boolean,  _
                    ByVal Original_BATCH_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BREAKPOINT As Boolean) As Integer
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(BATCH_SETPOINT,Double)
            If (BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BATCH_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BATCH_UNIT,String)
            End If
            If (BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(BATCH_ABORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(BATCH_DONE,Boolean)
            If (BATCH_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(BATCH_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAINSEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MAINSEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(BREAKPOINT,Boolean)
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_BATCH_SETPOINT,Double)
            If (Original_BATCH_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_BATCH_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_BATCH_UNIT,String)
            End If
            If (Original_BATCH_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_BATCH_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_BATCH_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_BATCH_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_BATCH_ERRNUM.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_BATCH_ABORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_BATCH_DONE,Boolean)
            If (Original_BATCH_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_BATCH_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINSEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_MAINSEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_BREAKPOINT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal BATCH_SETPOINT As Double,  _
                    ByVal BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal BATCH_UNIT As String,  _
                    ByVal BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal BATCH_ABORT As Boolean,  _
                    ByVal BATCH_DONE As Boolean,  _
                    ByVal BATCH_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_SETPOINT As Double,  _
                    ByVal Original_BATCH_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_BATCH_UNIT As String,  _
                    ByVal Original_BATCH_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ERRNUM As Global.System.Nullable(Of Short),  _
                    ByVal Original_BATCH_ABORT As Boolean,  _
                    ByVal Original_BATCH_DONE As Boolean,  _
                    ByVal Original_BATCH_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_BREAKPOINT As Boolean) As Integer
            Return Me.Update(Original_MAINPROD_NUMBER, Original_MAINBATCH_NUMBER, BATCH_SETPOINT, BATCH_ACTVALUE, BATCH_UNIT, BATCH_DECIMALPOINT, BATCH_MAXRESOLU_DP, BATCH_ERRNUM, BATCH_ABORT, BATCH_DONE, BATCH_STATUS, REPMAINBATCH_NUMBER, MAINSEQUENCE_NUMBER, BREAKPOINT, Original_MAINPROD_NUMBER, Original_MAINBATCH_NUMBER, Original_BATCH_SETPOINT, Original_BATCH_ACTVALUE, Original_BATCH_UNIT, Original_BATCH_DECIMALPOINT, Original_BATCH_MAXRESOLU_DP, Original_BATCH_ERRNUM, Original_BATCH_ABORT, Original_BATCH_DONE, Original_BATCH_STATUS, Original_REPMAINBATCH_NUMBER, Original_MAINSEQUENCE_NUMBER, Original_BREAKPOINT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINPROD_QUEUETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINPROD_QUEUE"
            tableMapping.ColumnMappings.Add("PROD_NUMBER", "PROD_NUMBER")
            tableMapping.ColumnMappings.Add("START_DATETIME", "START_DATETIME")
            tableMapping.ColumnMappings.Add("MAINRECIPE_IDENT", "MAINRECIPE_IDENT")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_USER", "PROD_USER")
            tableMapping.ColumnMappings.Add("PROD_START_SYNCHRON", "PROD_START_SYNCHRON")
            tableMapping.ColumnMappings.Add("PROD_CYCLE", "PROD_CYCLE")
            tableMapping.ColumnMappings.Add("MAINPLAN_IDENT", "MAINPLAN_IDENT")
            tableMapping.ColumnMappings.Add("MAINPLAN_LINE", "MAINPLAN_LINE")
            tableMapping.ColumnMappings.Add("PROD_PCAUTOSTART", "PROD_PCAUTOSTART")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINPROD_QUEUE` WHERE ((`PROD_NUMBER` = ?) AND (`START_DATETIME` = ?"& _ 
                ") AND ((? = 1 AND `MAINRECIPE_IDENT` IS NULL) OR (`MAINRECIPE_IDENT` = ?)) AND ("& _ 
                "(? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `P"& _ 
                "ROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) "& _ 
                "OR (`ORDER_IDENT` = ?)) AND ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_"& _ 
                "IDENT` = ?)) AND ((? = 1 AND `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = "& _ 
                "1 AND `PROD_USER` IS NULL) OR (`PROD_USER` = ?)) AND ((? = 1 AND `PROD_START_SYN"& _ 
                "CHRON` IS NULL) OR (`PROD_START_SYNCHRON` = ?)) AND ((? = 1 AND `PROD_CYCLE` IS "& _ 
                "NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND `MAINPLAN_IDENT` IS NULL) OR (`MAIN"& _ 
                "PLAN_IDENT` = ?)) AND ((? = 1 AND `MAINPLAN_LINE` IS NULL) OR (`MAINPLAN_LINE` ="& _ 
                " ?)) AND ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR (`PROD_PCAUTOSTART` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINPROD_QUEUE` (`START_DATETIME`, `MAINRECIPE_IDENT`, `PROD_SETPOIN"& _ 
                "T`, `PROD_UNIT`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_NUM`, `PROD_USER`, `PROD"& _ 
                "_START_SYNCHRON`, `PROD_CYCLE`, `MAINPLAN_IDENT`, `MAINPLAN_LINE`, `PROD_PCAUTOS"& _ 
                "TART`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINPROD_QUEUE` SET `START_DATETIME` = ?, `MAINRECIPE_IDENT` = ?, `PROD_S"& _ 
                "ETPOINT` = ?, `PROD_UNIT` = ?, `ORDER_IDENT` = ?, `CUSTOMER_IDENT` = ?, `PROD_NU"& _ 
                "M` = ?, `PROD_USER` = ?, `PROD_START_SYNCHRON` = ?, `PROD_CYCLE` = ?, `MAINPLAN_"& _ 
                "IDENT` = ?, `MAINPLAN_LINE` = ?, `PROD_PCAUTOSTART` = ? WHERE ((`PROD_NUMBER` = "& _ 
                "?) AND (`START_DATETIME` = ?) AND ((? = 1 AND `MAINRECIPE_IDENT` IS NULL) OR (`M"& _ 
                "AINRECIPE_IDENT` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PROD_SETPOI"& _ 
                "NT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AND ((? = 1"& _ 
                " AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ((? = 1 AND `CUSTOMER_ID"& _ 
                "ENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `PROD_NUM` IS NULL) OR "& _ 
                "(`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_USER` IS NULL) OR (`PROD_USER` = ?)) AND"& _ 
                " ((? = 1 AND `PROD_START_SYNCHRON` IS NULL) OR (`PROD_START_SYNCHRON` = ?)) AND "& _ 
                "((? = 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND `MAINPL"& _ 
                "AN_IDENT` IS NULL) OR (`MAINPLAN_IDENT` = ?)) AND ((? = 1 AND `MAINPLAN_LINE` IS"& _ 
                " NULL) OR (`MAINPLAN_LINE` = ?)) AND ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR "& _ 
                "(`PROD_PCAUTOSTART` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROD_NUMBER, START_DATETIME, MAINRECIPE_IDENT, PROD_SETPOINT, PROD_UNIT, O"& _ 
                "RDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_USER, PROD_START_SYNCHRON, PROD_CYCLE"& _ 
                ", MAINPLAN_IDENT, MAINPLAN_LINE, PROD_PCAUTOSTART FROM MAINPROD_QUEUE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.MAINPROD_QUEUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.MAINPROD_QUEUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.MAINPROD_QUEUEDataTable = New _840002C1DataSet.MAINPROD_QUEUEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.MAINPROD_QUEUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINPROD_QUEUE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROD_NUMBER As Integer, ByVal Original_START_DATETIME As Global.System.Nullable(Of Date), ByVal Original_MAINRECIPE_IDENT As String, ByVal Original_PROD_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_PROD_UNIT As String, ByVal Original_ORDER_IDENT As String, ByVal Original_CUSTOMER_IDENT As String, ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer), ByVal Original_PROD_USER As String, ByVal Original_PROD_START_SYNCHRON As Boolean, ByVal Original_PROD_CYCLE As Short, ByVal Original_MAINPLAN_IDENT As String, ByVal Original_MAINPLAN_LINE As Short, ByVal Original_PROD_PCAUTOSTART As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROD_NUMBER,Integer)
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PROD_START_SYNCHRON,Boolean)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_PROD_CYCLE,Short)
            If (Original_MAINPLAN_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_MAINPLAN_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_MAINPLAN_LINE,Short)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal START_DATETIME As Global.System.Nullable(Of Date), ByVal MAINRECIPE_IDENT As String, ByVal PROD_SETPOINT As Global.System.Nullable(Of Double), ByVal PROD_UNIT As String, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Global.System.Nullable(Of Integer), ByVal PROD_USER As String, ByVal PROD_START_SYNCHRON As Boolean, ByVal PROD_CYCLE As Short, ByVal MAINPLAN_IDENT As String, ByVal MAINPLAN_LINE As Short, ByVal PROD_PCAUTOSTART As Boolean) As Integer
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PROD_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PROD_UNIT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PROD_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROD_START_SYNCHRON,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PROD_CYCLE,Short)
            If (MAINPLAN_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MAINPLAN_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(MAINPLAN_LINE,Short)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(PROD_PCAUTOSTART,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal PROD_UNIT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_USER As String,  _
                    ByVal PROD_START_SYNCHRON As Boolean,  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal MAINPLAN_IDENT As String,  _
                    ByVal MAINPLAN_LINE As Short,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_NUMBER As Integer,  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_PROD_START_SYNCHRON As Boolean,  _
                    ByVal Original_PROD_CYCLE As Short,  _
                    ByVal Original_MAINPLAN_IDENT As String,  _
                    ByVal Original_MAINPLAN_LINE As Short,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean) As Integer
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PROD_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PROD_UNIT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROD_START_SYNCHRON,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PROD_CYCLE,Short)
            If (MAINPLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(MAINPLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MAINPLAN_LINE,Short)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PROD_PCAUTOSTART,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PROD_NUMBER,Integer)
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PROD_START_SYNCHRON,Boolean)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PROD_CYCLE,Short)
            If (Original_MAINPLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_MAINPLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_MAINPLAN_LINE,Short)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal PROD_UNIT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_USER As String,  _
                    ByVal PROD_START_SYNCHRON As Boolean,  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal MAINPLAN_IDENT As String,  _
                    ByVal MAINPLAN_LINE As Short,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_NUMBER As Integer,  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_PROD_START_SYNCHRON As Boolean,  _
                    ByVal Original_PROD_CYCLE As Short,  _
                    ByVal Original_MAINPLAN_IDENT As String,  _
                    ByVal Original_MAINPLAN_LINE As Short,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean) As Integer
            Return Me.Update(Original_START_DATETIME, MAINRECIPE_IDENT, PROD_SETPOINT, PROD_UNIT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_USER, PROD_START_SYNCHRON, PROD_CYCLE, MAINPLAN_IDENT, MAINPLAN_LINE, PROD_PCAUTOSTART, Original_PROD_NUMBER, Original_START_DATETIME, Original_MAINRECIPE_IDENT, Original_PROD_SETPOINT, Original_PROD_UNIT, Original_ORDER_IDENT, Original_CUSTOMER_IDENT, Original_PROD_NUM, Original_PROD_USER, Original_PROD_START_SYNCHRON, Original_PROD_CYCLE, Original_MAINPLAN_IDENT, Original_MAINPLAN_LINE, Original_PROD_PCAUTOSTART)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINPRODUCTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINPRODUCTION"
            tableMapping.ColumnMappings.Add("MAINPROD_NUMBER", "MAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("MAINRECIPE_IDENT", "MAINRECIPE_IDENT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_NAME", "MAINRECIPE_NAME")
            tableMapping.ColumnMappings.Add("MAINRECIPE_CREATE_DATE", "MAINRECIPE_CREATE_DATE")
            tableMapping.ColumnMappings.Add("MAINRECIPE_CHANGE_DATE", "MAINRECIPE_CHANGE_DATE")
            tableMapping.ColumnMappings.Add("MAINRECIPE_USER", "MAINRECIPE_USER")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT", "MAINRECIPE_TIMEOUT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT_ENABLED", "MAINRECIPE_TIMEOUT_ENABLED")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT_TIME", "MAINRECIPE_TIMEOUT_TIME")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT_ACTIVE", "MAINRECIPE_TIMEOUT_ACTIVE")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_ACTVALUE", "PROD_ACTVALUE")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("PROD_DECIMALPOINT", "PROD_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("PROD_MAXRESOLU_DP", "PROD_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_USER", "PROD_USER")
            tableMapping.ColumnMappings.Add("PROD_START_SYNCHRON", "PROD_START_SYNCHRON")
            tableMapping.ColumnMappings.Add("BATCH_MAXNUM", "BATCH_MAXNUM")
            tableMapping.ColumnMappings.Add("PROD_STATUS", "PROD_STATUS")
            tableMapping.ColumnMappings.Add("REPMAINPROD_NUMBER", "REPMAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("LOG_REPORT", "LOG_REPORT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINPRODUCTION` WHERE ((`MAINPROD_NUMBER` = ?) AND ((? = 1 AND `MAIN"& _ 
                "RECIPE_IDENT` IS NULL) OR (`MAINRECIPE_IDENT` = ?)) AND ((? = 1 AND `MAINRECIPE_"& _ 
                "NAME` IS NULL) OR (`MAINRECIPE_NAME` = ?)) AND ((? = 1 AND `MAINRECIPE_CREATE_DA"& _ 
                "TE` IS NULL) OR (`MAINRECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND `MAINRECIPE_CHAN"& _ 
                "GE_DATE` IS NULL) OR (`MAINRECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND `MAINRECIPE"& _ 
                "_USER` IS NULL) OR (`MAINRECIPE_USER` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT`"& _ 
                " IS NULL) OR (`MAINRECIPE_TIMEOUT` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT_ENA"& _ 
                "BLED` IS NULL) OR (`MAINRECIPE_TIMEOUT_ENABLED` = ?)) AND ((? = 1 AND `MAINRECIP"& _ 
                "E_TIMEOUT_TIME` IS NULL) OR (`MAINRECIPE_TIMEOUT_TIME` = ?)) AND ((? = 1 AND `MA"& _ 
                "INRECIPE_TIMEOUT_ACTIVE` IS NULL) OR (`MAINRECIPE_TIMEOUT_ACTIVE` = ?)) AND ((? "& _ 
                "= 1 AND `PROD_SETPOINT` IS NULL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD"& _ 
                "_ACTVALUE` IS NULL) OR (`PROD_ACTVALUE` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NUL"& _ 
                "L) OR (`PROD_UNIT` = ?)) AND ((? = 1 AND `PROD_DECIMALPOINT` IS NULL) OR (`PROD_"& _ 
                "DECIMALPOINT` = ?)) AND ((? = 1 AND `PROD_MAXRESOLU_DP` IS NULL) OR (`PROD_MAXRE"& _ 
                "SOLU_DP` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AN"& _ 
                "D ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 A"& _ 
                "ND `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_USER` IS NULL)"& _ 
                " OR (`PROD_USER` = ?)) AND ((? = 1 AND `PROD_START_SYNCHRON` IS NULL) OR (`PROD_"& _ 
                "START_SYNCHRON` = ?)) AND ((? = 1 AND `BATCH_MAXNUM` IS NULL) OR (`BATCH_MAXNUM`"& _ 
                " = ?)) AND ((? = 1 AND `PROD_STATUS` IS NULL) OR (`PROD_STATUS` = ?)) AND ((? = "& _ 
                "1 AND `REPMAINPROD_NUMBER` IS NULL) OR (`REPMAINPROD_NUMBER` = ?)) AND ((? = 1 A"& _ 
                "ND `LOG_REPORT` IS NULL) OR (`LOG_REPORT` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINPRODUCTION` (`MAINRECIPE_IDENT`, `MAINRECIPE_NAME`, `MAINRECIPE_"& _ 
                "CREATE_DATE`, `MAINRECIPE_CHANGE_DATE`, `MAINRECIPE_USER`, `MAINRECIPE_TIMEOUT`,"& _ 
                " `MAINRECIPE_TIMEOUT_ENABLED`, `MAINRECIPE_TIMEOUT_TIME`, `MAINRECIPE_TIMEOUT_AC"& _ 
                "TIVE`, `PROD_SETPOINT`, `PROD_ACTVALUE`, `PROD_UNIT`, `PROD_DECIMALPOINT`, `PROD"& _ 
                "_MAXRESOLU_DP`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_NUM`, `PROD_USER`, `PROD_"& _ 
                "START_SYNCHRON`, `BATCH_MAXNUM`, `PROD_STATUS`, `REPMAINPROD_NUMBER`, `LOG_REPOR"& _ 
                "T`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINPRODUCTION` SET `MAINRECIPE_IDENT` = ?, `MAINRECIPE_NAME` = ?, `MAINR"& _ 
                "ECIPE_CREATE_DATE` = ?, `MAINRECIPE_CHANGE_DATE` = ?, `MAINRECIPE_USER` = ?, `MA"& _ 
                "INRECIPE_TIMEOUT` = ?, `MAINRECIPE_TIMEOUT_ENABLED` = ?, `MAINRECIPE_TIMEOUT_TIM"& _ 
                "E` = ?, `MAINRECIPE_TIMEOUT_ACTIVE` = ?, `PROD_SETPOINT` = ?, `PROD_ACTVALUE` = "& _ 
                "?, `PROD_UNIT` = ?, `PROD_DECIMALPOINT` = ?, `PROD_MAXRESOLU_DP` = ?, `ORDER_IDE"& _ 
                "NT` = ?, `CUSTOMER_IDENT` = ?, `PROD_NUM` = ?, `PROD_USER` = ?, `PROD_START_SYNC"& _ 
                "HRON` = ?, `BATCH_MAXNUM` = ?, `PROD_STATUS` = ?, `REPMAINPROD_NUMBER` = ?, `LOG"& _ 
                "_REPORT` = ? WHERE ((`MAINPROD_NUMBER` = ?) AND ((? = 1 AND `MAINRECIPE_IDENT` I"& _ 
                "S NULL) OR (`MAINRECIPE_IDENT` = ?)) AND ((? = 1 AND `MAINRECIPE_NAME` IS NULL) "& _ 
                "OR (`MAINRECIPE_NAME` = ?)) AND ((? = 1 AND `MAINRECIPE_CREATE_DATE` IS NULL) OR"& _ 
                " (`MAINRECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND `MAINRECIPE_CHANGE_DATE` IS NUL"& _ 
                "L) OR (`MAINRECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND `MAINRECIPE_USER` IS NULL)"& _ 
                " OR (`MAINRECIPE_USER` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT` IS NULL) OR (`"& _ 
                "MAINRECIPE_TIMEOUT` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT_ENABLED` IS NULL) "& _ 
                "OR (`MAINRECIPE_TIMEOUT_ENABLED` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT_TIME`"& _ 
                " IS NULL) OR (`MAINRECIPE_TIMEOUT_TIME` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOU"& _ 
                "T_ACTIVE` IS NULL) OR (`MAINRECIPE_TIMEOUT_ACTIVE` = ?)) AND ((? = 1 AND `PROD_S"& _ 
                "ETPOINT` IS NULL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_ACTVALUE` IS N"& _ 
                "ULL) OR (`PROD_ACTVALUE` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UN"& _ 
                "IT` = ?)) AND ((? = 1 AND `PROD_DECIMALPOINT` IS NULL) OR (`PROD_DECIMALPOINT` ="& _ 
                " ?)) AND ((? = 1 AND `PROD_MAXRESOLU_DP` IS NULL) OR (`PROD_MAXRESOLU_DP` = ?)) "& _ 
                "AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ((? = 1 AND `"& _ 
                "CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `PROD_NUM` I"& _ 
                "S NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_USER` IS NULL) OR (`PROD_USER"& _ 
                "` = ?)) AND ((? = 1 AND `PROD_START_SYNCHRON` IS NULL) OR (`PROD_START_SYNCHRON`"& _ 
                " = ?)) AND ((? = 1 AND `BATCH_MAXNUM` IS NULL) OR (`BATCH_MAXNUM` = ?)) AND ((? "& _ 
                "= 1 AND `PROD_STATUS` IS NULL) OR (`PROD_STATUS` = ?)) AND ((? = 1 AND `REPMAINP"& _ 
                "ROD_NUMBER` IS NULL) OR (`REPMAINPROD_NUMBER` = ?)) AND ((? = 1 AND `LOG_REPORT`"& _ 
                " IS NULL) OR (`LOG_REPORT` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_TIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_TIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ACTIVE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINPROD_NUMBER, MAINRECIPE_IDENT, MAINRECIPE_NAME, MAINRECIPE_CREATE_DATE"& _ 
                ", MAINRECIPE_CHANGE_DATE, MAINRECIPE_USER, MAINRECIPE_TIMEOUT, MAINRECIPE_TIMEOU"& _ 
                "T_ENABLED, MAINRECIPE_TIMEOUT_TIME, MAINRECIPE_TIMEOUT_ACTIVE, PROD_SETPOINT, PR"& _ 
                "OD_ACTVALUE, PROD_UNIT, PROD_DECIMALPOINT, PROD_MAXRESOLU_DP, ORDER_IDENT, CUSTO"& _ 
                "MER_IDENT, PROD_NUM, PROD_USER, PROD_START_SYNCHRON, BATCH_MAXNUM, PROD_STATUS, "& _ 
                "REPMAINPROD_NUMBER, LOG_REPORT FROM MAINPRODUCTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.MAINPRODUCTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.MAINPRODUCTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.MAINPRODUCTIONDataTable = New _840002C1DataSet.MAINPRODUCTIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.MAINPRODUCTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINPRODUCTION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MAINPROD_NUMBER As Integer,  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_MAINRECIPE_NAME As String,  _
                    ByVal Original_MAINRECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_USER As String,  _
                    ByVal Original_MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_MAINRECIPE_TIMEOUT_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ACTIVE As Boolean,  _
                    ByVal Original_PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_PROD_START_SYNCHRON As Boolean,  _
                    ByVal Original_BATCH_MAXNUM As Short,  _
                    ByVal Original_PROD_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_REPORT As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINPROD_NUMBER,Integer)
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MAINRECIPE_NAME,String)
            End If
            If (Original_MAINRECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MAINRECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MAINRECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MAINRECIPE_USER,String)
            End If
            If (Original_MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (Original_MAINRECIPE_TIMEOUT_TIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MAINRECIPE_TIMEOUT_TIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_MAINRECIPE_TIMEOUT_ACTIVE,Boolean)
            If (Original_PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_ACTVALUE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PROD_ACTVALUE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_PROD_START_SYNCHRON,Boolean)
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_BATCH_MAXNUM,Short)
            If (Original_PROD_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PROD_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_LOG_REPORT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TIMEOUT_TIME As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ACTIVE As Boolean,  _
                    ByVal PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal PROD_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_USER As String,  _
                    ByVal PROD_START_SYNCHRON As Boolean,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal PROD_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_REPORT As Boolean) As Integer
            If (MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPE_NAME,String)
            End If
            If (MAINRECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAINRECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MAINRECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MAINRECIPE_USER,String)
            End If
            If (MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (MAINRECIPE_TIMEOUT_TIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAINRECIPE_TIMEOUT_TIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAINRECIPE_TIMEOUT_ACTIVE,Boolean)
            If (PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PROD_ACTVALUE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PROD_ACTVALUE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PROD_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PROD_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(PROD_START_SYNCHRON,Boolean)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(BATCH_MAXNUM,Short)
            If (PROD_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(PROD_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(LOG_REPORT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TIMEOUT_TIME As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ACTIVE As Boolean,  _
                    ByVal PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal PROD_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_USER As String,  _
                    ByVal PROD_START_SYNCHRON As Boolean,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal PROD_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_REPORT As Boolean,  _
                    ByVal Original_MAINPROD_NUMBER As Integer,  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_MAINRECIPE_NAME As String,  _
                    ByVal Original_MAINRECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_USER As String,  _
                    ByVal Original_MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_MAINRECIPE_TIMEOUT_TIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ACTIVE As Boolean,  _
                    ByVal Original_PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_PROD_START_SYNCHRON As Boolean,  _
                    ByVal Original_BATCH_MAXNUM As Short,  _
                    ByVal Original_PROD_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_REPORT As Boolean) As Integer
            If (MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPE_NAME,String)
            End If
            If (MAINRECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAINRECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MAINRECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MAINRECIPE_USER,String)
            End If
            If (MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (MAINRECIPE_TIMEOUT_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAINRECIPE_TIMEOUT_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAINRECIPE_TIMEOUT_ACTIVE,Boolean)
            If (PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (PROD_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PROD_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PROD_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(PROD_START_SYNCHRON,Boolean)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(BATCH_MAXNUM,Short)
            If (PROD_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(PROD_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LOG_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_MAINPROD_NUMBER,Integer)
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_MAINRECIPE_NAME,String)
            End If
            If (Original_MAINRECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_MAINRECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_MAINRECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_MAINRECIPE_USER,String)
            End If
            If (Original_MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (Original_MAINRECIPE_TIMEOUT_TIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_MAINRECIPE_TIMEOUT_TIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_MAINRECIPE_TIMEOUT_ACTIVE,Boolean)
            If (Original_PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_PROD_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_PROD_START_SYNCHRON,Boolean)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_BATCH_MAXNUM,Short)
            If (Original_PROD_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_PROD_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_LOG_REPORT,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINRECIPELINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINRECIPELINE"
            tableMapping.ColumnMappings.Add("MAINPROD_NUMBER", "MAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("MAINBATCH_NUMBER", "MAINBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("RECIPE_BATCH_NUMBER", "RECIPE_BATCH_NUMBER")
            tableMapping.ColumnMappings.Add("RECIPE_BATCH_MAXNUM", "RECIPE_BATCH_MAXNUM")
            tableMapping.ColumnMappings.Add("RECIPE_STATUS", "RECIPE_STATUS")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_CALCSETP", "RECIPE_CALCSETP")
            tableMapping.ColumnMappings.Add("RECIPE_ACTVALUE", "RECIPE_ACTVALUE")
            tableMapping.ColumnMappings.Add("RECIPE_UNIT", "RECIPE_UNIT")
            tableMapping.ColumnMappings.Add("RECIPE_DECIMALPOINT", "RECIPE_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("RECIPE_MAXRESOLU_DP", "RECIPE_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("RECIPE_PRIORITY", "RECIPE_PRIORITY")
            tableMapping.ColumnMappings.Add("RECIPE_DONE", "RECIPE_DONE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINRECIPELINE` WHERE ((`MAINPROD_NUMBER` = ?) AND (`PRODLINE_IDENT`"& _ 
                " = ?) AND (`MAINBATCH_NUMBER` = ?) AND ((? = 1 AND `RECIPE_BATCH_NUMBER` IS NULL"& _ 
                ") OR (`RECIPE_BATCH_NUMBER` = ?)) AND ((? = 1 AND `RECIPE_BATCH_MAXNUM` IS NULL)"& _ 
                " OR (`RECIPE_BATCH_MAXNUM` = ?)) AND ((? = 1 AND `RECIPE_STATUS` IS NULL) OR (`R"& _ 
                "ECIPE_STATUS` = ?)) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT` ="& _ 
                " ?)) AND ((? = 1 AND `RECIPE_CALCSETP` IS NULL) OR (`RECIPE_CALCSETP` = ?)) AND "& _ 
                "((? = 1 AND `RECIPE_ACTVALUE` IS NULL) OR (`RECIPE_ACTVALUE` = ?)) AND ((? = 1 A"& _ 
                "ND `RECIPE_UNIT` IS NULL) OR (`RECIPE_UNIT` = ?)) AND ((? = 1 AND `RECIPE_DECIMA"& _ 
                "LPOINT` IS NULL) OR (`RECIPE_DECIMALPOINT` = ?)) AND ((? = 1 AND `RECIPE_MAXRESO"& _ 
                "LU_DP` IS NULL) OR (`RECIPE_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `RECIPE_PRIORITY"& _ 
                "` IS NULL) OR (`RECIPE_PRIORITY` = ?)) AND ((? = 1 AND `RECIPE_DONE` IS NULL) OR"& _ 
                " (`RECIPE_DONE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINRECIPELINE` (`MAINPROD_NUMBER`, `PRODLINE_IDENT`, `MAINBATCH_NUM"& _ 
                "BER`, `RECIPE_BATCH_NUMBER`, `RECIPE_BATCH_MAXNUM`, `RECIPE_STATUS`, `RECIPE_IDE"& _ 
                "NT`, `RECIPE_CALCSETP`, `RECIPE_ACTVALUE`, `RECIPE_UNIT`, `RECIPE_DECIMALPOINT`,"& _ 
                " `RECIPE_MAXRESOLU_DP`, `RECIPE_PRIORITY`, `RECIPE_DONE`) VALUES (?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINRECIPELINE` SET `MAINPROD_NUMBER` = ?, `PRODLINE_IDENT` = ?, `MAINBAT"& _ 
                "CH_NUMBER` = ?, `RECIPE_BATCH_NUMBER` = ?, `RECIPE_BATCH_MAXNUM` = ?, `RECIPE_ST"& _ 
                "ATUS` = ?, `RECIPE_IDENT` = ?, `RECIPE_CALCSETP` = ?, `RECIPE_ACTVALUE` = ?, `RE"& _ 
                "CIPE_UNIT` = ?, `RECIPE_DECIMALPOINT` = ?, `RECIPE_MAXRESOLU_DP` = ?, `RECIPE_PR"& _ 
                "IORITY` = ?, `RECIPE_DONE` = ? WHERE ((`MAINPROD_NUMBER` = ?) AND (`PRODLINE_IDE"& _ 
                "NT` = ?) AND (`MAINBATCH_NUMBER` = ?) AND ((? = 1 AND `RECIPE_BATCH_NUMBER` IS N"& _ 
                "ULL) OR (`RECIPE_BATCH_NUMBER` = ?)) AND ((? = 1 AND `RECIPE_BATCH_MAXNUM` IS NU"& _ 
                "LL) OR (`RECIPE_BATCH_MAXNUM` = ?)) AND ((? = 1 AND `RECIPE_STATUS` IS NULL) OR "& _ 
                "(`RECIPE_STATUS` = ?)) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT"& _ 
                "` = ?)) AND ((? = 1 AND `RECIPE_CALCSETP` IS NULL) OR (`RECIPE_CALCSETP` = ?)) A"& _ 
                "ND ((? = 1 AND `RECIPE_ACTVALUE` IS NULL) OR (`RECIPE_ACTVALUE` = ?)) AND ((? = "& _ 
                "1 AND `RECIPE_UNIT` IS NULL) OR (`RECIPE_UNIT` = ?)) AND ((? = 1 AND `RECIPE_DEC"& _ 
                "IMALPOINT` IS NULL) OR (`RECIPE_DECIMALPOINT` = ?)) AND ((? = 1 AND `RECIPE_MAXR"& _ 
                "ESOLU_DP` IS NULL) OR (`RECIPE_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `RECIPE_PRIOR"& _ 
                "ITY` IS NULL) OR (`RECIPE_PRIORITY` = ?)) AND ((? = 1 AND `RECIPE_DONE` IS NULL)"& _ 
                " OR (`RECIPE_DONE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCSETP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DONE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINPROD_NUMBER, PRODLINE_IDENT, MAINBATCH_NUMBER, RECIPE_BATCH_NUMBER, RE"& _ 
                "CIPE_BATCH_MAXNUM, RECIPE_STATUS, RECIPE_IDENT, RECIPE_CALCSETP, RECIPE_ACTVALUE"& _ 
                ", RECIPE_UNIT, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_PRIORITY, RECIPE"& _ 
                "_DONE FROM MAINRECIPELINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.MAINRECIPELINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.MAINRECIPELINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.MAINRECIPELINEDataTable = New _840002C1DataSet.MAINRECIPELINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.MAINRECIPELINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINRECIPELINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer), ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAINBATCH_NUMBER As Short, ByVal Original_RECIPE_BATCH_NUMBER As String, ByVal Original_RECIPE_BATCH_MAXNUM As Short, ByVal Original_RECIPE_STATUS As Global.System.Nullable(Of Short), ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_CALCSETP As Global.System.Nullable(Of Double), ByVal Original_RECIPE_ACTVALUE As Double, ByVal Original_RECIPE_UNIT As String, ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short), ByVal Original_RECIPE_DONE As Boolean) As Integer
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MAINBATCH_NUMBER,Short)
            If (Original_RECIPE_BATCH_NUMBER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RECIPE_BATCH_NUMBER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RECIPE_BATCH_MAXNUM,Short)
            If (Original_RECIPE_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_RECIPE_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_CALCSETP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_RECIPE_CALCSETP.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_RECIPE_ACTVALUE,Double)
            If (Original_RECIPE_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_RECIPE_UNIT,String)
            End If
            If (Original_RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_RECIPE_DONE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer), ByVal PRODLINE_IDENT As String, ByVal MAINBATCH_NUMBER As Short, ByVal RECIPE_BATCH_NUMBER As String, ByVal RECIPE_BATCH_MAXNUM As Short, ByVal RECIPE_STATUS As Global.System.Nullable(Of Short), ByVal RECIPE_IDENT As String, ByVal RECIPE_CALCSETP As Global.System.Nullable(Of Double), ByVal RECIPE_ACTVALUE As Double, ByVal RECIPE_UNIT As String, ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short), ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short), ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short), ByVal RECIPE_DONE As Boolean) As Integer
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAINBATCH_NUMBER,Short)
            If (RECIPE_BATCH_NUMBER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RECIPE_BATCH_NUMBER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RECIPE_BATCH_MAXNUM,Short)
            If (RECIPE_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RECIPE_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_CALCSETP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(RECIPE_CALCSETP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RECIPE_ACTVALUE,Double)
            If (RECIPE_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RECIPE_UNIT,String)
            End If
            If (RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(RECIPE_DONE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal MAINBATCH_NUMBER As Short,  _
                    ByVal RECIPE_BATCH_NUMBER As String,  _
                    ByVal RECIPE_BATCH_MAXNUM As Short,  _
                    ByVal RECIPE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal RECIPE_ACTVALUE As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_DONE As Boolean,  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_MAINBATCH_NUMBER As Short,  _
                    ByVal Original_RECIPE_BATCH_NUMBER As String,  _
                    ByVal Original_RECIPE_BATCH_MAXNUM As Short,  _
                    ByVal Original_RECIPE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal Original_RECIPE_ACTVALUE As Double,  _
                    ByVal Original_RECIPE_UNIT As String,  _
                    ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_DONE As Boolean) As Integer
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAINBATCH_NUMBER,Short)
            If (RECIPE_BATCH_NUMBER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RECIPE_BATCH_NUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RECIPE_BATCH_MAXNUM,Short)
            If (RECIPE_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RECIPE_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_CALCSETP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RECIPE_CALCSETP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RECIPE_ACTVALUE,Double)
            If (RECIPE_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RECIPE_UNIT,String)
            End If
            If (RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RECIPE_DONE,Boolean)
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MAINBATCH_NUMBER,Short)
            If (Original_RECIPE_BATCH_NUMBER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_RECIPE_BATCH_NUMBER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_RECIPE_BATCH_MAXNUM,Short)
            If (Original_RECIPE_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_RECIPE_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_CALCSETP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_RECIPE_CALCSETP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_RECIPE_ACTVALUE,Double)
            If (Original_RECIPE_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_RECIPE_UNIT,String)
            End If
            If (Original_RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_RECIPE_DONE,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECIPE_BATCH_NUMBER As String,  _
                    ByVal RECIPE_BATCH_MAXNUM As Short,  _
                    ByVal RECIPE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal RECIPE_ACTVALUE As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_DONE As Boolean,  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_MAINBATCH_NUMBER As Short,  _
                    ByVal Original_RECIPE_BATCH_NUMBER As String,  _
                    ByVal Original_RECIPE_BATCH_MAXNUM As Short,  _
                    ByVal Original_RECIPE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal Original_RECIPE_ACTVALUE As Double,  _
                    ByVal Original_RECIPE_UNIT As String,  _
                    ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_DONE As Boolean) As Integer
            Return Me.Update(Original_MAINPROD_NUMBER, Original_PRODLINE_IDENT, Original_MAINBATCH_NUMBER, RECIPE_BATCH_NUMBER, RECIPE_BATCH_MAXNUM, RECIPE_STATUS, RECIPE_IDENT, RECIPE_CALCSETP, RECIPE_ACTVALUE, RECIPE_UNIT, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_PRIORITY, RECIPE_DONE, Original_MAINPROD_NUMBER, Original_PRODLINE_IDENT, Original_MAINBATCH_NUMBER, Original_RECIPE_BATCH_NUMBER, Original_RECIPE_BATCH_MAXNUM, Original_RECIPE_STATUS, Original_RECIPE_IDENT, Original_RECIPE_CALCSETP, Original_RECIPE_ACTVALUE, Original_RECIPE_UNIT, Original_RECIPE_DECIMALPOINT, Original_RECIPE_MAXRESOLU_DP, Original_RECIPE_PRIORITY, Original_RECIPE_DONE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROD_QUEUETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROD_QUEUE"
            tableMapping.ColumnMappings.Add("PROD_NUMBER", "PROD_NUMBER")
            tableMapping.ColumnMappings.Add("START_DATETIME", "START_DATETIME")
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_IDENT", "PLAN_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_LINE", "PLAN_LINE")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_CYCLE", "PROD_CYCLE")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("PROD_PCAUTOSTART", "PROD_PCAUTOSTART")
            tableMapping.ColumnMappings.Add("PROD_USER", "PROD_USER")
            tableMapping.ColumnMappings.Add("REPMAINPROD_NUMBER", "REPMAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("REPMAINBATCH_NUMBER", "REPMAINBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("MAINPROD_NUMBER", "MAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("MAINBATCH_NUMBER", "MAINBATCH_NUMBER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PROD_QUEUE` WHERE ((`PROD_NUMBER` = ?) AND (`START_DATETIME` = ?) AN"& _ 
                "D ((? = 1 AND `PRODLINE_IDENT` IS NULL) OR (`PRODLINE_IDENT` = ?)) AND ((? = 1 A"& _ 
                "ND `PLAN_IDENT` IS NULL) OR (`PLAN_IDENT` = ?)) AND ((? = 1 AND `PLAN_LINE` IS N"& _ 
                "ULL) OR (`PLAN_LINE` = ?)) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_I"& _ 
                "DENT` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ("& _ 
                "(? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND "& _ 
                "`PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_CYCLE` IS NULL) O"& _ 
                "R (`PROD_CYCLE` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PROD_SETPOIN"& _ 
                "T` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AND ((? = 1 "& _ 
                "AND `PROD_PCAUTOSTART` IS NULL) OR (`PROD_PCAUTOSTART` = ?)) AND ((? = 1 AND `PR"& _ 
                "OD_USER` IS NULL) OR (`PROD_USER` = ?)) AND ((? = 1 AND `REPMAINPROD_NUMBER` IS "& _ 
                "NULL) OR (`REPMAINPROD_NUMBER` = ?)) AND ((? = 1 AND `REPMAINBATCH_NUMBER` IS NU"& _ 
                "LL) OR (`REPMAINBATCH_NUMBER` = ?)) AND ((? = 1 AND `MAINPROD_NUMBER` IS NULL) O"& _ 
                "R (`MAINPROD_NUMBER` = ?)) AND ((? = 1 AND `MAINBATCH_NUMBER` IS NULL) OR (`MAIN"& _ 
                "BATCH_NUMBER` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PROD_QUEUE` (`START_DATETIME`, `PRODLINE_IDENT`, `PLAN_IDENT`, `PLAN"& _ 
                "_LINE`, `RECIPE_IDENT`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_NUM`, `PROD_CYCLE"& _ 
                "`, `PROD_SETPOINT`, `PROD_UNIT`, `PROD_PCAUTOSTART`, `PROD_USER`, `REPMAINPROD_N"& _ 
                "UMBER`, `REPMAINBATCH_NUMBER`, `MAINPROD_NUMBER`, `MAINBATCH_NUMBER`) VALUES (?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PROD_QUEUE` SET `START_DATETIME` = ?, `PRODLINE_IDENT` = ?, `PLAN_IDENT` "& _ 
                "= ?, `PLAN_LINE` = ?, `RECIPE_IDENT` = ?, `ORDER_IDENT` = ?, `CUSTOMER_IDENT` = "& _ 
                "?, `PROD_NUM` = ?, `PROD_CYCLE` = ?, `PROD_SETPOINT` = ?, `PROD_UNIT` = ?, `PROD"& _ 
                "_PCAUTOSTART` = ?, `PROD_USER` = ?, `REPMAINPROD_NUMBER` = ?, `REPMAINBATCH_NUMB"& _ 
                "ER` = ?, `MAINPROD_NUMBER` = ?, `MAINBATCH_NUMBER` = ? WHERE ((`PROD_NUMBER` = ?"& _ 
                ") AND (`START_DATETIME` = ?) AND ((? = 1 AND `PRODLINE_IDENT` IS NULL) OR (`PROD"& _ 
                "LINE_IDENT` = ?)) AND ((? = 1 AND `PLAN_IDENT` IS NULL) OR (`PLAN_IDENT` = ?)) A"& _ 
                "ND ((? = 1 AND `PLAN_LINE` IS NULL) OR (`PLAN_LINE` = ?)) AND ((? = 1 AND `RECIP"& _ 
                "E_IDENT` IS NULL) OR (`RECIPE_IDENT` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL"& _ 
                ") OR (`ORDER_IDENT` = ?)) AND ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOME"& _ 
                "R_IDENT` = ?)) AND ((? = 1 AND `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? "& _ 
                "= 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND `PROD_SETPO"& _ 
                "INT` IS NULL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR "& _ 
                "(`PROD_UNIT` = ?)) AND ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR (`PROD_PCAUTOS"& _ 
                "TART` = ?)) AND ((? = 1 AND `PROD_USER` IS NULL) OR (`PROD_USER` = ?)) AND ((? ="& _ 
                " 1 AND `REPMAINPROD_NUMBER` IS NULL) OR (`REPMAINPROD_NUMBER` = ?)) AND ((? = 1 "& _ 
                "AND `REPMAINBATCH_NUMBER` IS NULL) OR (`REPMAINBATCH_NUMBER` = ?)) AND ((? = 1 A"& _ 
                "ND `MAINPROD_NUMBER` IS NULL) OR (`MAINPROD_NUMBER` = ?)) AND ((? = 1 AND `MAINB"& _ 
                "ATCH_NUMBER` IS NULL) OR (`MAINBATCH_NUMBER` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPMAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPMAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROD_NUMBER, START_DATETIME, PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE, RECIPE"& _ 
                "_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_CYCLE, PROD_SETPOINT, PROD_U"& _ 
                "NIT, PROD_PCAUTOSTART, PROD_USER, REPMAINPROD_NUMBER, REPMAINBATCH_NUMBER, MAINP"& _ 
                "ROD_NUMBER, MAINBATCH_NUMBER FROM PROD_QUEUE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.PROD_QUEUEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.PROD_QUEUEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.PROD_QUEUEDataTable = New _840002C1DataSet.PROD_QUEUEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.PROD_QUEUEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PROD_QUEUE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PROD_NUMBER As Integer,  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_CYCLE As Short,  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROD_NUMBER,Integer)
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PLAN_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PROD_CYCLE,Short)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_PROD_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_PROD_USER,String)
            End If
            If (Original_REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLAN_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROD_CYCLE,Short)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PROD_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(PROD_USER,String)
            End If
            If (REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_NUMBER As Integer,  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_CYCLE As Short,  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROD_CYCLE,Short)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PROD_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PROD_USER,String)
            End If
            If (REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PROD_NUMBER,Integer)
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_PLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PROD_CYCLE,Short)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PROD_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_PROD_USER,String)
            End If
            If (Original_REPMAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_REPMAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_REPMAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_REPMAINBATCH_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_CYCLE As Short,  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_NUMBER As Integer,  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_CYCLE As Short,  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_REPMAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPMAINBATCH_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_START_DATETIME, PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE, RECIPE_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_CYCLE, PROD_SETPOINT, PROD_UNIT, PROD_PCAUTOSTART, PROD_USER, REPMAINPROD_NUMBER, REPMAINBATCH_NUMBER, MAINPROD_NUMBER, MAINBATCH_NUMBER, Original_PROD_NUMBER, Original_START_DATETIME, Original_PRODLINE_IDENT, Original_PLAN_IDENT, Original_PLAN_LINE, Original_RECIPE_IDENT, Original_ORDER_IDENT, Original_CUSTOMER_IDENT, Original_PROD_NUM, Original_PROD_CYCLE, Original_PROD_SETPOINT, Original_PROD_UNIT, Original_PROD_PCAUTOSTART, Original_PROD_USER, Original_REPMAINPROD_NUMBER, Original_REPMAINBATCH_NUMBER, Original_MAINPROD_NUMBER, Original_MAINBATCH_NUMBER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODUCTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODUCTION"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("PROD_STATUS", "PROD_STATUS")
            tableMapping.ColumnMappings.Add("PROD_PREV_STATUS", "PROD_PREV_STATUS")
            tableMapping.ColumnMappings.Add("SEQUENCE_NUMBER", "SEQUENCE_NUMBER")
            tableMapping.ColumnMappings.Add("REPPROD_NUMBER", "REPPROD_NUMBER")
            tableMapping.ColumnMappings.Add("REPBATCH_NUMBER", "REPBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("PLAN_IDENT", "PLAN_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_NAME", "PLAN_NAME")
            tableMapping.ColumnMappings.Add("PLAN_LINE", "PLAN_LINE")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_NAME", "RECIPE_NAME")
            tableMapping.ColumnMappings.Add("RECIPE_TOTAL", "RECIPE_TOTAL")
            tableMapping.ColumnMappings.Add("RECIPE_REFWEIGHT", "RECIPE_REFWEIGHT")
            tableMapping.ColumnMappings.Add("RECIPE_CREATE_DATE", "RECIPE_CREATE_DATE")
            tableMapping.ColumnMappings.Add("RECIPE_CHANGE_DATE", "RECIPE_CHANGE_DATE")
            tableMapping.ColumnMappings.Add("RECIPE_USER", "RECIPE_USER")
            tableMapping.ColumnMappings.Add("RECIPE_CHECK", "RECIPE_CHECK")
            tableMapping.ColumnMappings.Add("RECIPE_TIMEOUT", "RECIPE_TIMEOUT")
            tableMapping.ColumnMappings.Add("RECIPE_TIMEOUT_ENABLED", "RECIPE_TIMEOUT_ENABLED")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_START_DATE", "PROD_START_DATE")
            tableMapping.ColumnMappings.Add("PROD_END_DATE", "PROD_END_DATE")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_ACTVALUE", "PROD_ACTVALUE")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("PROD_DECIMALPOINT", "PROD_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("PROD_MAXRESOLU_DP", "PROD_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("PROD_PCAUTOSTART", "PROD_PCAUTOSTART")
            tableMapping.ColumnMappings.Add("PROD_USER", "PROD_USER")
            tableMapping.ColumnMappings.Add("BATCH_NUMBER", "BATCH_NUMBER")
            tableMapping.ColumnMappings.Add("BATCH_MAXNUM", "BATCH_MAXNUM")
            tableMapping.ColumnMappings.Add("BATCH_REPEAT", "BATCH_REPEAT")
            tableMapping.ColumnMappings.Add("PROD_ABORT", "PROD_ABORT")
            tableMapping.ColumnMappings.Add("CORR_NUMBER", "CORR_NUMBER")
            tableMapping.ColumnMappings.Add("MAINPROD_NUMBER", "MAINPROD_NUMBER")
            tableMapping.ColumnMappings.Add("MAINBATCH_NUMBER", "MAINBATCH_NUMBER")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PRODUCTION` WHERE ((`PRODLINE_IDENT` = ?) AND ((? = 1 AND `PROD_STAT"& _ 
                "US` IS NULL) OR (`PROD_STATUS` = ?)) AND ((? = 1 AND `PROD_PREV_STATUS` IS NULL)"& _ 
                " OR (`PROD_PREV_STATUS` = ?)) AND ((? = 1 AND `SEQUENCE_NUMBER` IS NULL) OR (`SE"& _ 
                "QUENCE_NUMBER` = ?)) AND ((? = 1 AND `REPPROD_NUMBER` IS NULL) OR (`REPPROD_NUMB"& _ 
                "ER` = ?)) AND ((? = 1 AND `REPBATCH_NUMBER` IS NULL) OR (`REPBATCH_NUMBER` = ?))"& _ 
                " AND ((? = 1 AND `PLAN_IDENT` IS NULL) OR (`PLAN_IDENT` = ?)) AND ((? = 1 AND `P"& _ 
                "LAN_NAME` IS NULL) OR (`PLAN_NAME` = ?)) AND ((? = 1 AND `PLAN_LINE` IS NULL) OR"& _ 
                " (`PLAN_LINE` = ?)) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT` ="& _ 
                " ?)) AND ((? = 1 AND `RECIPE_NAME` IS NULL) OR (`RECIPE_NAME` = ?)) AND ((? = 1 "& _ 
                "AND `RECIPE_TOTAL` IS NULL) OR (`RECIPE_TOTAL` = ?)) AND ((? = 1 AND `RECIPE_REF"& _ 
                "WEIGHT` IS NULL) OR (`RECIPE_REFWEIGHT` = ?)) AND ((? = 1 AND `RECIPE_CREATE_DAT"& _ 
                "E` IS NULL) OR (`RECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND `RECIPE_CHANGE_DATE` "& _ 
                "IS NULL) OR (`RECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND `RECIPE_USER` IS NULL) O"& _ 
                "R (`RECIPE_USER` = ?)) AND ((? = 1 AND `RECIPE_CHECK` IS NULL) OR (`RECIPE_CHECK"& _ 
                "` = ?)) AND ((? = 1 AND `RECIPE_TIMEOUT` IS NULL) OR (`RECIPE_TIMEOUT` = ?)) AND"& _ 
                " ((? = 1 AND `RECIPE_TIMEOUT_ENABLED` IS NULL) OR (`RECIPE_TIMEOUT_ENABLED` = ?)"& _ 
                ") AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ((? = 1 AND"& _ 
                " `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `PROD_NUM`"& _ 
                " IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_START_DATE` IS NULL) OR (`P"& _ 
                "ROD_START_DATE` = ?)) AND ((? = 1 AND `PROD_END_DATE` IS NULL) OR (`PROD_END_DAT"& _ 
                "E` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PROD_SETPOINT` = ?)) AND "& _ 
                "((? = 1 AND `PROD_ACTVALUE` IS NULL) OR (`PROD_ACTVALUE` = ?)) AND ((? = 1 AND `"& _ 
                "PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AND ((? = 1 AND `PROD_DECIMALPOINT` IS"& _ 
                " NULL) OR (`PROD_DECIMALPOINT` = ?)) AND ((? = 1 AND `PROD_MAXRESOLU_DP` IS NULL"& _ 
                ") OR (`PROD_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR ("& _ 
                "`PROD_PCAUTOSTART` = ?)) AND ((? = 1 AND `PROD_USER` IS NULL) OR (`PROD_USER` = "& _ 
                "?)) AND ((? = 1 AND `BATCH_NUMBER` IS NULL) OR (`BATCH_NUMBER` = ?)) AND ((? = 1"& _ 
                " AND `BATCH_MAXNUM` IS NULL) OR (`BATCH_MAXNUM` = ?)) AND ((? = 1 AND `BATCH_REP"& _ 
                "EAT` IS NULL) OR (`BATCH_REPEAT` = ?)) AND ((? = 1 AND `PROD_ABORT` IS NULL) OR "& _ 
                "(`PROD_ABORT` = ?)) AND ((? = 1 AND `CORR_NUMBER` IS NULL) OR (`CORR_NUMBER` = ?"& _ 
                ")) AND ((? = 1 AND `MAINPROD_NUMBER` IS NULL) OR (`MAINPROD_NUMBER` = ?)) AND (("& _ 
                "? = 1 AND `MAINBATCH_NUMBER` IS NULL) OR (`MAINBATCH_NUMBER` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CORR_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CORR_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PRODUCTION` (`PRODLINE_IDENT`, `PROD_STATUS`, `PROD_PREV_STATUS`, `S"& _ 
                "EQUENCE_NUMBER`, `REPPROD_NUMBER`, `REPBATCH_NUMBER`, `PLAN_IDENT`, `PLAN_NAME`,"& _ 
                " `PLAN_LINE`, `RECIPE_IDENT`, `RECIPE_NAME`, `RECIPE_TOTAL`, `RECIPE_REFWEIGHT`,"& _ 
                " `RECIPE_CREATE_DATE`, `RECIPE_CHANGE_DATE`, `RECIPE_USER`, `RECIPE_CHECK`, `REC"& _ 
                "IPE_TIMEOUT`, `RECIPE_TIMEOUT_ENABLED`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_N"& _ 
                "UM`, `PROD_START_DATE`, `PROD_END_DATE`, `PROD_SETPOINT`, `PROD_ACTVALUE`, `PROD"& _ 
                "_UNIT`, `PROD_DECIMALPOINT`, `PROD_MAXRESOLU_DP`, `PROD_PCAUTOSTART`, `PROD_USER"& _ 
                "`, `BATCH_NUMBER`, `BATCH_MAXNUM`, `BATCH_REPEAT`, `PROD_ABORT`, `CORR_NUMBER`, "& _ 
                "`MAINPROD_NUMBER`, `MAINBATCH_NUMBER`, `SCRIPT_DIT`) VALUES (?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CORR_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PRODUCTION` SET `PRODLINE_IDENT` = ?, `PROD_STATUS` = ?, `PROD_PREV_STATU"& _ 
                "S` = ?, `SEQUENCE_NUMBER` = ?, `REPPROD_NUMBER` = ?, `REPBATCH_NUMBER` = ?, `PLA"& _ 
                "N_IDENT` = ?, `PLAN_NAME` = ?, `PLAN_LINE` = ?, `RECIPE_IDENT` = ?, `RECIPE_NAME"& _ 
                "` = ?, `RECIPE_TOTAL` = ?, `RECIPE_REFWEIGHT` = ?, `RECIPE_CREATE_DATE` = ?, `RE"& _ 
                "CIPE_CHANGE_DATE` = ?, `RECIPE_USER` = ?, `RECIPE_CHECK` = ?, `RECIPE_TIMEOUT` ="& _ 
                " ?, `RECIPE_TIMEOUT_ENABLED` = ?, `ORDER_IDENT` = ?, `CUSTOMER_IDENT` = ?, `PROD"& _ 
                "_NUM` = ?, `PROD_START_DATE` = ?, `PROD_END_DATE` = ?, `PROD_SETPOINT` = ?, `PRO"& _ 
                "D_ACTVALUE` = ?, `PROD_UNIT` = ?, `PROD_DECIMALPOINT` = ?, `PROD_MAXRESOLU_DP` ="& _ 
                " ?, `PROD_PCAUTOSTART` = ?, `PROD_USER` = ?, `BATCH_NUMBER` = ?, `BATCH_MAXNUM` "& _ 
                "= ?, `BATCH_REPEAT` = ?, `PROD_ABORT` = ?, `CORR_NUMBER` = ?, `MAINPROD_NUMBER` "& _ 
                "= ?, `MAINBATCH_NUMBER` = ?, `SCRIPT_DIT` = ? WHERE ((`PRODLINE_IDENT` = ?) AND "& _ 
                "((? = 1 AND `PROD_STATUS` IS NULL) OR (`PROD_STATUS` = ?)) AND ((? = 1 AND `PROD"& _ 
                "_PREV_STATUS` IS NULL) OR (`PROD_PREV_STATUS` = ?)) AND ((? = 1 AND `SEQUENCE_NU"& _ 
                "MBER` IS NULL) OR (`SEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `REPPROD_NUMBER` IS N"& _ 
                "ULL) OR (`REPPROD_NUMBER` = ?)) AND ((? = 1 AND `REPBATCH_NUMBER` IS NULL) OR (`"& _ 
                "REPBATCH_NUMBER` = ?)) AND ((? = 1 AND `PLAN_IDENT` IS NULL) OR (`PLAN_IDENT` = "& _ 
                "?)) AND ((? = 1 AND `PLAN_NAME` IS NULL) OR (`PLAN_NAME` = ?)) AND ((? = 1 AND `"& _ 
                "PLAN_LINE` IS NULL) OR (`PLAN_LINE` = ?)) AND ((? = 1 AND `RECIPE_IDENT` IS NULL"& _ 
                ") OR (`RECIPE_IDENT` = ?)) AND ((? = 1 AND `RECIPE_NAME` IS NULL) OR (`RECIPE_NA"& _ 
                "ME` = ?)) AND ((? = 1 AND `RECIPE_TOTAL` IS NULL) OR (`RECIPE_TOTAL` = ?)) AND ("& _ 
                "(? = 1 AND `RECIPE_REFWEIGHT` IS NULL) OR (`RECIPE_REFWEIGHT` = ?)) AND ((? = 1 "& _ 
                "AND `RECIPE_CREATE_DATE` IS NULL) OR (`RECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND"& _ 
                " `RECIPE_CHANGE_DATE` IS NULL) OR (`RECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND `R"& _ 
                "ECIPE_USER` IS NULL) OR (`RECIPE_USER` = ?)) AND ((? = 1 AND `RECIPE_CHECK` IS N"& _ 
                "ULL) OR (`RECIPE_CHECK` = ?)) AND ((? = 1 AND `RECIPE_TIMEOUT` IS NULL) OR (`REC"& _ 
                "IPE_TIMEOUT` = ?)) AND ((? = 1 AND `RECIPE_TIMEOUT_ENABLED` IS NULL) OR (`RECIPE"& _ 
                "_TIMEOUT_ENABLED` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT`"& _ 
                " = ?)) AND ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND "& _ 
                "((? = 1 AND `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_START"& _ 
                "_DATE` IS NULL) OR (`PROD_START_DATE` = ?)) AND ((? = 1 AND `PROD_END_DATE` IS N"& _ 
                "ULL) OR (`PROD_END_DATE` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PRO"& _ 
                "D_SETPOINT` = ?)) AND ((? = 1 AND `PROD_ACTVALUE` IS NULL) OR (`PROD_ACTVALUE` ="& _ 
                " ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AND ((? = 1 AND "& _ 
                "`PROD_DECIMALPOINT` IS NULL) OR (`PROD_DECIMALPOINT` = ?)) AND ((? = 1 AND `PROD"& _ 
                "_MAXRESOLU_DP` IS NULL) OR (`PROD_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `PROD_PCAU"& _ 
                "TOSTART` IS NULL) OR (`PROD_PCAUTOSTART` = ?)) AND ((? = 1 AND `PROD_USER` IS NU"& _ 
                "LL) OR (`PROD_USER` = ?)) AND ((? = 1 AND `BATCH_NUMBER` IS NULL) OR (`BATCH_NUM"& _ 
                "BER` = ?)) AND ((? = 1 AND `BATCH_MAXNUM` IS NULL) OR (`BATCH_MAXNUM` = ?)) AND "& _ 
                "((? = 1 AND `BATCH_REPEAT` IS NULL) OR (`BATCH_REPEAT` = ?)) AND ((? = 1 AND `PR"& _ 
                "OD_ABORT` IS NULL) OR (`PROD_ABORT` = ?)) AND ((? = 1 AND `CORR_NUMBER` IS NULL)"& _ 
                " OR (`CORR_NUMBER` = ?)) AND ((? = 1 AND `MAINPROD_NUMBER` IS NULL) OR (`MAINPRO"& _ 
                "D_NUMBER` = ?)) AND ((? = 1 AND `MAINBATCH_NUMBER` IS NULL) OR (`MAINBATCH_NUMBE"& _ 
                "R` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CORR_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PREV_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PREV_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_LINE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_START_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_START_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_END_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_END_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MAXNUM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MAXNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_REPEAT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_REPEAT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CORR_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CORR_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINPROD_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINBATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINBATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, PROD_STATUS, PROD_PREV_STATUS, SEQUENCE_NUMBER, REPPROD_NU"& _ 
                "MBER, REPBATCH_NUMBER, PLAN_IDENT, PLAN_NAME, PLAN_LINE, RECIPE_IDENT, RECIPE_NA"& _ 
                "ME, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_CREATE_DATE, RECIPE_CHANGE_DATE, RECI"& _ 
                "PE_USER, RECIPE_CHECK, RECIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, ORDER_IDENT, CUST"& _ 
                "OMER_IDENT, PROD_NUM, PROD_START_DATE, PROD_END_DATE, PROD_SETPOINT, PROD_ACTVAL"& _ 
                "UE, PROD_UNIT, PROD_DECIMALPOINT, PROD_MAXRESOLU_DP, PROD_PCAUTOSTART, PROD_USER"& _ 
                ", BATCH_NUMBER, BATCH_MAXNUM, BATCH_REPEAT, PROD_ABORT, CORR_NUMBER, MAINPROD_NU"& _ 
                "MBER, MAINBATCH_NUMBER, SCRIPT_DIT FROM PRODUCTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.PRODUCTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.PRODUCTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.PRODUCTIONDataTable = New _840002C1DataSet.PRODUCTIONDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.PRODUCTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PRODUCTION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PROD_STATUS As Short,  _
                    ByVal Original_PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPPROD_NUMBER As Integer,  _
                    ByVal Original_REPBATCH_NUMBER As Integer,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_NAME As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_ACTVALUE As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_BATCH_NUMBER As Short,  _
                    ByVal Original_BATCH_MAXNUM As Short,  _
                    ByVal Original_BATCH_REPEAT As Boolean,  _
                    ByVal Original_PROD_ABORT As Boolean,  _
                    ByVal Original_CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROD_STATUS,Short)
            If (Original_PROD_PREV_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PROD_PREV_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_REPPROD_NUMBER,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_REPBATCH_NUMBER,Integer)
            If (Original_PLAN_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PLAN_IDENT,String)
            End If
            If (Original_PLAN_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PLAN_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_RECIPE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_RECIPE_TOTAL,Double)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_RECIPE_REFWEIGHT,Double)
            If (Original_RECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_RECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_RECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_RECIPE_USER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_RECIPE_CHECK,Boolean)
            If (Original_RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_RECIPE_TIMEOUT_ENABLED,Boolean)
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_START_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_PROD_START_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_END_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_PROD_END_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_PROD_SETPOINT,Double)
            Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_PROD_ACTVALUE,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_BATCH_NUMBER,Short)
            Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_BATCH_MAXNUM,Short)
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_BATCH_REPEAT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_PROD_ABORT,Boolean)
            If (Original_CORR_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_CORR_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PROD_STATUS As Short,  _
                    ByVal PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPPROD_NUMBER As Integer,  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_NAME As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_ACTVALUE As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal BATCH_NUMBER As Short,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal BATCH_REPEAT As Boolean,  _
                    ByVal PROD_ABORT As Boolean,  _
                    ByVal CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal SCRIPT_DIT As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROD_STATUS,Short)
            If (PROD_PREV_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROD_PREV_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(REPPROD_NUMBER,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(REPBATCH_NUMBER,Integer)
            If (PLAN_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PLAN_IDENT,String)
            End If
            If (PLAN_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PLAN_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RECIPE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(RECIPE_TOTAL,Double)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(RECIPE_REFWEIGHT,Double)
            If (RECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RECIPE_USER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(RECIPE_CHECK,Boolean)
            If (RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(RECIPE_TIMEOUT_ENABLED,Boolean)
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PROD_START_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(PROD_START_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (PROD_END_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(PROD_END_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(PROD_SETPOINT,Double)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(PROD_ACTVALUE,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(31).Value = CType(BATCH_NUMBER,Short)
            Me.Adapter.InsertCommand.Parameters(32).Value = CType(BATCH_MAXNUM,Short)
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(BATCH_REPEAT,Boolean)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(PROD_ABORT,Boolean)
            If (CORR_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(CORR_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(SCRIPT_DIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PROD_STATUS As Short,  _
                    ByVal PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPPROD_NUMBER As Integer,  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_NAME As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_ACTVALUE As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal BATCH_NUMBER As Short,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal BATCH_REPEAT As Boolean,  _
                    ByVal PROD_ABORT As Boolean,  _
                    ByVal CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PROD_STATUS As Short,  _
                    ByVal Original_PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPPROD_NUMBER As Integer,  _
                    ByVal Original_REPBATCH_NUMBER As Integer,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_NAME As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_ACTVALUE As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_BATCH_NUMBER As Short,  _
                    ByVal Original_BATCH_MAXNUM As Short,  _
                    ByVal Original_BATCH_REPEAT As Boolean,  _
                    ByVal Original_PROD_ABORT As Boolean,  _
                    ByVal Original_CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROD_STATUS,Short)
            If (PROD_PREV_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROD_PREV_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(REPPROD_NUMBER,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(REPBATCH_NUMBER,Integer)
            If (PLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PLAN_IDENT,String)
            End If
            If (PLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PLAN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RECIPE_TOTAL,Double)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RECIPE_REFWEIGHT,Double)
            If (RECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RECIPE_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(RECIPE_CHECK,Boolean)
            If (RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(RECIPE_TIMEOUT_ENABLED,Boolean)
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (PROD_START_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PROD_START_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (PROD_END_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(PROD_END_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(PROD_SETPOINT,Double)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(PROD_ACTVALUE,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(BATCH_NUMBER,Short)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(BATCH_MAXNUM,Short)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(BATCH_REPEAT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(PROD_ABORT,Boolean)
            If (CORR_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(CORR_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(SCRIPT_DIT,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_PROD_STATUS,Short)
            If (Original_PROD_PREV_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_PROD_PREV_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_REPPROD_NUMBER,Integer)
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_REPBATCH_NUMBER,Integer)
            If (Original_PLAN_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_PLAN_IDENT,String)
            End If
            If (Original_PLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PLAN_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_RECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_RECIPE_TOTAL,Double)
            Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_RECIPE_REFWEIGHT,Double)
            If (Original_RECIPE_CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_RECIPE_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_CHANGE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_RECIPE_CHANGE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_RECIPE_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_RECIPE_CHECK,Boolean)
            If (Original_RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_RECIPE_TIMEOUT_ENABLED,Boolean)
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_START_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_PROD_START_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_END_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_PROD_END_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_PROD_SETPOINT,Double)
            Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_PROD_ACTVALUE,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_PROD_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_PROD_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_PROD_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_PROD_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_BATCH_NUMBER,Short)
            Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_BATCH_MAXNUM,Short)
            Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_BATCH_REPEAT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_PROD_ABORT,Boolean)
            If (Original_CORR_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_CORR_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINPROD_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_MAINPROD_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINBATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_MAINBATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROD_STATUS As Short,  _
                    ByVal PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal REPPROD_NUMBER As Integer,  _
                    ByVal REPBATCH_NUMBER As Integer,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_NAME As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_ACTVALUE As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_USER As String,  _
                    ByVal BATCH_NUMBER As Short,  _
                    ByVal BATCH_MAXNUM As Short,  _
                    ByVal BATCH_REPEAT As Boolean,  _
                    ByVal PROD_ABORT As Boolean,  _
                    ByVal CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal MAINBATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PROD_STATUS As Short,  _
                    ByVal Original_PROD_PREV_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_REPPROD_NUMBER As Integer,  _
                    ByVal Original_REPBATCH_NUMBER As Integer,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_NAME As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_CHANGE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_START_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_END_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_ACTVALUE As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_USER As String,  _
                    ByVal Original_BATCH_NUMBER As Short,  _
                    ByVal Original_BATCH_MAXNUM As Short,  _
                    ByVal Original_BATCH_REPEAT As Boolean,  _
                    ByVal Original_PROD_ABORT As Boolean,  _
                    ByVal Original_CORR_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINPROD_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAINBATCH_NUMBER As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, PROD_STATUS, PROD_PREV_STATUS, SEQUENCE_NUMBER, REPPROD_NUMBER, REPBATCH_NUMBER, PLAN_IDENT, PLAN_NAME, PLAN_LINE, RECIPE_IDENT, RECIPE_NAME, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_CREATE_DATE, RECIPE_CHANGE_DATE, RECIPE_USER, RECIPE_CHECK, RECIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_START_DATE, PROD_END_DATE, PROD_SETPOINT, PROD_ACTVALUE, PROD_UNIT, PROD_DECIMALPOINT, PROD_MAXRESOLU_DP, PROD_PCAUTOSTART, PROD_USER, BATCH_NUMBER, BATCH_MAXNUM, BATCH_REPEAT, PROD_ABORT, CORR_NUMBER, MAINPROD_NUMBER, MAINBATCH_NUMBER, SCRIPT_DIT, Original_PRODLINE_IDENT, Original_PROD_STATUS, Original_PROD_PREV_STATUS, Original_SEQUENCE_NUMBER, Original_REPPROD_NUMBER, Original_REPBATCH_NUMBER, Original_PLAN_IDENT, Original_PLAN_NAME, Original_PLAN_LINE, Original_RECIPE_IDENT, Original_RECIPE_NAME, Original_RECIPE_TOTAL, Original_RECIPE_REFWEIGHT, Original_RECIPE_CREATE_DATE, Original_RECIPE_CHANGE_DATE, Original_RECIPE_USER, Original_RECIPE_CHECK, Original_RECIPE_TIMEOUT, Original_RECIPE_TIMEOUT_ENABLED, Original_ORDER_IDENT, Original_CUSTOMER_IDENT, Original_PROD_NUM, Original_PROD_START_DATE, Original_PROD_END_DATE, Original_PROD_SETPOINT, Original_PROD_ACTVALUE, Original_PROD_UNIT, Original_PROD_DECIMALPOINT, Original_PROD_MAXRESOLU_DP, Original_PROD_PCAUTOSTART, Original_PROD_USER, Original_BATCH_NUMBER, Original_BATCH_MAXNUM, Original_BATCH_REPEAT, Original_PROD_ABORT, Original_CORR_NUMBER, Original_MAINPROD_NUMBER, Original_MAINBATCH_NUMBER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RECIPETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RECIPE"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_LINE", "RECIPE_LINE")
            tableMapping.ColumnMappings.Add("BATCH_NUMBER", "BATCH_NUMBER")
            tableMapping.ColumnMappings.Add("RECIPE_LINE_STATUS", "RECIPE_LINE_STATUS")
            tableMapping.ColumnMappings.Add("RECIPE_LINE_PARA", "RECIPE_LINE_PARA")
            tableMapping.ColumnMappings.Add("MAT_IDENT", "MAT_IDENT")
            tableMapping.ColumnMappings.Add("MAT_NAME", "MAT_NAME")
            tableMapping.ColumnMappings.Add("MAT_PARA", "MAT_PARA")
            tableMapping.ColumnMappings.Add("MAT_SETPOINT", "MAT_SETPOINT")
            tableMapping.ColumnMappings.Add("MAT_CALCSETP", "MAT_CALCSETP")
            tableMapping.ColumnMappings.Add("MAT_ACTVALUE", "MAT_ACTVALUE")
            tableMapping.ColumnMappings.Add("MAT_UNIT", "MAT_UNIT")
            tableMapping.ColumnMappings.Add("MAT_DECIMALPOINT", "MAT_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("BREAKPOINT", "BREAKPOINT")
            tableMapping.ColumnMappings.Add("MAT_CALCULATE_SETPOINT", "MAT_CALCULATE_SETPOINT")
            tableMapping.ColumnMappings.Add("WP_ADDRESS", "WP_ADDRESS")
            tableMapping.ColumnMappings.Add("WP_IDENT", "WP_IDENT")
            tableMapping.ColumnMappings.Add("WP_NAME", "WP_NAME")
            tableMapping.ColumnMappings.Add("MAT_BATCH_MODE", "MAT_BATCH_MODE")
            tableMapping.ColumnMappings.Add("MAT_SPM_INADR", "MAT_SPM_INADR")
            tableMapping.ColumnMappings.Add("MAT_SPM_OUTADR", "MAT_SPM_OUTADR")
            tableMapping.ColumnMappings.Add("MAT_ADD_TO_TOTAL", "MAT_ADD_TO_TOTAL")
            tableMapping.ColumnMappings.Add("MAT_BATCH_REPORT", "MAT_BATCH_REPORT")
            tableMapping.ColumnMappings.Add("MAT_PROD_REPORT", "MAT_PROD_REPORT")
            tableMapping.ColumnMappings.Add("MAT_PRESET", "MAT_PRESET")
            tableMapping.ColumnMappings.Add("MAT_DISCHARGETIME", "MAT_DISCHARGETIME")
            tableMapping.ColumnMappings.Add("MAT_OVERSHOOT", "MAT_OVERSHOOT")
            tableMapping.ColumnMappings.Add("MAT_FLOWRATE", "MAT_FLOWRATE")
            tableMapping.ColumnMappings.Add("MAT_POS_TOL", "MAT_POS_TOL")
            tableMapping.ColumnMappings.Add("MAT_NEG_TOL", "MAT_NEG_TOL")
            tableMapping.ColumnMappings.Add("MAT_CALMINGTIME", "MAT_CALMINGTIME")
            tableMapping.ColumnMappings.Add("MAT_RESTART_MODE", "MAT_RESTART_MODE")
            tableMapping.ColumnMappings.Add("MAT_A1_MAX", "MAT_A1_MAX")
            tableMapping.ColumnMappings.Add("MAT_A1_MIN", "MAT_A1_MIN")
            tableMapping.ColumnMappings.Add("MAT_A1_UNIT", "MAT_A1_UNIT")
            tableMapping.ColumnMappings.Add("MAT_ABORT", "MAT_ABORT")
            tableMapping.ColumnMappings.Add("MAT_TIMEOUT", "MAT_TIMEOUT")
            tableMapping.ColumnMappings.Add("MAT_TOLERANCE_ALARM", "MAT_TOLERANCE_ALARM")
            tableMapping.ColumnMappings.Add("MAT_ADC_ERROR", "MAT_ADC_ERROR")
            tableMapping.ColumnMappings.Add("MAT_SKIP", "MAT_SKIP")
            tableMapping.ColumnMappings.Add("MAT_FLOW_ALARM", "MAT_FLOW_ALARM")
            tableMapping.ColumnMappings.Add("MAT_POS_TOL_UNIT", "MAT_POS_TOL_UNIT")
            tableMapping.ColumnMappings.Add("MAT_NEG_TOL_UNIT", "MAT_NEG_TOL_UNIT")
            tableMapping.ColumnMappings.Add("MAT_ORDER", "MAT_ORDER")
            tableMapping.ColumnMappings.Add("MAT_DELIVERY", "MAT_DELIVERY")
            tableMapping.ColumnMappings.Add("MAT_LOT", "MAT_LOT")
            tableMapping.ColumnMappings.Add("MAT_DATETIME", "MAT_DATETIME")
            tableMapping.ColumnMappings.Add("SUBREC_STARTED", "SUBREC_STARTED")
            tableMapping.ColumnMappings.Add("MAT_REPORT_READY", "MAT_REPORT_READY")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            tableMapping.ColumnMappings.Add("SCRIPT_CIC", "SCRIPT_CIC")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_COD_SRC", "SCRIPT_VAR_COD_SRC")
            tableMapping.ColumnMappings.Add("LABEL_PRINT", "LABEL_PRINT")
            tableMapping.ColumnMappings.Add("LABEL_COPIES", "LABEL_COPIES")
            tableMapping.ColumnMappings.Add("LABEL_NAME", "LABEL_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `RECIPE` WHERE ((`PRODLINE_IDENT` = ?) AND (`RECIPE_IDENT` = ?) AND ("& _ 
                "`RECIPE_LINE` = ?) AND (`BATCH_NUMBER` = ?) AND ((? = 1 AND `RECIPE_LINE_STATUS`"& _ 
                " IS NULL) OR (`RECIPE_LINE_STATUS` = ?)) AND ((? = 1 AND `RECIPE_LINE_PARA` IS N"& _ 
                "ULL) OR (`RECIPE_LINE_PARA` = ?)) AND ((? = 1 AND `MAT_IDENT` IS NULL) OR (`MAT_"& _ 
                "IDENT` = ?)) AND ((? = 1 AND `MAT_NAME` IS NULL) OR (`MAT_NAME` = ?)) AND ((? = "& _ 
                "1 AND `MAT_PARA` IS NULL) OR (`MAT_PARA` = ?)) AND ((? = 1 AND `MAT_SETPOINT` IS"& _ 
                " NULL) OR (`MAT_SETPOINT` = ?)) AND ((? = 1 AND `MAT_CALCSETP` IS NULL) OR (`MAT"& _ 
                "_CALCSETP` = ?)) AND ((? = 1 AND `MAT_ACTVALUE` IS NULL) OR (`MAT_ACTVALUE` = ?)"& _ 
                ") AND ((? = 1 AND `MAT_UNIT` IS NULL) OR (`MAT_UNIT` = ?)) AND ((? = 1 AND `MAT_"& _ 
                "DECIMALPOINT` IS NULL) OR (`MAT_DECIMALPOINT` = ?)) AND ((? = 1 AND `BREAKPOINT`"& _ 
                " IS NULL) OR (`BREAKPOINT` = ?)) AND ((? = 1 AND `MAT_CALCULATE_SETPOINT` IS NUL"& _ 
                "L) OR (`MAT_CALCULATE_SETPOINT` = ?)) AND ((? = 1 AND `WP_ADDRESS` IS NULL) OR ("& _ 
                "`WP_ADDRESS` = ?)) AND ((? = 1 AND `WP_IDENT` IS NULL) OR (`WP_IDENT` = ?)) AND "& _ 
                "((? = 1 AND `WP_NAME` IS NULL) OR (`WP_NAME` = ?)) AND ((? = 1 AND `MAT_BATCH_MO"& _ 
                "DE` IS NULL) OR (`MAT_BATCH_MODE` = ?)) AND ((? = 1 AND `MAT_SPM_INADR` IS NULL)"& _ 
                " OR (`MAT_SPM_INADR` = ?)) AND ((? = 1 AND `MAT_SPM_OUTADR` IS NULL) OR (`MAT_SP"& _ 
                "M_OUTADR` = ?)) AND ((? = 1 AND `MAT_ADD_TO_TOTAL` IS NULL) OR (`MAT_ADD_TO_TOTA"& _ 
                "L` = ?)) AND ((? = 1 AND `MAT_BATCH_REPORT` IS NULL) OR (`MAT_BATCH_REPORT` = ?)"& _ 
                ") AND ((? = 1 AND `MAT_PROD_REPORT` IS NULL) OR (`MAT_PROD_REPORT` = ?)) AND ((?"& _ 
                " = 1 AND `MAT_PRESET` IS NULL) OR (`MAT_PRESET` = ?)) AND ((? = 1 AND `MAT_DISCH"& _ 
                "ARGETIME` IS NULL) OR (`MAT_DISCHARGETIME` = ?)) AND ((? = 1 AND `MAT_OVERSHOOT`"& _ 
                " IS NULL) OR (`MAT_OVERSHOOT` = ?)) AND ((? = 1 AND `MAT_FLOWRATE` IS NULL) OR ("& _ 
                "`MAT_FLOWRATE` = ?)) AND ((? = 1 AND `MAT_POS_TOL` IS NULL) OR (`MAT_POS_TOL` = "& _ 
                "?)) AND ((? = 1 AND `MAT_NEG_TOL` IS NULL) OR (`MAT_NEG_TOL` = ?)) AND ((? = 1 A"& _ 
                "ND `MAT_CALMINGTIME` IS NULL) OR (`MAT_CALMINGTIME` = ?)) AND ((? = 1 AND `MAT_R"& _ 
                "ESTART_MODE` IS NULL) OR (`MAT_RESTART_MODE` = ?)) AND ((? = 1 AND `MAT_A1_MAX` "& _ 
                "IS NULL) OR (`MAT_A1_MAX` = ?)) AND ((? = 1 AND `MAT_A1_MIN` IS NULL) OR (`MAT_A"& _ 
                "1_MIN` = ?)) AND ((? = 1 AND `MAT_A1_UNIT` IS NULL) OR (`MAT_A1_UNIT` = ?)) AND "& _ 
                "((? = 1 AND `MAT_ABORT` IS NULL) OR (`MAT_ABORT` = ?)) AND ((? = 1 AND `MAT_TIME"& _ 
                "OUT` IS NULL) OR (`MAT_TIMEOUT` = ?)) AND ((? = 1 AND `MAT_TOLERANCE_ALARM` IS N"& _ 
                "ULL) OR (`MAT_TOLERANCE_ALARM` = ?)) AND ((? = 1 AND `MAT_ADC_ERROR` IS NULL) OR"& _ 
                " (`MAT_ADC_ERROR` = ?)) AND ((? = 1 AND `MAT_SKIP` IS NULL) OR (`MAT_SKIP` = ?))"& _ 
                " AND ((? = 1 AND `MAT_FLOW_ALARM` IS NULL) OR (`MAT_FLOW_ALARM` = ?)) AND ((? = "& _ 
                "1 AND `MAT_POS_TOL_UNIT` IS NULL) OR (`MAT_POS_TOL_UNIT` = ?)) AND ((? = 1 AND `"& _ 
                "MAT_NEG_TOL_UNIT` IS NULL) OR (`MAT_NEG_TOL_UNIT` = ?)) AND ((? = 1 AND `MAT_ORD"& _ 
                "ER` IS NULL) OR (`MAT_ORDER` = ?)) AND ((? = 1 AND `MAT_DELIVERY` IS NULL) OR (`"& _ 
                "MAT_DELIVERY` = ?)) AND ((? = 1 AND `MAT_LOT` IS NULL) OR (`MAT_LOT` = ?)) AND ("& _ 
                "(? = 1 AND `MAT_DATETIME` IS NULL) OR (`MAT_DATETIME` = ?)) AND ((? = 1 AND `SUB"& _ 
                "REC_STARTED` IS NULL) OR (`SUBREC_STARTED` = ?)) AND ((? = 1 AND `MAT_REPORT_REA"& _ 
                "DY` IS NULL) OR (`MAT_REPORT_READY` = ?)) AND ((? = 1 AND `LABEL_PRINT` IS NULL)"& _ 
                " OR (`LABEL_PRINT` = ?)) AND ((? = 1 AND `LABEL_COPIES` IS NULL) OR (`LABEL_COPI"& _ 
                "ES` = ?)) AND ((? = 1 AND `LABEL_NAME` IS NULL) OR (`LABEL_NAME` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ORDER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_LOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `RECIPE` (`PRODLINE_IDENT`, `RECIPE_IDENT`, `RECIPE_LINE`, `BATCH_NUM"& _ 
                "BER`, `RECIPE_LINE_STATUS`, `RECIPE_LINE_PARA`, `MAT_IDENT`, `MAT_NAME`, `MAT_PA"& _ 
                "RA`, `MAT_SETPOINT`, `MAT_CALCSETP`, `MAT_ACTVALUE`, `MAT_UNIT`, `MAT_DECIMALPOI"& _ 
                "NT`, `BREAKPOINT`, `MAT_CALCULATE_SETPOINT`, `WP_ADDRESS`, `WP_IDENT`, `WP_NAME`"& _ 
                ", `MAT_BATCH_MODE`, `MAT_SPM_INADR`, `MAT_SPM_OUTADR`, `MAT_ADD_TO_TOTAL`, `MAT_"& _ 
                "BATCH_REPORT`, `MAT_PROD_REPORT`, `MAT_PRESET`, `MAT_DISCHARGETIME`, `MAT_OVERSH"& _ 
                "OOT`, `MAT_FLOWRATE`, `MAT_POS_TOL`, `MAT_NEG_TOL`, `MAT_CALMINGTIME`, `MAT_REST"& _ 
                "ART_MODE`, `MAT_A1_MAX`, `MAT_A1_MIN`, `MAT_A1_UNIT`, `MAT_ABORT`, `MAT_TIMEOUT`"& _ 
                ", `MAT_TOLERANCE_ALARM`, `MAT_ADC_ERROR`, `MAT_SKIP`, `MAT_FLOW_ALARM`, `MAT_POS"& _ 
                "_TOL_UNIT`, `MAT_NEG_TOL_UNIT`, `MAT_ORDER`, `MAT_DELIVERY`, `MAT_LOT`, `MAT_DAT"& _ 
                "ETIME`, `SUBREC_STARTED`, `MAT_REPORT_READY`, `SCRIPT_DIT`, `SCRIPT_CIC`, `SCRIP"& _ 
                "T_VAR_COD_SRC`, `LABEL_PRINT`, `LABEL_COPIES`, `LABEL_NAME`) VALUES (?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_CIC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_CIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `RECIPE` SET `PRODLINE_IDENT` = ?, `RECIPE_IDENT` = ?, `RECIPE_LINE` = ?, "& _ 
                "`BATCH_NUMBER` = ?, `RECIPE_LINE_STATUS` = ?, `RECIPE_LINE_PARA` = ?, `MAT_IDENT"& _ 
                "` = ?, `MAT_NAME` = ?, `MAT_PARA` = ?, `MAT_SETPOINT` = ?, `MAT_CALCSETP` = ?, `"& _ 
                "MAT_ACTVALUE` = ?, `MAT_UNIT` = ?, `MAT_DECIMALPOINT` = ?, `BREAKPOINT` = ?, `MA"& _ 
                "T_CALCULATE_SETPOINT` = ?, `WP_ADDRESS` = ?, `WP_IDENT` = ?, `WP_NAME` = ?, `MAT"& _ 
                "_BATCH_MODE` = ?, `MAT_SPM_INADR` = ?, `MAT_SPM_OUTADR` = ?, `MAT_ADD_TO_TOTAL` "& _ 
                "= ?, `MAT_BATCH_REPORT` = ?, `MAT_PROD_REPORT` = ?, `MAT_PRESET` = ?, `MAT_DISCH"& _ 
                "ARGETIME` = ?, `MAT_OVERSHOOT` = ?, `MAT_FLOWRATE` = ?, `MAT_POS_TOL` = ?, `MAT_"& _ 
                "NEG_TOL` = ?, `MAT_CALMINGTIME` = ?, `MAT_RESTART_MODE` = ?, `MAT_A1_MAX` = ?, `"& _ 
                "MAT_A1_MIN` = ?, `MAT_A1_UNIT` = ?, `MAT_ABORT` = ?, `MAT_TIMEOUT` = ?, `MAT_TOL"& _ 
                "ERANCE_ALARM` = ?, `MAT_ADC_ERROR` = ?, `MAT_SKIP` = ?, `MAT_FLOW_ALARM` = ?, `M"& _ 
                "AT_POS_TOL_UNIT` = ?, `MAT_NEG_TOL_UNIT` = ?, `MAT_ORDER` = ?, `MAT_DELIVERY` = "& _ 
                "?, `MAT_LOT` = ?, `MAT_DATETIME` = ?, `SUBREC_STARTED` = ?, `MAT_REPORT_READY` ="& _ 
                " ?, `SCRIPT_DIT` = ?, `SCRIPT_CIC` = ?, `SCRIPT_VAR_COD_SRC` = ?, `LABEL_PRINT` "& _ 
                "= ?, `LABEL_COPIES` = ?, `LABEL_NAME` = ? WHERE ((`PRODLINE_IDENT` = ?) AND (`RE"& _ 
                "CIPE_IDENT` = ?) AND (`RECIPE_LINE` = ?) AND (`BATCH_NUMBER` = ?) AND ((? = 1 AN"& _ 
                "D `RECIPE_LINE_STATUS` IS NULL) OR (`RECIPE_LINE_STATUS` = ?)) AND ((? = 1 AND `"& _ 
                "RECIPE_LINE_PARA` IS NULL) OR (`RECIPE_LINE_PARA` = ?)) AND ((? = 1 AND `MAT_IDE"& _ 
                "NT` IS NULL) OR (`MAT_IDENT` = ?)) AND ((? = 1 AND `MAT_NAME` IS NULL) OR (`MAT_"& _ 
                "NAME` = ?)) AND ((? = 1 AND `MAT_PARA` IS NULL) OR (`MAT_PARA` = ?)) AND ((? = 1"& _ 
                " AND `MAT_SETPOINT` IS NULL) OR (`MAT_SETPOINT` = ?)) AND ((? = 1 AND `MAT_CALCS"& _ 
                "ETP` IS NULL) OR (`MAT_CALCSETP` = ?)) AND ((? = 1 AND `MAT_ACTVALUE` IS NULL) O"& _ 
                "R (`MAT_ACTVALUE` = ?)) AND ((? = 1 AND `MAT_UNIT` IS NULL) OR (`MAT_UNIT` = ?))"& _ 
                " AND ((? = 1 AND `MAT_DECIMALPOINT` IS NULL) OR (`MAT_DECIMALPOINT` = ?)) AND (("& _ 
                "? = 1 AND `BREAKPOINT` IS NULL) OR (`BREAKPOINT` = ?)) AND ((? = 1 AND `MAT_CALC"& _ 
                "ULATE_SETPOINT` IS NULL) OR (`MAT_CALCULATE_SETPOINT` = ?)) AND ((? = 1 AND `WP_"& _ 
                "ADDRESS` IS NULL) OR (`WP_ADDRESS` = ?)) AND ((? = 1 AND `WP_IDENT` IS NULL) OR "& _ 
                "(`WP_IDENT` = ?)) AND ((? = 1 AND `WP_NAME` IS NULL) OR (`WP_NAME` = ?)) AND ((?"& _ 
                " = 1 AND `MAT_BATCH_MODE` IS NULL) OR (`MAT_BATCH_MODE` = ?)) AND ((? = 1 AND `M"& _ 
                "AT_SPM_INADR` IS NULL) OR (`MAT_SPM_INADR` = ?)) AND ((? = 1 AND `MAT_SPM_OUTADR"& _ 
                "` IS NULL) OR (`MAT_SPM_OUTADR` = ?)) AND ((? = 1 AND `MAT_ADD_TO_TOTAL` IS NULL"& _ 
                ") OR (`MAT_ADD_TO_TOTAL` = ?)) AND ((? = 1 AND `MAT_BATCH_REPORT` IS NULL) OR (`"& _ 
                "MAT_BATCH_REPORT` = ?)) AND ((? = 1 AND `MAT_PROD_REPORT` IS NULL) OR (`MAT_PROD"& _ 
                "_REPORT` = ?)) AND ((? = 1 AND `MAT_PRESET` IS NULL) OR (`MAT_PRESET` = ?)) AND "& _ 
                "((? = 1 AND `MAT_DISCHARGETIME` IS NULL) OR (`MAT_DISCHARGETIME` = ?)) AND ((? ="& _ 
                " 1 AND `MAT_OVERSHOOT` IS NULL) OR (`MAT_OVERSHOOT` = ?)) AND ((? = 1 AND `MAT_F"& _ 
                "LOWRATE` IS NULL) OR (`MAT_FLOWRATE` = ?)) AND ((? = 1 AND `MAT_POS_TOL` IS NULL"& _ 
                ") OR (`MAT_POS_TOL` = ?)) AND ((? = 1 AND `MAT_NEG_TOL` IS NULL) OR (`MAT_NEG_TO"& _ 
                "L` = ?)) AND ((? = 1 AND `MAT_CALMINGTIME` IS NULL) OR (`MAT_CALMINGTIME` = ?)) "& _ 
                "AND ((? = 1 AND `MAT_RESTART_MODE` IS NULL) OR (`MAT_RESTART_MODE` = ?)) AND ((?"& _ 
                " = 1 AND `MAT_A1_MAX` IS NULL) OR (`MAT_A1_MAX` = ?)) AND ((? = 1 AND `MAT_A1_MI"& _ 
                "N` IS NULL) OR (`MAT_A1_MIN` = ?)) AND ((? = 1 AND `MAT_A1_UNIT` IS NULL) OR (`M"& _ 
                "AT_A1_UNIT` = ?)) AND ((? = 1 AND `MAT_ABORT` IS NULL) OR (`MAT_ABORT` = ?)) AND"& _ 
                " ((? = 1 AND `MAT_TIMEOUT` IS NULL) OR (`MAT_TIMEOUT` = ?)) AND ((? = 1 AND `MAT"& _ 
                "_TOLERANCE_ALARM` IS NULL) OR (`MAT_TOLERANCE_ALARM` = ?)) AND ((? = 1 AND `MAT_"& _ 
                "ADC_ERROR` IS NULL) OR (`MAT_ADC_ERROR` = ?)) AND ((? = 1 AND `MAT_SKIP` IS NULL"& _ 
                ") OR (`MAT_SKIP` = ?)) AND ((? = 1 AND `MAT_FLOW_ALARM` IS NULL) OR (`MAT_FLOW_A"& _ 
                "LARM` = ?)) AND ((? = 1 AND `MAT_POS_TOL_UNIT` IS NULL) OR (`MAT_POS_TOL_UNIT` ="& _ 
                " ?)) AND ((? = 1 AND `MAT_NEG_TOL_UNIT` IS NULL) OR (`MAT_NEG_TOL_UNIT` = ?)) AN"& _ 
                "D ((? = 1 AND `MAT_ORDER` IS NULL) OR (`MAT_ORDER` = ?)) AND ((? = 1 AND `MAT_DE"& _ 
                "LIVERY` IS NULL) OR (`MAT_DELIVERY` = ?)) AND ((? = 1 AND `MAT_LOT` IS NULL) OR "& _ 
                "(`MAT_LOT` = ?)) AND ((? = 1 AND `MAT_DATETIME` IS NULL) OR (`MAT_DATETIME` = ?)"& _ 
                ") AND ((? = 1 AND `SUBREC_STARTED` IS NULL) OR (`SUBREC_STARTED` = ?)) AND ((? ="& _ 
                " 1 AND `MAT_REPORT_READY` IS NULL) OR (`MAT_REPORT_READY` = ?)) AND ((? = 1 AND "& _ 
                "`LABEL_PRINT` IS NULL) OR (`LABEL_PRINT` = ?)) AND ((? = 1 AND `LABEL_COPIES` IS"& _ 
                " NULL) OR (`LABEL_COPIES` = ?)) AND ((? = 1 AND `LABEL_NAME` IS NULL) OR (`LABEL"& _ 
                "_NAME` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_CIC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_CIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCSETP", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCSETP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ACTVALUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ACTVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BREAKPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BREAKPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ABORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ABORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_TOLERANCE_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_TOLERANCE_ALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADC_ERROR", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADC_ERROR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SKIP", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SKIP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOW_ALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOW_ALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ORDER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_LOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUBREC_STARTED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUBREC_STARTED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_REPORT_READY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_REPORT_READY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE, BATCH_NUMBER, RECIPE_LINE_STATU"& _ 
                "S, RECIPE_LINE_PARA, MAT_IDENT, MAT_NAME, MAT_PARA, MAT_SETPOINT, MAT_CALCSETP, "& _ 
                "MAT_ACTVALUE, MAT_UNIT, MAT_DECIMALPOINT, BREAKPOINT, MAT_CALCULATE_SETPOINT, WP"& _ 
                "_ADDRESS, WP_IDENT, WP_NAME, MAT_BATCH_MODE, MAT_SPM_INADR, MAT_SPM_OUTADR, MAT_"& _ 
                "ADD_TO_TOTAL, MAT_BATCH_REPORT, MAT_PROD_REPORT, MAT_PRESET, MAT_DISCHARGETIME, "& _ 
                "MAT_OVERSHOOT, MAT_FLOWRATE, MAT_POS_TOL, MAT_NEG_TOL, MAT_CALMINGTIME, MAT_REST"& _ 
                "ART_MODE, MAT_A1_MAX, MAT_A1_MIN, MAT_A1_UNIT, MAT_ABORT, MAT_TIMEOUT, MAT_TOLER"& _ 
                "ANCE_ALARM, MAT_ADC_ERROR, MAT_SKIP, MAT_FLOW_ALARM, MAT_POS_TOL_UNIT, MAT_NEG_T"& _ 
                "OL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SUBREC_STARTED, MAT_REP"& _ 
                "ORT_READY, SCRIPT_DIT, SCRIPT_CIC, SCRIPT_VAR_COD_SRC, LABEL_PRINT, LABEL_COPIES"& _ 
                ", LABEL_NAME FROM RECIPE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.RECIPEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.RECIPEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.RECIPEDataTable = New _840002C1DataSet.RECIPEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.RECIPEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RECIPE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_LINE As Short,  _
                    ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_PARA As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_UNIT As String,  _
                    ByVal Original_MAT_DECIMALPOINT As Short,  _
                    ByVal Original_BREAKPOINT As Boolean,  _
                    ByVal Original_MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal Original_WP_ADDRESS As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_WP_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_ABORT As Boolean,  _
                    ByVal Original_MAT_TIMEOUT As Boolean,  _
                    ByVal Original_MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal Original_MAT_ADC_ERROR As Boolean,  _
                    ByVal Original_MAT_SKIP As Boolean,  _
                    ByVal Original_MAT_FLOW_ALARM As Boolean,  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SUBREC_STARTED As Boolean,  _
                    ByVal Original_MAT_REPORT_READY As Boolean,  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RECIPE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RECIPE_LINE,Short)
            If (Original_BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_LINE_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_RECIPE_LINE_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_RECIPE_LINE_PARA,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_MAT_NAME,String)
            End If
            If (Original_MAT_PARA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_MAT_PARA,String)
            End If
            If (Original_MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALCSETP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_MAT_CALCSETP.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_ACTVALUE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_MAT_ACTVALUE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_MAT_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_MAT_DECIMALPOINT,Short)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_BREAKPOINT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_MAT_CALCULATE_SETPOINT,Boolean)
            If (Original_WP_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_WP_ADDRESS,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WP_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_WP_IDENT,String)
            End If
            If (Original_WP_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_WP_NAME,String)
            End If
            If (Original_MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_BATCH_MODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_MAT_BATCH_MODE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_MAT_SPM_INADR,Short)
            Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_MAT_SPM_OUTADR,Short)
            Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_MAT_BATCH_REPORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_MAT_PROD_REPORT,Boolean)
            If (Original_MAT_PRESET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_MAT_PRESET.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_MAT_RESTART_MODE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_MAT_A1_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_MAT_ABORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_MAT_TIMEOUT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_MAT_TOLERANCE_ALARM,Boolean)
            Me.Adapter.DeleteCommand.Parameters(74).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(75).Value = CType(Original_MAT_ADC_ERROR,Boolean)
            Me.Adapter.DeleteCommand.Parameters(76).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(77).Value = CType(Original_MAT_SKIP,Boolean)
            Me.Adapter.DeleteCommand.Parameters(78).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(79).Value = CType(Original_MAT_FLOW_ALARM,Boolean)
            If (Original_MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(Original_MAT_POS_TOL_UNIT,String)
            End If
            If (Original_MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(Original_MAT_NEG_TOL_UNIT,String)
            End If
            If (Original_MAT_ORDER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(Original_MAT_ORDER,String)
            End If
            If (Original_MAT_DELIVERY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(Original_MAT_DELIVERY,String)
            End If
            If (Original_MAT_LOT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(Original_MAT_LOT,String)
            End If
            If (Original_MAT_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(Original_MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(92).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(93).Value = CType(Original_SUBREC_STARTED,Boolean)
            Me.Adapter.DeleteCommand.Parameters(94).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(95).Value = CType(Original_MAT_REPORT_READY,Boolean)
            Me.Adapter.DeleteCommand.Parameters(96).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(97).Value = CType(Original_LABEL_PRINT,Boolean)
            If (Original_LABEL_COPIES.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(Original_LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_LABEL_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(Original_LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_LINE As Short,  _
                    ByVal BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_LINE_PARA As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_UNIT As String,  _
                    ByVal MAT_DECIMALPOINT As Short,  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_ABORT As Boolean,  _
                    ByVal MAT_TIMEOUT As Boolean,  _
                    ByVal MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal MAT_ADC_ERROR As Boolean,  _
                    ByVal MAT_SKIP As Boolean,  _
                    ByVal MAT_FLOW_ALARM As Boolean,  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SUBREC_STARTED As Boolean,  _
                    ByVal MAT_REPORT_READY As Boolean,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(RECIPE_LINE,Short)
            If (BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_LINE_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(RECIPE_LINE_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RECIPE_LINE_PARA,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAT_NAME,String)
            End If
            If (MAT_PARA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAT_PARA,String)
            End If
            If (MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALCSETP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MAT_CALCSETP.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MAT_ACTVALUE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MAT_ACTVALUE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAT_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MAT_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(MAT_DECIMALPOINT,Short)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(BREAKPOINT,Boolean)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(MAT_CALCULATE_SETPOINT,Boolean)
            If (WP_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(WP_ADDRESS,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WP_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(WP_IDENT,String)
            End If
            If (WP_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(WP_NAME,String)
            End If
            If (MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_BATCH_MODE")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MAT_BATCH_MODE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(MAT_SPM_INADR,Short)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(MAT_SPM_OUTADR,Short)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(MAT_BATCH_REPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(MAT_PROD_REPORT,Boolean)
            If (MAT_PRESET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(MAT_PRESET.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(MAT_RESTART_MODE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(MAT_A1_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(36).Value = CType(MAT_ABORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(37).Value = CType(MAT_TIMEOUT,Boolean)
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(MAT_TOLERANCE_ALARM,Boolean)
            Me.Adapter.InsertCommand.Parameters(39).Value = CType(MAT_ADC_ERROR,Boolean)
            Me.Adapter.InsertCommand.Parameters(40).Value = CType(MAT_SKIP,Boolean)
            Me.Adapter.InsertCommand.Parameters(41).Value = CType(MAT_FLOW_ALARM,Boolean)
            If (MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(MAT_POS_TOL_UNIT,String)
            End If
            If (MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(MAT_NEG_TOL_UNIT,String)
            End If
            If (MAT_ORDER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(MAT_ORDER,String)
            End If
            If (MAT_DELIVERY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(MAT_DELIVERY,String)
            End If
            If (MAT_LOT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(MAT_LOT,String)
            End If
            If (MAT_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(48).Value = CType(SUBREC_STARTED,Boolean)
            Me.Adapter.InsertCommand.Parameters(49).Value = CType(MAT_REPORT_READY,Boolean)
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(SCRIPT_DIT,String)
            End If
            If (SCRIPT_CIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(SCRIPT_CIC,String)
            End If
            If (SCRIPT_VAR_COD_SRC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(SCRIPT_VAR_COD_SRC,String)
            End If
            Me.Adapter.InsertCommand.Parameters(53).Value = CType(LABEL_PRINT,Boolean)
            If (LABEL_COPIES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (LABEL_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_LINE As Short,  _
                    ByVal BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_LINE_PARA As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_UNIT As String,  _
                    ByVal MAT_DECIMALPOINT As Short,  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_ABORT As Boolean,  _
                    ByVal MAT_TIMEOUT As Boolean,  _
                    ByVal MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal MAT_ADC_ERROR As Boolean,  _
                    ByVal MAT_SKIP As Boolean,  _
                    ByVal MAT_FLOW_ALARM As Boolean,  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SUBREC_STARTED As Boolean,  _
                    ByVal MAT_REPORT_READY As Boolean,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_LINE As Short,  _
                    ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_PARA As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_UNIT As String,  _
                    ByVal Original_MAT_DECIMALPOINT As Short,  _
                    ByVal Original_BREAKPOINT As Boolean,  _
                    ByVal Original_MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal Original_WP_ADDRESS As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_WP_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_ABORT As Boolean,  _
                    ByVal Original_MAT_TIMEOUT As Boolean,  _
                    ByVal Original_MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal Original_MAT_ADC_ERROR As Boolean,  _
                    ByVal Original_MAT_SKIP As Boolean,  _
                    ByVal Original_MAT_FLOW_ALARM As Boolean,  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SUBREC_STARTED As Boolean,  _
                    ByVal Original_MAT_REPORT_READY As Boolean,  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RECIPE_LINE,Short)
            If (BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_LINE_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RECIPE_LINE_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RECIPE_LINE_PARA,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAT_NAME,String)
            End If
            If (MAT_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAT_PARA,String)
            End If
            If (MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALCSETP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(MAT_CALCSETP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MAT_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MAT_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MAT_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MAT_DECIMALPOINT,Short)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(BREAKPOINT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(MAT_CALCULATE_SETPOINT,Boolean)
            If (WP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(WP_ADDRESS,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WP_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(WP_IDENT,String)
            End If
            If (WP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(WP_NAME,String)
            End If
            If (MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_BATCH_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MAT_BATCH_MODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(MAT_SPM_INADR,Short)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MAT_SPM_OUTADR,Short)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MAT_BATCH_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MAT_PROD_REPORT,Boolean)
            If (MAT_PRESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(MAT_PRESET.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(MAT_RESTART_MODE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(MAT_A1_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(MAT_ABORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(MAT_TIMEOUT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(MAT_TOLERANCE_ALARM,Boolean)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(MAT_ADC_ERROR,Boolean)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(MAT_SKIP,Boolean)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(MAT_FLOW_ALARM,Boolean)
            If (MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(MAT_POS_TOL_UNIT,String)
            End If
            If (MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(MAT_NEG_TOL_UNIT,String)
            End If
            If (MAT_ORDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(MAT_ORDER,String)
            End If
            If (MAT_DELIVERY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(MAT_DELIVERY,String)
            End If
            If (MAT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(MAT_LOT,String)
            End If
            If (MAT_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(SUBREC_STARTED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(MAT_REPORT_READY,Boolean)
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(SCRIPT_DIT,String)
            End If
            If (SCRIPT_CIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(SCRIPT_CIC,String)
            End If
            If (SCRIPT_VAR_COD_SRC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(SCRIPT_VAR_COD_SRC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(LABEL_PRINT,Boolean)
            If (LABEL_COPIES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (LABEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(LABEL_NAME,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_RECIPE_LINE,Short)
            If (Original_BATCH_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_BATCH_NUMBER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_LINE_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_RECIPE_LINE_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_RECIPE_LINE_PARA,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_MAT_NAME,String)
            End If
            If (Original_MAT_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_MAT_PARA,String)
            End If
            If (Original_MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALCSETP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_MAT_CALCSETP.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_ACTVALUE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_MAT_ACTVALUE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_MAT_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_MAT_DECIMALPOINT,Short)
            Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_BREAKPOINT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_MAT_CALCULATE_SETPOINT,Boolean)
            If (Original_WP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_WP_ADDRESS,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WP_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_WP_IDENT,String)
            End If
            If (Original_WP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_WP_NAME,String)
            End If
            If (Original_MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_BATCH_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_MAT_BATCH_MODE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_MAT_SPM_INADR,Short)
            Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_MAT_SPM_OUTADR,Short)
            Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_MAT_BATCH_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_MAT_PROD_REPORT,Boolean)
            If (Original_MAT_PRESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_MAT_PRESET.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_MAT_RESTART_MODE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_MAT_A1_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_MAT_ABORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_MAT_TIMEOUT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_MAT_TOLERANCE_ALARM,Boolean)
            Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_MAT_ADC_ERROR,Boolean)
            Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_MAT_SKIP,Boolean)
            Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_MAT_FLOW_ALARM,Boolean)
            If (Original_MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_MAT_POS_TOL_UNIT,String)
            End If
            If (Original_MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_MAT_NEG_TOL_UNIT,String)
            End If
            If (Original_MAT_ORDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_MAT_ORDER,String)
            End If
            If (Original_MAT_DELIVERY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_MAT_DELIVERY,String)
            End If
            If (Original_MAT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_MAT_LOT,String)
            End If
            If (Original_MAT_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_SUBREC_STARTED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_MAT_REPORT_READY,Boolean)
            Me.Adapter.UpdateCommand.Parameters(152).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_LABEL_PRINT,Boolean)
            If (Original_LABEL_COPIES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            End If
            If (Original_LABEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_LINE_PARA As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_UNIT As String,  _
                    ByVal MAT_DECIMALPOINT As Short,  _
                    ByVal BREAKPOINT As Boolean,  _
                    ByVal MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_ABORT As Boolean,  _
                    ByVal MAT_TIMEOUT As Boolean,  _
                    ByVal MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal MAT_ADC_ERROR As Boolean,  _
                    ByVal MAT_SKIP As Boolean,  _
                    ByVal MAT_FLOW_ALARM As Boolean,  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SUBREC_STARTED As Boolean,  _
                    ByVal MAT_REPORT_READY As Boolean,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_LINE As Short,  _
                    ByVal Original_BATCH_NUMBER As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_LINE_PARA As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALCSETP As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_ACTVALUE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_UNIT As String,  _
                    ByVal Original_MAT_DECIMALPOINT As Short,  _
                    ByVal Original_BREAKPOINT As Boolean,  _
                    ByVal Original_MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal Original_WP_ADDRESS As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_WP_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Single),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_ABORT As Boolean,  _
                    ByVal Original_MAT_TIMEOUT As Boolean,  _
                    ByVal Original_MAT_TOLERANCE_ALARM As Boolean,  _
                    ByVal Original_MAT_ADC_ERROR As Boolean,  _
                    ByVal Original_MAT_SKIP As Boolean,  _
                    ByVal Original_MAT_FLOW_ALARM As Boolean,  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SUBREC_STARTED As Boolean,  _
                    ByVal Original_MAT_REPORT_READY As Boolean,  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_LINE, Original_BATCH_NUMBER, RECIPE_LINE_STATUS, RECIPE_LINE_PARA, MAT_IDENT, MAT_NAME, MAT_PARA, MAT_SETPOINT, MAT_CALCSETP, MAT_ACTVALUE, MAT_UNIT, MAT_DECIMALPOINT, BREAKPOINT, MAT_CALCULATE_SETPOINT, WP_ADDRESS, WP_IDENT, WP_NAME, MAT_BATCH_MODE, MAT_SPM_INADR, MAT_SPM_OUTADR, MAT_ADD_TO_TOTAL, MAT_BATCH_REPORT, MAT_PROD_REPORT, MAT_PRESET, MAT_DISCHARGETIME, MAT_OVERSHOOT, MAT_FLOWRATE, MAT_POS_TOL, MAT_NEG_TOL, MAT_CALMINGTIME, MAT_RESTART_MODE, MAT_A1_MAX, MAT_A1_MIN, MAT_A1_UNIT, MAT_ABORT, MAT_TIMEOUT, MAT_TOLERANCE_ALARM, MAT_ADC_ERROR, MAT_SKIP, MAT_FLOW_ALARM, MAT_POS_TOL_UNIT, MAT_NEG_TOL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SUBREC_STARTED, MAT_REPORT_READY, SCRIPT_DIT, SCRIPT_CIC, SCRIPT_VAR_COD_SRC, LABEL_PRINT, LABEL_COPIES, LABEL_NAME, Original_PRODLINE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_LINE, Original_BATCH_NUMBER, Original_RECIPE_LINE_STATUS, Original_RECIPE_LINE_PARA, Original_MAT_IDENT, Original_MAT_NAME, Original_MAT_PARA, Original_MAT_SETPOINT, Original_MAT_CALCSETP, Original_MAT_ACTVALUE, Original_MAT_UNIT, Original_MAT_DECIMALPOINT, Original_BREAKPOINT, Original_MAT_CALCULATE_SETPOINT, Original_WP_ADDRESS, Original_WP_IDENT, Original_WP_NAME, Original_MAT_BATCH_MODE, Original_MAT_SPM_INADR, Original_MAT_SPM_OUTADR, Original_MAT_ADD_TO_TOTAL, Original_MAT_BATCH_REPORT, Original_MAT_PROD_REPORT, Original_MAT_PRESET, Original_MAT_DISCHARGETIME, Original_MAT_OVERSHOOT, Original_MAT_FLOWRATE, Original_MAT_POS_TOL, Original_MAT_NEG_TOL, Original_MAT_CALMINGTIME, Original_MAT_RESTART_MODE, Original_MAT_A1_MAX, Original_MAT_A1_MIN, Original_MAT_A1_UNIT, Original_MAT_ABORT, Original_MAT_TIMEOUT, Original_MAT_TOLERANCE_ALARM, Original_MAT_ADC_ERROR, Original_MAT_SKIP, Original_MAT_FLOW_ALARM, Original_MAT_POS_TOL_UNIT, Original_MAT_NEG_TOL_UNIT, Original_MAT_ORDER, Original_MAT_DELIVERY, Original_MAT_LOT, Original_MAT_DATETIME, Original_SUBREC_STARTED, Original_MAT_REPORT_READY, Original_LABEL_PRINT, Original_LABEL_COPIES, Original_LABEL_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TMP_WP_MESSAGETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TMP_WP_MESSAGE"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("MESSAGE", "MESSAGE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `TMP_WP_MESSAGE` (`PRODLINE_IDENT`, `MESSAGE`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MESSAGE", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MESSAGE", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, MESSAGE FROM TMP_WP_MESSAGE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.TMP_WP_MESSAGEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.TMP_WP_MESSAGEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.TMP_WP_MESSAGEDataTable = New _840002C1DataSet.TMP_WP_MESSAGEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.TMP_WP_MESSAGEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TMP_WP_MESSAGE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal MESSAGE As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MESSAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MESSAGE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class USERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "USER"
            tableMapping.ColumnMappings.Add("USER", "USER")
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD")
            tableMapping.ColumnMappings.Add("PRODUCTION", "PRODUCTION")
            tableMapping.ColumnMappings.Add("RECIPE", "RECIPE")
            tableMapping.ColumnMappings.Add("MATERIAL", "MATERIAL")
            tableMapping.ColumnMappings.Add("REPORT", "REPORT")
            tableMapping.ColumnMappings.Add("SYSTEM", "SYSTEM")
            tableMapping.ColumnMappings.Add("TIMEOUT", "TIMEOUT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `USER` WHERE ((`USER` = ?) AND ((? = 1 AND `PASSWORD` IS NULL) OR (`P"& _ 
                "ASSWORD` = ?)) AND ((? = 1 AND `PRODUCTION` IS NULL) OR (`PRODUCTION` = ?)) AND "& _ 
                "((? = 1 AND `RECIPE` IS NULL) OR (`RECIPE` = ?)) AND ((? = 1 AND `MATERIAL` IS N"& _ 
                "ULL) OR (`MATERIAL` = ?)) AND ((? = 1 AND `REPORT` IS NULL) OR (`REPORT` = ?)) A"& _ 
                "ND ((? = 1 AND `SYSTEM` IS NULL) OR (`SYSTEM` = ?)) AND ((? = 1 AND `TIMEOUT` IS"& _ 
                " NULL) OR (`TIMEOUT` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PASSWORD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PASSWORD", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODUCTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODUCTION", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MATERIAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MATERIAL", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SYSTEM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SYSTEM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIMEOUT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `USER` (`USER`, `PASSWORD`, `PRODUCTION`, `RECIPE`, `MATERIAL`, `REPO"& _ 
                "RT`, `SYSTEM`, `TIMEOUT`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PASSWORD", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODUCTION", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MATERIAL", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SYSTEM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIMEOUT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `USER` SET `USER` = ?, `PASSWORD` = ?, `PRODUCTION` = ?, `RECIPE` = ?, `MA"& _ 
                "TERIAL` = ?, `REPORT` = ?, `SYSTEM` = ?, `TIMEOUT` = ? WHERE ((`USER` = ?) AND ("& _ 
                "(? = 1 AND `PASSWORD` IS NULL) OR (`PASSWORD` = ?)) AND ((? = 1 AND `PRODUCTION`"& _ 
                " IS NULL) OR (`PRODUCTION` = ?)) AND ((? = 1 AND `RECIPE` IS NULL) OR (`RECIPE` "& _ 
                "= ?)) AND ((? = 1 AND `MATERIAL` IS NULL) OR (`MATERIAL` = ?)) AND ((? = 1 AND `"& _ 
                "REPORT` IS NULL) OR (`REPORT` = ?)) AND ((? = 1 AND `SYSTEM` IS NULL) OR (`SYSTE"& _ 
                "M` = ?)) AND ((? = 1 AND `TIMEOUT` IS NULL) OR (`TIMEOUT` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PASSWORD", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODUCTION", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MATERIAL", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("REPORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SYSTEM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TIMEOUT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PASSWORD", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PASSWORD", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PASSWORD", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODUCTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODUCTION", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODUCTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MATERIAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MATERIAL", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MATERIAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_REPORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SYSTEM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SYSTEM", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYSTEM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TIMEOUT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [USER], [PASSWORD], PRODUCTION, RECIPE, MATERIAL, REPORT, SYSTEM, TIMEOUT "& _ 
                "FROM [USER]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.USERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.USERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.USERDataTable = New _840002C1DataSet.USERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.USERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "USER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_USER As String, ByVal Original_PASSWORD As String, ByVal Original_PRODUCTION As Short, ByVal Original_RECIPE As Short, ByVal Original_MATERIAL As Short, ByVal Original_REPORT As Short, ByVal Original_SYSTEM As Short, ByVal Original_TIMEOUT As Global.System.Nullable(Of Short)) As Integer
            If (Original_USER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_USER,String)
            End If
            If (Original_PASSWORD Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PASSWORD,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRODUCTION,Short)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_RECIPE,Short)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MATERIAL,Short)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_REPORT,Short)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SYSTEM,Short)
            If (Original_TIMEOUT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_TIMEOUT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal USER As String, ByVal PASSWORD As String, ByVal PRODUCTION As Short, ByVal RECIPE As Short, ByVal MATERIAL As Short, ByVal REPORT As Short, ByVal SYSTEM As Short, ByVal TIMEOUT As Global.System.Nullable(Of Short)) As Integer
            If (USER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(USER,String)
            End If
            If (PASSWORD Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PASSWORD,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRODUCTION,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(RECIPE,Short)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(MATERIAL,Short)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(REPORT,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(SYSTEM,Short)
            If (TIMEOUT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TIMEOUT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal USER As String,  _
                    ByVal PASSWORD As String,  _
                    ByVal PRODUCTION As Short,  _
                    ByVal RECIPE As Short,  _
                    ByVal MATERIAL As Short,  _
                    ByVal REPORT As Short,  _
                    ByVal SYSTEM As Short,  _
                    ByVal TIMEOUT As Global.System.Nullable(Of Short),  _
                    ByVal Original_USER As String,  _
                    ByVal Original_PASSWORD As String,  _
                    ByVal Original_PRODUCTION As Short,  _
                    ByVal Original_RECIPE As Short,  _
                    ByVal Original_MATERIAL As Short,  _
                    ByVal Original_REPORT As Short,  _
                    ByVal Original_SYSTEM As Short,  _
                    ByVal Original_TIMEOUT As Global.System.Nullable(Of Short)) As Integer
            If (USER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("USER")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(USER,String)
            End If
            If (PASSWORD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PASSWORD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRODUCTION,Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RECIPE,Short)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MATERIAL,Short)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(REPORT,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SYSTEM,Short)
            If (TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TIMEOUT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_USER Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_USER")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_USER,String)
            End If
            If (Original_PASSWORD Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PASSWORD,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PRODUCTION,Short)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RECIPE,Short)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MATERIAL,Short)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_REPORT,Short)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SYSTEM,Short)
            If (Original_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TIMEOUT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PASSWORD As String, ByVal PRODUCTION As Short, ByVal RECIPE As Short, ByVal MATERIAL As Short, ByVal REPORT As Short, ByVal SYSTEM As Short, ByVal TIMEOUT As Global.System.Nullable(Of Short), ByVal Original_USER As String, ByVal Original_PASSWORD As String, ByVal Original_PRODUCTION As Short, ByVal Original_RECIPE As Short, ByVal Original_MATERIAL As Short, ByVal Original_REPORT As Short, ByVal Original_SYSTEM As Short, ByVal Original_TIMEOUT As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_USER, PASSWORD, PRODUCTION, RECIPE, MATERIAL, REPORT, SYSTEM, TIMEOUT, Original_USER, Original_PASSWORD, Original_PRODUCTION, Original_RECIPE, Original_MATERIAL, Original_REPORT, Original_SYSTEM, Original_TIMEOUT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WINDOWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WINDOW"
            tableMapping.ColumnMappings.Add("FORM", "FORM")
            tableMapping.ColumnMappings.Add("CONTROL", "CONTROL")
            tableMapping.ColumnMappings.Add("TOP", "TOP")
            tableMapping.ColumnMappings.Add("LEFT", "LEFT")
            tableMapping.ColumnMappings.Add("WIDTH", "WIDTH")
            tableMapping.ColumnMappings.Add("HEIGHT", "HEIGHT")
            tableMapping.ColumnMappings.Add("FONT_SIZE", "FONT_SIZE")
            tableMapping.ColumnMappings.Add("STATE", "STATE")
            tableMapping.ColumnMappings.Add("COL0_WIDTH", "COL0_WIDTH")
            tableMapping.ColumnMappings.Add("COL1_WIDTH", "COL1_WIDTH")
            tableMapping.ColumnMappings.Add("COL2_WIDTH", "COL2_WIDTH")
            tableMapping.ColumnMappings.Add("COL3_WIDTH", "COL3_WIDTH")
            tableMapping.ColumnMappings.Add("COL4_WIDTH", "COL4_WIDTH")
            tableMapping.ColumnMappings.Add("COL5_WIDTH", "COL5_WIDTH")
            tableMapping.ColumnMappings.Add("COL6_WIDTH", "COL6_WIDTH")
            tableMapping.ColumnMappings.Add("COL7_WIDTH", "COL7_WIDTH")
            tableMapping.ColumnMappings.Add("COL8_WIDTH", "COL8_WIDTH")
            tableMapping.ColumnMappings.Add("COL9_WIDTH", "COL9_WIDTH")
            tableMapping.ColumnMappings.Add("COL10_WIDTH", "COL10_WIDTH")
            tableMapping.ColumnMappings.Add("COL11_WIDTH", "COL11_WIDTH")
            tableMapping.ColumnMappings.Add("COL12_WIDTH", "COL12_WIDTH")
            tableMapping.ColumnMappings.Add("COL13_WIDTH", "COL13_WIDTH")
            tableMapping.ColumnMappings.Add("COL14_WIDTH", "COL14_WIDTH")
            tableMapping.ColumnMappings.Add("COL15_WIDTH", "COL15_WIDTH")
            tableMapping.ColumnMappings.Add("COL16_WIDTH", "COL16_WIDTH")
            tableMapping.ColumnMappings.Add("COL17_WIDTH", "COL17_WIDTH")
            tableMapping.ColumnMappings.Add("COL18_WIDTH", "COL18_WIDTH")
            tableMapping.ColumnMappings.Add("COL19_WIDTH", "COL19_WIDTH")
            tableMapping.ColumnMappings.Add("COL20_WIDTH", "COL20_WIDTH")
            tableMapping.ColumnMappings.Add("COL21_WIDTH", "COL21_WIDTH")
            tableMapping.ColumnMappings.Add("COL22_WIDTH", "COL22_WIDTH")
            tableMapping.ColumnMappings.Add("COL23_WIDTH", "COL23_WIDTH")
            tableMapping.ColumnMappings.Add("COL24_WIDTH", "COL24_WIDTH")
            tableMapping.ColumnMappings.Add("COL25_WIDTH", "COL25_WIDTH")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `WINDOW` WHERE ((`FORM` = ?) AND (`CONTROL` = ?) AND ((? = 1 AND `TOP"& _ 
                "` IS NULL) OR (`TOP` = ?)) AND ((? = 1 AND `LEFT` IS NULL) OR (`LEFT` = ?)) AND "& _ 
                "((? = 1 AND `WIDTH` IS NULL) OR (`WIDTH` = ?)) AND ((? = 1 AND `HEIGHT` IS NULL)"& _ 
                " OR (`HEIGHT` = ?)) AND ((? = 1 AND `FONT_SIZE` IS NULL) OR (`FONT_SIZE` = ?)) A"& _ 
                "ND ((? = 1 AND `STATE` IS NULL) OR (`STATE` = ?)) AND ((? = 1 AND `COL0_WIDTH` I"& _ 
                "S NULL) OR (`COL0_WIDTH` = ?)) AND ((? = 1 AND `COL1_WIDTH` IS NULL) OR (`COL1_W"& _ 
                "IDTH` = ?)) AND ((? = 1 AND `COL2_WIDTH` IS NULL) OR (`COL2_WIDTH` = ?)) AND ((?"& _ 
                " = 1 AND `COL3_WIDTH` IS NULL) OR (`COL3_WIDTH` = ?)) AND ((? = 1 AND `COL4_WIDT"& _ 
                "H` IS NULL) OR (`COL4_WIDTH` = ?)) AND ((? = 1 AND `COL5_WIDTH` IS NULL) OR (`CO"& _ 
                "L5_WIDTH` = ?)) AND ((? = 1 AND `COL6_WIDTH` IS NULL) OR (`COL6_WIDTH` = ?)) AND"& _ 
                " ((? = 1 AND `COL7_WIDTH` IS NULL) OR (`COL7_WIDTH` = ?)) AND ((? = 1 AND `COL8_"& _ 
                "WIDTH` IS NULL) OR (`COL8_WIDTH` = ?)) AND ((? = 1 AND `COL9_WIDTH` IS NULL) OR "& _ 
                "(`COL9_WIDTH` = ?)) AND ((? = 1 AND `COL10_WIDTH` IS NULL) OR (`COL10_WIDTH` = ?"& _ 
                ")) AND ((? = 1 AND `COL11_WIDTH` IS NULL) OR (`COL11_WIDTH` = ?)) AND ((? = 1 AN"& _ 
                "D `COL12_WIDTH` IS NULL) OR (`COL12_WIDTH` = ?)) AND ((? = 1 AND `COL13_WIDTH` I"& _ 
                "S NULL) OR (`COL13_WIDTH` = ?)) AND ((? = 1 AND `COL14_WIDTH` IS NULL) OR (`COL1"& _ 
                "4_WIDTH` = ?)) AND ((? = 1 AND `COL15_WIDTH` IS NULL) OR (`COL15_WIDTH` = ?)) AN"& _ 
                "D ((? = 1 AND `COL16_WIDTH` IS NULL) OR (`COL16_WIDTH` = ?)) AND ((? = 1 AND `CO"& _ 
                "L17_WIDTH` IS NULL) OR (`COL17_WIDTH` = ?)) AND ((? = 1 AND `COL18_WIDTH` IS NUL"& _ 
                "L) OR (`COL18_WIDTH` = ?)) AND ((? = 1 AND `COL19_WIDTH` IS NULL) OR (`COL19_WID"& _ 
                "TH` = ?)) AND ((? = 1 AND `COL20_WIDTH` IS NULL) OR (`COL20_WIDTH` = ?)) AND ((?"& _ 
                " = 1 AND `COL21_WIDTH` IS NULL) OR (`COL21_WIDTH` = ?)) AND ((? = 1 AND `COL22_W"& _ 
                "IDTH` IS NULL) OR (`COL22_WIDTH` = ?)) AND ((? = 1 AND `COL23_WIDTH` IS NULL) OR"& _ 
                " (`COL23_WIDTH` = ?)) AND ((? = 1 AND `COL24_WIDTH` IS NULL) OR (`COL24_WIDTH` ="& _ 
                " ?)) AND ((? = 1 AND `COL25_WIDTH` IS NULL) OR (`COL25_WIDTH` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FORM", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FORM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CONTROL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CONTROL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TOP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TOP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LEFT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LEFT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEIGHT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STATE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL0_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL0_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL1_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL1_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL2_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL2_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL3_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL3_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL4_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL4_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL5_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL5_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL6_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL6_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL7_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL7_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL8_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL8_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL9_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL9_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL10_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL10_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL11_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL11_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL12_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL12_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL13_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL13_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL14_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL14_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL15_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL15_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL16_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL16_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL17_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL17_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL18_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL18_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL19_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL19_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL20_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL20_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL21_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL21_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL22_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL22_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL23_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL23_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL24_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL24_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL25_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL25_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `WINDOW` (`FORM`, `CONTROL`, `TOP`, `LEFT`, `WIDTH`, `HEIGHT`, `FONT_"& _ 
                "SIZE`, `STATE`, `COL0_WIDTH`, `COL1_WIDTH`, `COL2_WIDTH`, `COL3_WIDTH`, `COL4_WI"& _ 
                "DTH`, `COL5_WIDTH`, `COL6_WIDTH`, `COL7_WIDTH`, `COL8_WIDTH`, `COL9_WIDTH`, `COL"& _ 
                "10_WIDTH`, `COL11_WIDTH`, `COL12_WIDTH`, `COL13_WIDTH`, `COL14_WIDTH`, `COL15_WI"& _ 
                "DTH`, `COL16_WIDTH`, `COL17_WIDTH`, `COL18_WIDTH`, `COL19_WIDTH`, `COL20_WIDTH`,"& _ 
                " `COL21_WIDTH`, `COL22_WIDTH`, `COL23_WIDTH`, `COL24_WIDTH`, `COL25_WIDTH`) VALU"& _ 
                "ES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FORM", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FORM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CONTROL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CONTROL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TOP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LEFT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEIGHT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STATE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL0_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL1_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL2_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL3_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL4_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL5_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL6_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL7_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL8_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL9_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL10_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL11_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL12_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL13_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL14_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL15_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL16_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL17_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL18_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL19_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL20_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL21_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL22_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL23_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL24_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL25_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `WINDOW` SET `FORM` = ?, `CONTROL` = ?, `TOP` = ?, `LEFT` = ?, `WIDTH` = ?"& _ 
                ", `HEIGHT` = ?, `FONT_SIZE` = ?, `STATE` = ?, `COL0_WIDTH` = ?, `COL1_WIDTH` = ?"& _ 
                ", `COL2_WIDTH` = ?, `COL3_WIDTH` = ?, `COL4_WIDTH` = ?, `COL5_WIDTH` = ?, `COL6_"& _ 
                "WIDTH` = ?, `COL7_WIDTH` = ?, `COL8_WIDTH` = ?, `COL9_WIDTH` = ?, `COL10_WIDTH` "& _ 
                "= ?, `COL11_WIDTH` = ?, `COL12_WIDTH` = ?, `COL13_WIDTH` = ?, `COL14_WIDTH` = ?,"& _ 
                " `COL15_WIDTH` = ?, `COL16_WIDTH` = ?, `COL17_WIDTH` = ?, `COL18_WIDTH` = ?, `CO"& _ 
                "L19_WIDTH` = ?, `COL20_WIDTH` = ?, `COL21_WIDTH` = ?, `COL22_WIDTH` = ?, `COL23_"& _ 
                "WIDTH` = ?, `COL24_WIDTH` = ?, `COL25_WIDTH` = ? WHERE ((`FORM` = ?) AND (`CONTR"& _ 
                "OL` = ?) AND ((? = 1 AND `TOP` IS NULL) OR (`TOP` = ?)) AND ((? = 1 AND `LEFT` I"& _ 
                "S NULL) OR (`LEFT` = ?)) AND ((? = 1 AND `WIDTH` IS NULL) OR (`WIDTH` = ?)) AND "& _ 
                "((? = 1 AND `HEIGHT` IS NULL) OR (`HEIGHT` = ?)) AND ((? = 1 AND `FONT_SIZE` IS "& _ 
                "NULL) OR (`FONT_SIZE` = ?)) AND ((? = 1 AND `STATE` IS NULL) OR (`STATE` = ?)) A"& _ 
                "ND ((? = 1 AND `COL0_WIDTH` IS NULL) OR (`COL0_WIDTH` = ?)) AND ((? = 1 AND `COL"& _ 
                "1_WIDTH` IS NULL) OR (`COL1_WIDTH` = ?)) AND ((? = 1 AND `COL2_WIDTH` IS NULL) O"& _ 
                "R (`COL2_WIDTH` = ?)) AND ((? = 1 AND `COL3_WIDTH` IS NULL) OR (`COL3_WIDTH` = ?"& _ 
                ")) AND ((? = 1 AND `COL4_WIDTH` IS NULL) OR (`COL4_WIDTH` = ?)) AND ((? = 1 AND "& _ 
                "`COL5_WIDTH` IS NULL) OR (`COL5_WIDTH` = ?)) AND ((? = 1 AND `COL6_WIDTH` IS NUL"& _ 
                "L) OR (`COL6_WIDTH` = ?)) AND ((? = 1 AND `COL7_WIDTH` IS NULL) OR (`COL7_WIDTH`"& _ 
                " = ?)) AND ((? = 1 AND `COL8_WIDTH` IS NULL) OR (`COL8_WIDTH` = ?)) AND ((? = 1 "& _ 
                "AND `COL9_WIDTH` IS NULL) OR (`COL9_WIDTH` = ?)) AND ((? = 1 AND `COL10_WIDTH` I"& _ 
                "S NULL) OR (`COL10_WIDTH` = ?)) AND ((? = 1 AND `COL11_WIDTH` IS NULL) OR (`COL1"& _ 
                "1_WIDTH` = ?)) AND ((? = 1 AND `COL12_WIDTH` IS NULL) OR (`COL12_WIDTH` = ?)) AN"& _ 
                "D ((? = 1 AND `COL13_WIDTH` IS NULL) OR (`COL13_WIDTH` = ?)) AND ((? = 1 AND `CO"& _ 
                "L14_WIDTH` IS NULL) OR (`COL14_WIDTH` = ?)) AND ((? = 1 AND `COL15_WIDTH` IS NUL"& _ 
                "L) OR (`COL15_WIDTH` = ?)) AND ((? = 1 AND `COL16_WIDTH` IS NULL) OR (`COL16_WID"& _ 
                "TH` = ?)) AND ((? = 1 AND `COL17_WIDTH` IS NULL) OR (`COL17_WIDTH` = ?)) AND ((?"& _ 
                " = 1 AND `COL18_WIDTH` IS NULL) OR (`COL18_WIDTH` = ?)) AND ((? = 1 AND `COL19_W"& _ 
                "IDTH` IS NULL) OR (`COL19_WIDTH` = ?)) AND ((? = 1 AND `COL20_WIDTH` IS NULL) OR"& _ 
                " (`COL20_WIDTH` = ?)) AND ((? = 1 AND `COL21_WIDTH` IS NULL) OR (`COL21_WIDTH` ="& _ 
                " ?)) AND ((? = 1 AND `COL22_WIDTH` IS NULL) OR (`COL22_WIDTH` = ?)) AND ((? = 1 "& _ 
                "AND `COL23_WIDTH` IS NULL) OR (`COL23_WIDTH` = ?)) AND ((? = 1 AND `COL24_WIDTH`"& _ 
                " IS NULL) OR (`COL24_WIDTH` = ?)) AND ((? = 1 AND `COL25_WIDTH` IS NULL) OR (`CO"& _ 
                "L25_WIDTH` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FORM", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FORM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CONTROL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CONTROL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("TOP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LEFT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEIGHT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("STATE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL0_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL1_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL2_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL3_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL4_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL5_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL6_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL7_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL8_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL9_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL10_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL11_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL12_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL13_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL14_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL15_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL16_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL17_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL18_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL19_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL20_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL21_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL22_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL23_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL24_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COL25_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FORM", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FORM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CONTROL", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CONTROL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_TOP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_TOP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TOP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LEFT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LEFT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LEFT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEIGHT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FONT_SIZE", Global.System.Data.OleDb.OleDbType.[Single], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FONT_SIZE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_STATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_STATE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "STATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL0_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL0_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL0_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL1_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL1_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL1_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL2_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL2_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL2_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL3_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL3_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL3_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL4_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL4_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL4_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL5_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL5_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL5_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL6_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL6_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL6_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL7_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL7_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL7_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL8_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL8_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL8_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL9_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL9_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL9_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL10_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL10_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL10_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL11_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL11_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL11_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL12_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL12_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL12_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL13_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL13_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL13_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL14_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL14_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL14_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL15_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL15_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL15_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL16_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL16_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL16_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL17_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL17_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL17_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL18_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL18_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL18_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL19_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL19_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL19_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL20_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL20_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL20_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL21_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL21_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL21_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL22_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL22_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL22_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL23_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL23_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL23_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL24_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL24_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL24_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COL25_WIDTH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COL25_WIDTH", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COL25_WIDTH", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002C1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT FORM, CONTROL, [TOP], [LEFT], WIDTH, HEIGHT, FONT_SIZE, STATE, COL0_WIDTH,"& _ 
                " COL1_WIDTH, COL2_WIDTH, COL3_WIDTH, COL4_WIDTH, COL5_WIDTH, COL6_WIDTH, COL7_WI"& _ 
                "DTH, COL8_WIDTH, COL9_WIDTH, COL10_WIDTH, COL11_WIDTH, COL12_WIDTH, COL13_WIDTH,"& _ 
                " COL14_WIDTH, COL15_WIDTH, COL16_WIDTH, COL17_WIDTH, COL18_WIDTH, COL19_WIDTH, C"& _ 
                "OL20_WIDTH, COL21_WIDTH, COL22_WIDTH, COL23_WIDTH, COL24_WIDTH, COL25_WIDTH FROM"& _ 
                " WINDOW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002C1DataSet.WINDOWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002C1DataSet.WINDOWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002C1DataSet.WINDOWDataTable = New _840002C1DataSet.WINDOWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002C1DataSet.WINDOWDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002C1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WINDOW")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_FORM As String,  _
                    ByVal Original_CONTROL As String,  _
                    ByVal Original_TOP As Global.System.Nullable(Of Short),  _
                    ByVal Original_LEFT As Global.System.Nullable(Of Short),  _
                    ByVal Original_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal Original_FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal Original_STATE As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL25_WIDTH As Global.System.Nullable(Of Short)) As Integer
            If (Original_FORM Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FORM,String)
            End If
            If (Original_CONTROL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_CONTROL,String)
            End If
            If (Original_TOP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TOP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_LEFT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LEFT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_HEIGHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_HEIGHT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_FONT_SIZE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_FONT_SIZE.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_STATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_STATE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_COL0_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_COL0_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_COL1_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_COL1_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_COL2_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_COL2_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_COL3_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_COL3_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_COL4_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_COL4_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_COL5_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_COL5_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_COL6_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_COL6_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_COL7_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_COL7_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_COL8_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_COL8_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_COL9_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_COL9_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_COL10_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_COL10_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_COL11_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_COL11_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_COL12_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_COL12_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_COL13_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_COL13_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_COL14_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_COL14_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_COL15_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_COL15_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_COL16_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_COL16_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_COL17_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_COL17_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_COL18_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_COL18_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_COL19_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_COL19_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_COL20_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_COL20_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_COL21_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_COL21_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_COL22_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_COL22_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_COL23_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_COL23_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_COL24_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_COL24_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_COL25_WIDTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_COL25_WIDTH.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal FORM As String,  _
                    ByVal CONTROL As String,  _
                    ByVal TOP As Global.System.Nullable(Of Short),  _
                    ByVal LEFT As Global.System.Nullable(Of Short),  _
                    ByVal WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal STATE As Global.System.Nullable(Of Short),  _
                    ByVal COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL25_WIDTH As Global.System.Nullable(Of Short)) As Integer
            If (FORM Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(FORM,String)
            End If
            If (CONTROL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CONTROL,String)
            End If
            If (TOP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TOP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LEFT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LEFT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(HEIGHT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FONT_SIZE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(FONT_SIZE.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (STATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(STATE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COL0_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COL0_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (COL1_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COL1_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (COL2_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(COL2_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COL3_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(COL3_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (COL4_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(COL4_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (COL5_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(COL5_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COL6_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(COL6_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (COL7_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(COL7_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (COL8_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(COL8_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (COL9_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(COL9_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (COL10_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(COL10_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (COL11_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(COL11_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (COL12_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(COL12_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (COL13_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(COL13_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (COL14_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(COL14_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (COL15_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(COL15_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (COL16_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(COL16_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (COL17_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(COL17_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (COL18_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(COL18_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (COL19_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(COL19_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (COL20_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(COL20_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (COL21_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(COL21_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (COL22_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(COL22_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (COL23_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(COL23_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (COL24_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(COL24_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (COL25_WIDTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(COL25_WIDTH.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal FORM As String,  _
                    ByVal CONTROL As String,  _
                    ByVal TOP As Global.System.Nullable(Of Short),  _
                    ByVal LEFT As Global.System.Nullable(Of Short),  _
                    ByVal WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal STATE As Global.System.Nullable(Of Short),  _
                    ByVal COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL25_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM As String,  _
                    ByVal Original_CONTROL As String,  _
                    ByVal Original_TOP As Global.System.Nullable(Of Short),  _
                    ByVal Original_LEFT As Global.System.Nullable(Of Short),  _
                    ByVal Original_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal Original_FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal Original_STATE As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL25_WIDTH As Global.System.Nullable(Of Short)) As Integer
            If (FORM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FORM,String)
            End If
            If (CONTROL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CONTROL,String)
            End If
            If (TOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TOP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LEFT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LEFT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(HEIGHT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (FONT_SIZE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(FONT_SIZE.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (STATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(STATE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COL0_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(COL0_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (COL1_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COL1_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (COL2_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(COL2_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (COL3_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(COL3_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (COL4_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(COL4_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (COL5_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(COL5_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (COL6_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(COL6_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (COL7_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(COL7_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (COL8_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(COL8_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (COL9_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(COL9_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (COL10_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(COL10_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (COL11_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(COL11_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (COL12_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(COL12_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (COL13_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(COL13_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (COL14_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(COL14_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (COL15_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(COL15_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (COL16_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(COL16_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (COL17_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(COL17_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (COL18_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(COL18_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (COL19_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(COL19_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (COL20_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(COL20_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (COL21_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(COL21_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (COL22_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(COL22_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (COL23_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(COL23_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (COL24_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(COL24_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (COL25_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(COL25_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_FORM Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_FORM,String)
            End If
            If (Original_CONTROL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_CONTROL,String)
            End If
            If (Original_TOP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_TOP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_LEFT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_LEFT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_HEIGHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_HEIGHT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_FONT_SIZE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_FONT_SIZE.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_STATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_STATE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_COL0_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_COL0_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_COL1_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_COL1_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_COL2_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_COL2_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_COL3_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_COL3_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_COL4_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_COL4_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_COL5_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_COL5_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_COL6_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_COL6_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_COL7_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_COL7_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_COL8_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_COL8_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_COL9_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_COL9_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_COL10_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_COL10_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_COL11_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_COL11_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_COL12_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_COL12_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_COL13_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_COL13_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_COL14_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_COL14_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_COL15_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_COL15_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_COL16_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_COL16_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_COL17_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_COL17_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_COL18_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_COL18_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_COL19_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_COL19_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_COL20_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_COL20_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_COL21_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_COL21_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_COL22_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_COL22_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_COL23_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_COL23_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_COL24_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_COL24_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_COL25_WIDTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_COL25_WIDTH.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TOP As Global.System.Nullable(Of Short),  _
                    ByVal LEFT As Global.System.Nullable(Of Short),  _
                    ByVal WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal STATE As Global.System.Nullable(Of Short),  _
                    ByVal COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal COL25_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_FORM As String,  _
                    ByVal Original_CONTROL As String,  _
                    ByVal Original_TOP As Global.System.Nullable(Of Short),  _
                    ByVal Original_LEFT As Global.System.Nullable(Of Short),  _
                    ByVal Original_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_HEIGHT As Global.System.Nullable(Of Short),  _
                    ByVal Original_FONT_SIZE As Global.System.Nullable(Of Single),  _
                    ByVal Original_STATE As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL0_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL1_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL2_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL3_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL4_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL5_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL6_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL7_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL8_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL9_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL10_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL11_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL12_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL13_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL14_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL15_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL16_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL17_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL18_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL19_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL20_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL21_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL22_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL23_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL24_WIDTH As Global.System.Nullable(Of Short),  _
                    ByVal Original_COL25_WIDTH As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_FORM, Original_CONTROL, TOP, LEFT, WIDTH, HEIGHT, FONT_SIZE, STATE, COL0_WIDTH, COL1_WIDTH, COL2_WIDTH, COL3_WIDTH, COL4_WIDTH, COL5_WIDTH, COL6_WIDTH, COL7_WIDTH, COL8_WIDTH, COL9_WIDTH, COL10_WIDTH, COL11_WIDTH, COL12_WIDTH, COL13_WIDTH, COL14_WIDTH, COL15_WIDTH, COL16_WIDTH, COL17_WIDTH, COL18_WIDTH, COL19_WIDTH, COL20_WIDTH, COL21_WIDTH, COL22_WIDTH, COL23_WIDTH, COL24_WIDTH, COL25_WIDTH, Original_FORM, Original_CONTROL, Original_TOP, Original_LEFT, Original_WIDTH, Original_HEIGHT, Original_FONT_SIZE, Original_STATE, Original_COL0_WIDTH, Original_COL1_WIDTH, Original_COL2_WIDTH, Original_COL3_WIDTH, Original_COL4_WIDTH, Original_COL5_WIDTH, Original_COL6_WIDTH, Original_COL7_WIDTH, Original_COL8_WIDTH, Original_COL9_WIDTH, Original_COL10_WIDTH, Original_COL11_WIDTH, Original_COL12_WIDTH, Original_COL13_WIDTH, Original_COL14_WIDTH, Original_COL15_WIDTH, Original_COL16_WIDTH, Original_COL17_WIDTH, Original_COL18_WIDTH, Original_COL19_WIDTH, Original_COL20_WIDTH, Original_COL21_WIDTH, Original_COL22_WIDTH, Original_COL23_WIDTH, Original_COL24_WIDTH, Original_COL25_WIDTH)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _bATCHTableAdapter As BATCHTableAdapter
        
        Private _lANGUAGETableAdapter As LANGUAGETableAdapter
        
        Private _mAINBATCHTableAdapter As MAINBATCHTableAdapter
        
        Private _mAINPROD_QUEUETableAdapter As MAINPROD_QUEUETableAdapter
        
        Private _mAINPRODUCTIONTableAdapter As MAINPRODUCTIONTableAdapter
        
        Private _mAINRECIPELINETableAdapter As MAINRECIPELINETableAdapter
        
        Private _pROD_QUEUETableAdapter As PROD_QUEUETableAdapter
        
        Private _pRODUCTIONTableAdapter As PRODUCTIONTableAdapter
        
        Private _rECIPETableAdapter As RECIPETableAdapter
        
        Private _tMP_WP_MESSAGETableAdapter As TMP_WP_MESSAGETableAdapter
        
        Private _uSERTableAdapter As USERTableAdapter
        
        Private _wINDOWTableAdapter As WINDOWTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property BATCHTableAdapter() As BATCHTableAdapter
            Get
                Return Me._bATCHTableAdapter
            End Get
            Set
                Me._bATCHTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property LANGUAGETableAdapter() As LANGUAGETableAdapter
            Get
                Return Me._lANGUAGETableAdapter
            End Get
            Set
                Me._lANGUAGETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINBATCHTableAdapter() As MAINBATCHTableAdapter
            Get
                Return Me._mAINBATCHTableAdapter
            End Get
            Set
                Me._mAINBATCHTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINPROD_QUEUETableAdapter() As MAINPROD_QUEUETableAdapter
            Get
                Return Me._mAINPROD_QUEUETableAdapter
            End Get
            Set
                Me._mAINPROD_QUEUETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINPRODUCTIONTableAdapter() As MAINPRODUCTIONTableAdapter
            Get
                Return Me._mAINPRODUCTIONTableAdapter
            End Get
            Set
                Me._mAINPRODUCTIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINRECIPELINETableAdapter() As MAINRECIPELINETableAdapter
            Get
                Return Me._mAINRECIPELINETableAdapter
            End Get
            Set
                Me._mAINRECIPELINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PROD_QUEUETableAdapter() As PROD_QUEUETableAdapter
            Get
                Return Me._pROD_QUEUETableAdapter
            End Get
            Set
                Me._pROD_QUEUETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PRODUCTIONTableAdapter() As PRODUCTIONTableAdapter
            Get
                Return Me._pRODUCTIONTableAdapter
            End Get
            Set
                Me._pRODUCTIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RECIPETableAdapter() As RECIPETableAdapter
            Get
                Return Me._rECIPETableAdapter
            End Get
            Set
                Me._rECIPETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TMP_WP_MESSAGETableAdapter() As TMP_WP_MESSAGETableAdapter
            Get
                Return Me._tMP_WP_MESSAGETableAdapter
            End Get
            Set
                Me._tMP_WP_MESSAGETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property USERTableAdapter() As USERTableAdapter
            Get
                Return Me._uSERTableAdapter
            End Get
            Set
                Me._uSERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WINDOWTableAdapter() As WINDOWTableAdapter
            Get
                Return Me._wINDOWTableAdapter
            End Get
            Set
                Me._wINDOWTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._bATCHTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._bATCHTableAdapter.Connection) Is Nothing)) Then
                    Return Me._bATCHTableAdapter.Connection
                End If
                If ((Not (Me._lANGUAGETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._lANGUAGETableAdapter.Connection) Is Nothing)) Then
                    Return Me._lANGUAGETableAdapter.Connection
                End If
                If ((Not (Me._mAINBATCHTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINBATCHTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINBATCHTableAdapter.Connection
                End If
                If ((Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINPROD_QUEUETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINPROD_QUEUETableAdapter.Connection
                End If
                If ((Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINPRODUCTIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINPRODUCTIONTableAdapter.Connection
                End If
                If ((Not (Me._mAINRECIPELINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINRECIPELINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINRECIPELINETableAdapter.Connection
                End If
                If ((Not (Me._pROD_QUEUETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pROD_QUEUETableAdapter.Connection) Is Nothing)) Then
                    Return Me._pROD_QUEUETableAdapter.Connection
                End If
                If ((Not (Me._pRODUCTIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pRODUCTIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pRODUCTIONTableAdapter.Connection
                End If
                If ((Not (Me._rECIPETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rECIPETableAdapter.Connection) Is Nothing)) Then
                    Return Me._rECIPETableAdapter.Connection
                End If
                If ((Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tMP_WP_MESSAGETableAdapter.Connection) Is Nothing)) Then
                    Return Me._tMP_WP_MESSAGETableAdapter.Connection
                End If
                If ((Not (Me._uSERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uSERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uSERTableAdapter.Connection
                End If
                If ((Not (Me._wINDOWTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wINDOWTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wINDOWTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uSERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As _840002C1DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINPRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINPRODUCTIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINBATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINBATCHTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.BATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._bATCHTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.LANGUAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._lANGUAGETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINPROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINPROD_QUEUETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPELINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINRECIPELINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pROD_QUEUETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pRODUCTIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RECIPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rECIPETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TMP_WP_MESSAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tMP_WP_MESSAGETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uSERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.USER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uSERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WINDOW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wINDOWTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As _840002C1DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINPRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINPRODUCTIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINBATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINBATCHTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.BATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._bATCHTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.LANGUAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._lANGUAGETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINPROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINPROD_QUEUETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPELINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINRECIPELINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pROD_QUEUETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pRODUCTIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RECIPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rECIPETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TMP_WP_MESSAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tMP_WP_MESSAGETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uSERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.USER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uSERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WINDOW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wINDOWTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As _840002C1DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WINDOW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wINDOWTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uSERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.USER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uSERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TMP_WP_MESSAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tMP_WP_MESSAGETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RECIPE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rECIPETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pRODUCTIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pROD_QUEUETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPELINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINRECIPELINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINPROD_QUEUE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINPROD_QUEUETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.LANGUAGE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._lANGUAGETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.BATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._bATCHTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINBATCH.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINBATCHTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINPRODUCTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINPRODUCTIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As _840002C1DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._bATCHTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._bATCHTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._lANGUAGETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._lANGUAGETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINBATCHTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINBATCHTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINPROD_QUEUETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINPRODUCTIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINRECIPELINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINRECIPELINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pROD_QUEUETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pROD_QUEUETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pRODUCTIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pRODUCTIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rECIPETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rECIPETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tMP_WP_MESSAGETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uSERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uSERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wINDOWTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wINDOWTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._bATCHTableAdapter, Me._bATCHTableAdapter.Connection)
                    Me._bATCHTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._bATCHTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._bATCHTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._bATCHTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._bATCHTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._lANGUAGETableAdapter, Me._lANGUAGETableAdapter.Connection)
                    Me._lANGUAGETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._lANGUAGETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._lANGUAGETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._lANGUAGETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._lANGUAGETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINBATCHTableAdapter, Me._mAINBATCHTableAdapter.Connection)
                    Me._mAINBATCHTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINBATCHTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINBATCHTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINBATCHTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINBATCHTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINPROD_QUEUETableAdapter, Me._mAINPROD_QUEUETableAdapter.Connection)
                    Me._mAINPROD_QUEUETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINPROD_QUEUETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINPROD_QUEUETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINPROD_QUEUETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINPROD_QUEUETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINPRODUCTIONTableAdapter, Me._mAINPRODUCTIONTableAdapter.Connection)
                    Me._mAINPRODUCTIONTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINPRODUCTIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINPRODUCTIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINPRODUCTIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINPRODUCTIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINRECIPELINETableAdapter, Me._mAINRECIPELINETableAdapter.Connection)
                    Me._mAINRECIPELINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPELINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINRECIPELINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINRECIPELINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINRECIPELINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pROD_QUEUETableAdapter, Me._pROD_QUEUETableAdapter.Connection)
                    Me._pROD_QUEUETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pROD_QUEUETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pROD_QUEUETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pROD_QUEUETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pROD_QUEUETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pRODUCTIONTableAdapter, Me._pRODUCTIONTableAdapter.Connection)
                    Me._pRODUCTIONTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODUCTIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pRODUCTIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pRODUCTIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pRODUCTIONTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rECIPETableAdapter, Me._rECIPETableAdapter.Connection)
                    Me._rECIPETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._rECIPETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rECIPETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rECIPETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tMP_WP_MESSAGETableAdapter, Me._tMP_WP_MESSAGETableAdapter.Connection)
                    Me._tMP_WP_MESSAGETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._tMP_WP_MESSAGETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._tMP_WP_MESSAGETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tMP_WP_MESSAGETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tMP_WP_MESSAGETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uSERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uSERTableAdapter, Me._uSERTableAdapter.Connection)
                    Me._uSERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._uSERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._uSERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uSERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uSERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wINDOWTableAdapter, Me._wINDOWTableAdapter.Connection)
                    Me._wINDOWTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._wINDOWTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._wINDOWTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wINDOWTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wINDOWTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._bATCHTableAdapter) Is Nothing) Then
                    Me._bATCHTableAdapter.Connection = CType(revertConnections(Me._bATCHTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._bATCHTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._lANGUAGETableAdapter) Is Nothing) Then
                    Me._lANGUAGETableAdapter.Connection = CType(revertConnections(Me._lANGUAGETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._lANGUAGETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINBATCHTableAdapter) Is Nothing) Then
                    Me._mAINBATCHTableAdapter.Connection = CType(revertConnections(Me._mAINBATCHTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINBATCHTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINPROD_QUEUETableAdapter) Is Nothing) Then
                    Me._mAINPROD_QUEUETableAdapter.Connection = CType(revertConnections(Me._mAINPROD_QUEUETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINPROD_QUEUETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINPRODUCTIONTableAdapter) Is Nothing) Then
                    Me._mAINPRODUCTIONTableAdapter.Connection = CType(revertConnections(Me._mAINPRODUCTIONTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINPRODUCTIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINRECIPELINETableAdapter) Is Nothing) Then
                    Me._mAINRECIPELINETableAdapter.Connection = CType(revertConnections(Me._mAINRECIPELINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPELINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pROD_QUEUETableAdapter) Is Nothing) Then
                    Me._pROD_QUEUETableAdapter.Connection = CType(revertConnections(Me._pROD_QUEUETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pROD_QUEUETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pRODUCTIONTableAdapter) Is Nothing) Then
                    Me._pRODUCTIONTableAdapter.Connection = CType(revertConnections(Me._pRODUCTIONTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODUCTIONTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rECIPETableAdapter) Is Nothing) Then
                    Me._rECIPETableAdapter.Connection = CType(revertConnections(Me._rECIPETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tMP_WP_MESSAGETableAdapter) Is Nothing) Then
                    Me._tMP_WP_MESSAGETableAdapter.Connection = CType(revertConnections(Me._tMP_WP_MESSAGETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._tMP_WP_MESSAGETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uSERTableAdapter) Is Nothing) Then
                    Me._uSERTableAdapter.Connection = CType(revertConnections(Me._uSERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._uSERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wINDOWTableAdapter) Is Nothing) Then
                    Me._wINDOWTableAdapter.Connection = CType(revertConnections(Me._wINDOWTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._wINDOWTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
