'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("_840002P1DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class _840002P1DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableDEVICE As DEVICEDataTable
    
    Private tableMAINRECIPE_HEADER As MAINRECIPE_HEADERDataTable
    
    Private tableMAINRECIPE_LINE As MAINRECIPE_LINEDataTable
    
    Private tableMAINRECIPEPLAN_HEADER As MAINRECIPEPLAN_HEADERDataTable
    
    Private tableMAINRECIPEPLAN_LINE As MAINRECIPEPLAN_LINEDataTable
    
    Private tableMATERIAL As MATERIALDataTable
    
    Private tablePLAN_HEADER As PLAN_HEADERDataTable
    
    Private tablePLAN_LINE As PLAN_LINEDataTable
    
    Private tablePR8400 As PR8400DataTable
    
    Private tablePRODLINE_WP As PRODLINE_WPDataTable
    
    Private tablePRODUCTIONLINE As PRODUCTIONLINEDataTable
    
    Private tableRECIPE_HEADER As RECIPE_HEADERDataTable
    
    Private tableRECIPE_LINE As RECIPE_LINEDataTable
    
    Private tableSUPPLIER As SUPPLIERDataTable
    
    Private tableSUPPLY As SUPPLYDataTable
    
    Private tableWP As WPDataTable
    
    Private relationMAINRECIPE_HEADERMAINRECIPE_LINE As Global.System.Data.DataRelation
    
    Private relationRECIPE_HEADERMAINRECIPE_LINE As Global.System.Data.DataRelation
    
    Private relationMAINRECIPE_HEADERMAINRECIPEPLAN_LINE As Global.System.Data.DataRelation
    
    Private relationMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE As Global.System.Data.DataRelation
    
    Private relationPRODLINE_WPMATERIAL As Global.System.Data.DataRelation
    
    Private relationPRODUCTIONLINEPLAN_HEADER As Global.System.Data.DataRelation
    
    Private relationPLAN_HEADERPLAN_LINE As Global.System.Data.DataRelation
    
    Private relationPRODUCTIONLINEPRODLINE_WP As Global.System.Data.DataRelation
    
    Private relationWPPRODLINE_WP As Global.System.Data.DataRelation
    
    Private relationReference As Global.System.Data.DataRelation
    
    Private relationPRODUCTIONLINERECIPE_HEADER As Global.System.Data.DataRelation
    
    Private relationRECIPE_HEADERRECIPE_LINE As Global.System.Data.DataRelation
    
    Private relationReference7 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DEVICE")) Is Nothing) Then
                MyBase.Tables.Add(New DEVICEDataTable(ds.Tables("DEVICE")))
            End If
            If (Not (ds.Tables("MAINRECIPE_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPE_HEADERDataTable(ds.Tables("MAINRECIPE_HEADER")))
            End If
            If (Not (ds.Tables("MAINRECIPE_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPE_LINEDataTable(ds.Tables("MAINRECIPE_LINE")))
            End If
            If (Not (ds.Tables("MAINRECIPEPLAN_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPEPLAN_HEADERDataTable(ds.Tables("MAINRECIPEPLAN_HEADER")))
            End If
            If (Not (ds.Tables("MAINRECIPEPLAN_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPEPLAN_LINEDataTable(ds.Tables("MAINRECIPEPLAN_LINE")))
            End If
            If (Not (ds.Tables("MATERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New MATERIALDataTable(ds.Tables("MATERIAL")))
            End If
            If (Not (ds.Tables("PLAN_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New PLAN_HEADERDataTable(ds.Tables("PLAN_HEADER")))
            End If
            If (Not (ds.Tables("PLAN_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New PLAN_LINEDataTable(ds.Tables("PLAN_LINE")))
            End If
            If (Not (ds.Tables("PR8400")) Is Nothing) Then
                MyBase.Tables.Add(New PR8400DataTable(ds.Tables("PR8400")))
            End If
            If (Not (ds.Tables("PRODLINE_WP")) Is Nothing) Then
                MyBase.Tables.Add(New PRODLINE_WPDataTable(ds.Tables("PRODLINE_WP")))
            End If
            If (Not (ds.Tables("PRODUCTIONLINE")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTIONLINEDataTable(ds.Tables("PRODUCTIONLINE")))
            End If
            If (Not (ds.Tables("RECIPE_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPE_HEADERDataTable(ds.Tables("RECIPE_HEADER")))
            End If
            If (Not (ds.Tables("RECIPE_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPE_LINEDataTable(ds.Tables("RECIPE_LINE")))
            End If
            If (Not (ds.Tables("SUPPLIER")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPLIERDataTable(ds.Tables("SUPPLIER")))
            End If
            If (Not (ds.Tables("SUPPLY")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPLYDataTable(ds.Tables("SUPPLY")))
            End If
            If (Not (ds.Tables("WP")) Is Nothing) Then
                MyBase.Tables.Add(New WPDataTable(ds.Tables("WP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DEVICE() As DEVICEDataTable
        Get
            Return Me.tableDEVICE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINRECIPE_HEADER() As MAINRECIPE_HEADERDataTable
        Get
            Return Me.tableMAINRECIPE_HEADER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINRECIPE_LINE() As MAINRECIPE_LINEDataTable
        Get
            Return Me.tableMAINRECIPE_LINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINRECIPEPLAN_HEADER() As MAINRECIPEPLAN_HEADERDataTable
        Get
            Return Me.tableMAINRECIPEPLAN_HEADER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MAINRECIPEPLAN_LINE() As MAINRECIPEPLAN_LINEDataTable
        Get
            Return Me.tableMAINRECIPEPLAN_LINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MATERIAL() As MATERIALDataTable
        Get
            Return Me.tableMATERIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLAN_HEADER() As PLAN_HEADERDataTable
        Get
            Return Me.tablePLAN_HEADER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PLAN_LINE() As PLAN_LINEDataTable
        Get
            Return Me.tablePLAN_LINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PR8400() As PR8400DataTable
        Get
            Return Me.tablePR8400
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODLINE_WP() As PRODLINE_WPDataTable
        Get
            Return Me.tablePRODLINE_WP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRODUCTIONLINE() As PRODUCTIONLINEDataTable
        Get
            Return Me.tablePRODUCTIONLINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RECIPE_HEADER() As RECIPE_HEADERDataTable
        Get
            Return Me.tableRECIPE_HEADER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RECIPE_LINE() As RECIPE_LINEDataTable
        Get
            Return Me.tableRECIPE_LINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUPPLIER() As SUPPLIERDataTable
        Get
            Return Me.tableSUPPLIER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SUPPLY() As SUPPLYDataTable
        Get
            Return Me.tableSUPPLY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property WP() As WPDataTable
        Get
            Return Me.tableWP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As _840002P1DataSet = CType(MyBase.Clone,_840002P1DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("DEVICE")) Is Nothing) Then
                MyBase.Tables.Add(New DEVICEDataTable(ds.Tables("DEVICE")))
            End If
            If (Not (ds.Tables("MAINRECIPE_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPE_HEADERDataTable(ds.Tables("MAINRECIPE_HEADER")))
            End If
            If (Not (ds.Tables("MAINRECIPE_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPE_LINEDataTable(ds.Tables("MAINRECIPE_LINE")))
            End If
            If (Not (ds.Tables("MAINRECIPEPLAN_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPEPLAN_HEADERDataTable(ds.Tables("MAINRECIPEPLAN_HEADER")))
            End If
            If (Not (ds.Tables("MAINRECIPEPLAN_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New MAINRECIPEPLAN_LINEDataTable(ds.Tables("MAINRECIPEPLAN_LINE")))
            End If
            If (Not (ds.Tables("MATERIAL")) Is Nothing) Then
                MyBase.Tables.Add(New MATERIALDataTable(ds.Tables("MATERIAL")))
            End If
            If (Not (ds.Tables("PLAN_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New PLAN_HEADERDataTable(ds.Tables("PLAN_HEADER")))
            End If
            If (Not (ds.Tables("PLAN_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New PLAN_LINEDataTable(ds.Tables("PLAN_LINE")))
            End If
            If (Not (ds.Tables("PR8400")) Is Nothing) Then
                MyBase.Tables.Add(New PR8400DataTable(ds.Tables("PR8400")))
            End If
            If (Not (ds.Tables("PRODLINE_WP")) Is Nothing) Then
                MyBase.Tables.Add(New PRODLINE_WPDataTable(ds.Tables("PRODLINE_WP")))
            End If
            If (Not (ds.Tables("PRODUCTIONLINE")) Is Nothing) Then
                MyBase.Tables.Add(New PRODUCTIONLINEDataTable(ds.Tables("PRODUCTIONLINE")))
            End If
            If (Not (ds.Tables("RECIPE_HEADER")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPE_HEADERDataTable(ds.Tables("RECIPE_HEADER")))
            End If
            If (Not (ds.Tables("RECIPE_LINE")) Is Nothing) Then
                MyBase.Tables.Add(New RECIPE_LINEDataTable(ds.Tables("RECIPE_LINE")))
            End If
            If (Not (ds.Tables("SUPPLIER")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPLIERDataTable(ds.Tables("SUPPLIER")))
            End If
            If (Not (ds.Tables("SUPPLY")) Is Nothing) Then
                MyBase.Tables.Add(New SUPPLYDataTable(ds.Tables("SUPPLY")))
            End If
            If (Not (ds.Tables("WP")) Is Nothing) Then
                MyBase.Tables.Add(New WPDataTable(ds.Tables("WP")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDEVICE = CType(MyBase.Tables("DEVICE"),DEVICEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDEVICE) Is Nothing) Then
                Me.tableDEVICE.InitVars
            End If
        End If
        Me.tableMAINRECIPE_HEADER = CType(MyBase.Tables("MAINRECIPE_HEADER"),MAINRECIPE_HEADERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINRECIPE_HEADER) Is Nothing) Then
                Me.tableMAINRECIPE_HEADER.InitVars
            End If
        End If
        Me.tableMAINRECIPE_LINE = CType(MyBase.Tables("MAINRECIPE_LINE"),MAINRECIPE_LINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINRECIPE_LINE) Is Nothing) Then
                Me.tableMAINRECIPE_LINE.InitVars
            End If
        End If
        Me.tableMAINRECIPEPLAN_HEADER = CType(MyBase.Tables("MAINRECIPEPLAN_HEADER"),MAINRECIPEPLAN_HEADERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINRECIPEPLAN_HEADER) Is Nothing) Then
                Me.tableMAINRECIPEPLAN_HEADER.InitVars
            End If
        End If
        Me.tableMAINRECIPEPLAN_LINE = CType(MyBase.Tables("MAINRECIPEPLAN_LINE"),MAINRECIPEPLAN_LINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMAINRECIPEPLAN_LINE) Is Nothing) Then
                Me.tableMAINRECIPEPLAN_LINE.InitVars
            End If
        End If
        Me.tableMATERIAL = CType(MyBase.Tables("MATERIAL"),MATERIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMATERIAL) Is Nothing) Then
                Me.tableMATERIAL.InitVars
            End If
        End If
        Me.tablePLAN_HEADER = CType(MyBase.Tables("PLAN_HEADER"),PLAN_HEADERDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLAN_HEADER) Is Nothing) Then
                Me.tablePLAN_HEADER.InitVars
            End If
        End If
        Me.tablePLAN_LINE = CType(MyBase.Tables("PLAN_LINE"),PLAN_LINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePLAN_LINE) Is Nothing) Then
                Me.tablePLAN_LINE.InitVars
            End If
        End If
        Me.tablePR8400 = CType(MyBase.Tables("PR8400"),PR8400DataTable)
        If (initTable = true) Then
            If (Not (Me.tablePR8400) Is Nothing) Then
                Me.tablePR8400.InitVars
            End If
        End If
        Me.tablePRODLINE_WP = CType(MyBase.Tables("PRODLINE_WP"),PRODLINE_WPDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODLINE_WP) Is Nothing) Then
                Me.tablePRODLINE_WP.InitVars
            End If
        End If
        Me.tablePRODUCTIONLINE = CType(MyBase.Tables("PRODUCTIONLINE"),PRODUCTIONLINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePRODUCTIONLINE) Is Nothing) Then
                Me.tablePRODUCTIONLINE.InitVars
            End If
        End If
        Me.tableRECIPE_HEADER = CType(MyBase.Tables("RECIPE_HEADER"),RECIPE_HEADERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRECIPE_HEADER) Is Nothing) Then
                Me.tableRECIPE_HEADER.InitVars
            End If
        End If
        Me.tableRECIPE_LINE = CType(MyBase.Tables("RECIPE_LINE"),RECIPE_LINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRECIPE_LINE) Is Nothing) Then
                Me.tableRECIPE_LINE.InitVars
            End If
        End If
        Me.tableSUPPLIER = CType(MyBase.Tables("SUPPLIER"),SUPPLIERDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUPPLIER) Is Nothing) Then
                Me.tableSUPPLIER.InitVars
            End If
        End If
        Me.tableSUPPLY = CType(MyBase.Tables("SUPPLY"),SUPPLYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSUPPLY) Is Nothing) Then
                Me.tableSUPPLY.InitVars
            End If
        End If
        Me.tableWP = CType(MyBase.Tables("WP"),WPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableWP) Is Nothing) Then
                Me.tableWP.InitVars
            End If
        End If
        Me.relationMAINRECIPE_HEADERMAINRECIPE_LINE = Me.Relations("MAINRECIPE_HEADERMAINRECIPE_LINE")
        Me.relationRECIPE_HEADERMAINRECIPE_LINE = Me.Relations("RECIPE_HEADERMAINRECIPE_LINE")
        Me.relationMAINRECIPE_HEADERMAINRECIPEPLAN_LINE = Me.Relations("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE")
        Me.relationMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE = Me.Relations("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE")
        Me.relationPRODLINE_WPMATERIAL = Me.Relations("PRODLINE_WPMATERIAL")
        Me.relationPRODUCTIONLINEPLAN_HEADER = Me.Relations("PRODUCTIONLINEPLAN_HEADER")
        Me.relationPLAN_HEADERPLAN_LINE = Me.Relations("PLAN_HEADERPLAN_LINE")
        Me.relationPRODUCTIONLINEPRODLINE_WP = Me.Relations("PRODUCTIONLINEPRODLINE_WP")
        Me.relationWPPRODLINE_WP = Me.Relations("WPPRODLINE_WP")
        Me.relationReference = Me.Relations("Reference")
        Me.relationPRODUCTIONLINERECIPE_HEADER = Me.Relations("PRODUCTIONLINERECIPE_HEADER")
        Me.relationRECIPE_HEADERRECIPE_LINE = Me.Relations("RECIPE_HEADERRECIPE_LINE")
        Me.relationReference7 = Me.Relations("Reference7")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "_840002P1DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/_840002P1DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDEVICE = New DEVICEDataTable()
        MyBase.Tables.Add(Me.tableDEVICE)
        Me.tableMAINRECIPE_HEADER = New MAINRECIPE_HEADERDataTable()
        MyBase.Tables.Add(Me.tableMAINRECIPE_HEADER)
        Me.tableMAINRECIPE_LINE = New MAINRECIPE_LINEDataTable()
        MyBase.Tables.Add(Me.tableMAINRECIPE_LINE)
        Me.tableMAINRECIPEPLAN_HEADER = New MAINRECIPEPLAN_HEADERDataTable()
        MyBase.Tables.Add(Me.tableMAINRECIPEPLAN_HEADER)
        Me.tableMAINRECIPEPLAN_LINE = New MAINRECIPEPLAN_LINEDataTable()
        MyBase.Tables.Add(Me.tableMAINRECIPEPLAN_LINE)
        Me.tableMATERIAL = New MATERIALDataTable()
        MyBase.Tables.Add(Me.tableMATERIAL)
        Me.tablePLAN_HEADER = New PLAN_HEADERDataTable()
        MyBase.Tables.Add(Me.tablePLAN_HEADER)
        Me.tablePLAN_LINE = New PLAN_LINEDataTable()
        MyBase.Tables.Add(Me.tablePLAN_LINE)
        Me.tablePR8400 = New PR8400DataTable()
        MyBase.Tables.Add(Me.tablePR8400)
        Me.tablePRODLINE_WP = New PRODLINE_WPDataTable()
        MyBase.Tables.Add(Me.tablePRODLINE_WP)
        Me.tablePRODUCTIONLINE = New PRODUCTIONLINEDataTable()
        MyBase.Tables.Add(Me.tablePRODUCTIONLINE)
        Me.tableRECIPE_HEADER = New RECIPE_HEADERDataTable()
        MyBase.Tables.Add(Me.tableRECIPE_HEADER)
        Me.tableRECIPE_LINE = New RECIPE_LINEDataTable()
        MyBase.Tables.Add(Me.tableRECIPE_LINE)
        Me.tableSUPPLIER = New SUPPLIERDataTable()
        MyBase.Tables.Add(Me.tableSUPPLIER)
        Me.tableSUPPLY = New SUPPLYDataTable()
        MyBase.Tables.Add(Me.tableSUPPLY)
        Me.tableWP = New WPDataTable()
        MyBase.Tables.Add(Me.tableWP)
        Me.relationMAINRECIPE_HEADERMAINRECIPE_LINE = New Global.System.Data.DataRelation("MAINRECIPE_HEADERMAINRECIPE_LINE", New Global.System.Data.DataColumn() {Me.tableMAINRECIPE_HEADER.MAINRECIPE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableMAINRECIPE_LINE.MAINRECIPE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationMAINRECIPE_HEADERMAINRECIPE_LINE)
        Me.relationRECIPE_HEADERMAINRECIPE_LINE = New Global.System.Data.DataRelation("RECIPE_HEADERMAINRECIPE_LINE", New Global.System.Data.DataColumn() {Me.tableRECIPE_HEADER.PRODLINE_IDENTColumn, Me.tableRECIPE_HEADER.RECIPE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableMAINRECIPE_LINE.PRODLINE_IDENTColumn, Me.tableMAINRECIPE_LINE.RECIPE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationRECIPE_HEADERMAINRECIPE_LINE)
        Me.relationMAINRECIPE_HEADERMAINRECIPEPLAN_LINE = New Global.System.Data.DataRelation("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE", New Global.System.Data.DataColumn() {Me.tableMAINRECIPE_HEADER.MAINRECIPE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableMAINRECIPEPLAN_LINE.MAINRECIPE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationMAINRECIPE_HEADERMAINRECIPEPLAN_LINE)
        Me.relationMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE = New Global.System.Data.DataRelation("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE", New Global.System.Data.DataColumn() {Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableMAINRECIPEPLAN_LINE.MAINRECIPEPLAN_IDENTColumn}, false)
        Me.Relations.Add(Me.relationMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE)
        Me.relationPRODLINE_WPMATERIAL = New Global.System.Data.DataRelation("PRODLINE_WPMATERIAL", New Global.System.Data.DataColumn() {Me.tablePRODLINE_WP.PRODLINE_IDENTColumn, Me.tablePRODLINE_WP.WP_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableMATERIAL.PRODLINE_IDENTColumn, Me.tableMATERIAL.WP_IDENTColumn}, false)
        Me.Relations.Add(Me.relationPRODLINE_WPMATERIAL)
        Me.relationPRODUCTIONLINEPLAN_HEADER = New Global.System.Data.DataRelation("PRODUCTIONLINEPLAN_HEADER", New Global.System.Data.DataColumn() {Me.tablePRODUCTIONLINE.PRODLINE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tablePLAN_HEADER.PRODLINE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationPRODUCTIONLINEPLAN_HEADER)
        Me.relationPLAN_HEADERPLAN_LINE = New Global.System.Data.DataRelation("PLAN_HEADERPLAN_LINE", New Global.System.Data.DataColumn() {Me.tablePLAN_HEADER.PRODLINE_IDENTColumn, Me.tablePLAN_HEADER.PLAN_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tablePLAN_LINE.PRODLINE_IDENTColumn, Me.tablePLAN_LINE.PLAN_IDENTColumn}, false)
        Me.Relations.Add(Me.relationPLAN_HEADERPLAN_LINE)
        Me.relationPRODUCTIONLINEPRODLINE_WP = New Global.System.Data.DataRelation("PRODUCTIONLINEPRODLINE_WP", New Global.System.Data.DataColumn() {Me.tablePRODUCTIONLINE.PRODLINE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tablePRODLINE_WP.PRODLINE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationPRODUCTIONLINEPRODLINE_WP)
        Me.relationWPPRODLINE_WP = New Global.System.Data.DataRelation("WPPRODLINE_WP", New Global.System.Data.DataColumn() {Me.tableWP.WP_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tablePRODLINE_WP.WP_IDENTColumn}, false)
        Me.Relations.Add(Me.relationWPPRODLINE_WP)
        Me.relationReference = New Global.System.Data.DataRelation("Reference", New Global.System.Data.DataColumn() {Me.tableDEVICE.DEVICE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tablePRODUCTIONLINE.DEVICE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationReference)
        Me.relationPRODUCTIONLINERECIPE_HEADER = New Global.System.Data.DataRelation("PRODUCTIONLINERECIPE_HEADER", New Global.System.Data.DataColumn() {Me.tablePRODUCTIONLINE.PRODLINE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableRECIPE_HEADER.PRODLINE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationPRODUCTIONLINERECIPE_HEADER)
        Me.relationRECIPE_HEADERRECIPE_LINE = New Global.System.Data.DataRelation("RECIPE_HEADERRECIPE_LINE", New Global.System.Data.DataColumn() {Me.tableRECIPE_HEADER.PRODLINE_IDENTColumn, Me.tableRECIPE_HEADER.RECIPE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableRECIPE_LINE.PRODLINE_IDENTColumn, Me.tableRECIPE_LINE.RECIPE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationRECIPE_HEADERRECIPE_LINE)
        Me.relationReference7 = New Global.System.Data.DataRelation("Reference7", New Global.System.Data.DataColumn() {Me.tableDEVICE.DEVICE_IDENTColumn}, New Global.System.Data.DataColumn() {Me.tableWP.DEVICE_IDENTColumn}, false)
        Me.Relations.Add(Me.relationReference7)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDEVICE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINRECIPE_HEADER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINRECIPE_LINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINRECIPEPLAN_HEADER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMAINRECIPEPLAN_LINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMATERIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLAN_HEADER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePLAN_LINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePR8400() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePRODLINE_WP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePRODUCTIONLINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRECIPE_HEADER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeRECIPE_LINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSUPPLIER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSUPPLY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeWP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As _840002P1DataSet = New _840002P1DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DEVICERowChangeEventHandler(ByVal sender As Object, ByVal e As DEVICERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINRECIPE_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As MAINRECIPE_HEADERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINRECIPE_LINERowChangeEventHandler(ByVal sender As Object, ByVal e As MAINRECIPE_LINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINRECIPEPLAN_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As MAINRECIPEPLAN_HEADERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MAINRECIPEPLAN_LINERowChangeEventHandler(ByVal sender As Object, ByVal e As MAINRECIPEPLAN_LINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MATERIALRowChangeEventHandler(ByVal sender As Object, ByVal e As MATERIALRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLAN_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As PLAN_HEADERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PLAN_LINERowChangeEventHandler(ByVal sender As Object, ByVal e As PLAN_LINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PR8400RowChangeEventHandler(ByVal sender As Object, ByVal e As PR8400RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PRODLINE_WPRowChangeEventHandler(ByVal sender As Object, ByVal e As PRODLINE_WPRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PRODUCTIONLINERowChangeEventHandler(ByVal sender As Object, ByVal e As PRODUCTIONLINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RECIPE_HEADERRowChangeEventHandler(ByVal sender As Object, ByVal e As RECIPE_HEADERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub RECIPE_LINERowChangeEventHandler(ByVal sender As Object, ByVal e As RECIPE_LINERowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SUPPLIERRowChangeEventHandler(ByVal sender As Object, ByVal e As SUPPLIERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SUPPLYRowChangeEventHandler(ByVal sender As Object, ByVal e As SUPPLYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub WPRowChangeEventHandler(ByVal sender As Object, ByVal e As WPRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DEVICEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDEVICE_IDENT As Global.System.Data.DataColumn
        
        Private columnDEVICE_ADDRESS As Global.System.Data.DataColumn
        
        Private columnDEVICE_NAME As Global.System.Data.DataColumn
        
        Private columnDEVICE_TYPE As Global.System.Data.DataColumn
        
        Private columnBAUDRATE As Global.System.Data.DataColumn
        
        Private columnCOM_PORT As Global.System.Data.DataColumn
        
        Private columnIP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnSIMULATION As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_SRC As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_LST As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERR As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERRNUM As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        Private columnPRIORITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DEVICE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BAUDRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBAUDRATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COM_PORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOM_PORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SIMULATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSIMULATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_SRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_SRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_LSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_LST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRIORITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRIORITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DEVICERow
            Get
                Return CType(Me.Rows(index),DEVICERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEVICERowChanging As DEVICERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEVICERowChanged As DEVICERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEVICERowDeleting As DEVICERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DEVICERowDeleted As DEVICERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDEVICERow(ByVal row As DEVICERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDEVICERow(ByVal DEVICE_IDENT As String, ByVal DEVICE_ADDRESS As String, ByVal DEVICE_NAME As String, ByVal DEVICE_TYPE As String, ByVal BAUDRATE As Integer, ByVal COM_PORT As Short, ByVal IP_ADDRESS As String, ByVal SIMULATION As Boolean, ByVal SCRIPT_VAR_SRC As String, ByVal SCRIPT_VAR_LST As String, ByVal SCRIPT_VAR_ERR As String, ByVal SCRIPT_VAR_ERRNUM As Integer, ByVal SCRIPT_DIT As String, ByVal PRIORITY As Boolean) As DEVICERow
            Dim rowDEVICERow As DEVICERow = CType(Me.NewRow,DEVICERow)
            Dim columnValuesArray() As Object = New Object() {DEVICE_IDENT, DEVICE_ADDRESS, DEVICE_NAME, DEVICE_TYPE, BAUDRATE, COM_PORT, IP_ADDRESS, SIMULATION, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT, PRIORITY}
            rowDEVICERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDEVICERow)
            Return rowDEVICERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByDEVICE_IDENT(ByVal DEVICE_IDENT As String) As DEVICERow
            Return CType(Me.Rows.Find(New Object() {DEVICE_IDENT}),DEVICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DEVICEDataTable = CType(MyBase.Clone,DEVICEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DEVICEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEVICE_IDENT = MyBase.Columns("DEVICE_IDENT")
            Me.columnDEVICE_ADDRESS = MyBase.Columns("DEVICE_ADDRESS")
            Me.columnDEVICE_NAME = MyBase.Columns("DEVICE_NAME")
            Me.columnDEVICE_TYPE = MyBase.Columns("DEVICE_TYPE")
            Me.columnBAUDRATE = MyBase.Columns("BAUDRATE")
            Me.columnCOM_PORT = MyBase.Columns("COM_PORT")
            Me.columnIP_ADDRESS = MyBase.Columns("IP_ADDRESS")
            Me.columnSIMULATION = MyBase.Columns("SIMULATION")
            Me.columnSCRIPT_VAR_SRC = MyBase.Columns("SCRIPT_VAR_SRC")
            Me.columnSCRIPT_VAR_LST = MyBase.Columns("SCRIPT_VAR_LST")
            Me.columnSCRIPT_VAR_ERR = MyBase.Columns("SCRIPT_VAR_ERR")
            Me.columnSCRIPT_VAR_ERRNUM = MyBase.Columns("SCRIPT_VAR_ERRNUM")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
            Me.columnPRIORITY = MyBase.Columns("PRIORITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEVICE_IDENT = New Global.System.Data.DataColumn("DEVICE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_IDENT)
            Me.columnDEVICE_ADDRESS = New Global.System.Data.DataColumn("DEVICE_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_ADDRESS)
            Me.columnDEVICE_NAME = New Global.System.Data.DataColumn("DEVICE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_NAME)
            Me.columnDEVICE_TYPE = New Global.System.Data.DataColumn("DEVICE_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_TYPE)
            Me.columnBAUDRATE = New Global.System.Data.DataColumn("BAUDRATE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBAUDRATE)
            Me.columnCOM_PORT = New Global.System.Data.DataColumn("COM_PORT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOM_PORT)
            Me.columnIP_ADDRESS = New Global.System.Data.DataColumn("IP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIP_ADDRESS)
            Me.columnSIMULATION = New Global.System.Data.DataColumn("SIMULATION", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSIMULATION)
            Me.columnSCRIPT_VAR_SRC = New Global.System.Data.DataColumn("SCRIPT_VAR_SRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_SRC)
            Me.columnSCRIPT_VAR_LST = New Global.System.Data.DataColumn("SCRIPT_VAR_LST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_LST)
            Me.columnSCRIPT_VAR_ERR = New Global.System.Data.DataColumn("SCRIPT_VAR_ERR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERR)
            Me.columnSCRIPT_VAR_ERRNUM = New Global.System.Data.DataColumn("SCRIPT_VAR_ERRNUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERRNUM)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me.columnPRIORITY = New Global.System.Data.DataColumn("PRIORITY", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRIORITY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDEVICE_IDENT}, true))
            Me.columnDEVICE_IDENT.AllowDBNull = false
            Me.columnDEVICE_IDENT.Unique = true
            Me.columnDEVICE_IDENT.MaxLength = 20
            Me.columnDEVICE_ADDRESS.MaxLength = 1
            Me.columnDEVICE_NAME.MaxLength = 30
            Me.columnDEVICE_TYPE.MaxLength = 20
            Me.columnIP_ADDRESS.MaxLength = 20
            Me.columnSCRIPT_VAR_SRC.MaxLength = 536870910
            Me.columnSCRIPT_VAR_LST.MaxLength = 536870910
            Me.columnSCRIPT_VAR_ERR.MaxLength = 536870910
            Me.columnSCRIPT_DIT.MaxLength = 536870910
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDEVICERow() As DEVICERow
            Return CType(Me.NewRow,DEVICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DEVICERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DEVICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DEVICERowChangedEvent) Is Nothing) Then
                RaiseEvent DEVICERowChanged(Me, New DEVICERowChangeEvent(CType(e.Row,DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DEVICERowChangingEvent) Is Nothing) Then
                RaiseEvent DEVICERowChanging(Me, New DEVICERowChangeEvent(CType(e.Row,DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DEVICERowDeletedEvent) Is Nothing) Then
                RaiseEvent DEVICERowDeleted(Me, New DEVICERowChangeEvent(CType(e.Row,DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DEVICERowDeletingEvent) Is Nothing) Then
                RaiseEvent DEVICERowDeleting(Me, New DEVICERowChangeEvent(CType(e.Row,DEVICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDEVICERow(ByVal row As DEVICERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DEVICEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINRECIPE_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_NAME As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_CREATE_DATE As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_CHANGE_DATE As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_ENABLED As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TOTAL As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_USER As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_UNIT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_MINBATCH As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_MAXBATCH As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_TIMEOUT_ENABLED As Global.System.Data.DataColumn
        
        Private _column_ORDER_IDENT As Global.System.Data.DataColumn
        
        Private _column_CUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private _column_PROD_NUM As Global.System.Data.DataColumn
        
        Private _column_PROD_SETPOINT As Global.System.Data.DataColumn
        
        Private _column_START_SYNCHRON As Global.System.Data.DataColumn
        
        Private _column_PROD_CYCLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINRECIPE_HEADER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_CREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_CHANGE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_CHANGE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_MINBATCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_MINBATCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_MAXBATCHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_MAXBATCH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_TIMEOUT_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_TIMEOUT_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_ORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_CUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __START_SYNCHRONColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_START_SYNCHRON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINRECIPE_HEADERRow
            Get
                Return CType(Me.Rows(index),MAINRECIPE_HEADERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_HEADERRowChanging As MAINRECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_HEADERRowChanged As MAINRECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_HEADERRowDeleting As MAINRECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_HEADERRowDeleted As MAINRECIPE_HEADERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINRECIPE_HEADERRow(ByVal row As MAINRECIPE_HEADERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINRECIPE_HEADERRow( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal MAINRECIPE_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TOTAL As Double,  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_UNIT As String,  _
                    ByVal MAINRECIPE_DECIMALPOINT As Short,  _
                    ByVal MAINRECIPE_MAXRESOLU_DP As Short,  _
                    ByVal MAINRECIPE_MINBATCH As Double,  _
                    ByVal MAINRECIPE_MAXBATCH As Double,  _
                    ByVal MAINRECIPE_TIMEOUT As Date,  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Integer,  _
                    ByVal __PROD_SETPOINT As Double,  _
                    ByVal __START_SYNCHRON As Boolean,  _
                    ByVal __PROD_CYCLE As Short) As MAINRECIPE_HEADERRow
            Dim rowMAINRECIPE_HEADERRow As MAINRECIPE_HEADERRow = CType(Me.NewRow,MAINRECIPE_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {MAINRECIPE_IDENT, MAINRECIPE_NAME, MAINRECIPE_CREATE_DATE, MAINRECIPE_CHANGE_DATE, MAINRECIPE_ENABLED, MAINRECIPE_TOTAL, MAINRECIPE_USER, MAINRECIPE_UNIT, MAINRECIPE_DECIMALPOINT, MAINRECIPE_MAXRESOLU_DP, MAINRECIPE_MINBATCH, MAINRECIPE_MAXBATCH, MAINRECIPE_TIMEOUT, MAINRECIPE_TIMEOUT_ENABLED, __ORDER_IDENT, __CUSTOMER_IDENT, __PROD_NUM, __PROD_SETPOINT, __START_SYNCHRON, __PROD_CYCLE}
            rowMAINRECIPE_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINRECIPE_HEADERRow)
            Return rowMAINRECIPE_HEADERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINRECIPE_IDENT(ByVal MAINRECIPE_IDENT As String) As MAINRECIPE_HEADERRow
            Return CType(Me.Rows.Find(New Object() {MAINRECIPE_IDENT}),MAINRECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINRECIPE_HEADERDataTable = CType(MyBase.Clone,MAINRECIPE_HEADERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINRECIPE_HEADERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINRECIPE_IDENT = MyBase.Columns("MAINRECIPE_IDENT")
            Me.columnMAINRECIPE_NAME = MyBase.Columns("MAINRECIPE_NAME")
            Me.columnMAINRECIPE_CREATE_DATE = MyBase.Columns("MAINRECIPE_CREATE_DATE")
            Me.columnMAINRECIPE_CHANGE_DATE = MyBase.Columns("MAINRECIPE_CHANGE_DATE")
            Me.columnMAINRECIPE_ENABLED = MyBase.Columns("MAINRECIPE_ENABLED")
            Me.columnMAINRECIPE_TOTAL = MyBase.Columns("MAINRECIPE_TOTAL")
            Me.columnMAINRECIPE_USER = MyBase.Columns("MAINRECIPE_USER")
            Me.columnMAINRECIPE_UNIT = MyBase.Columns("MAINRECIPE_UNIT")
            Me.columnMAINRECIPE_DECIMALPOINT = MyBase.Columns("MAINRECIPE_DECIMALPOINT")
            Me.columnMAINRECIPE_MAXRESOLU_DP = MyBase.Columns("MAINRECIPE_MAXRESOLU_DP")
            Me.columnMAINRECIPE_MINBATCH = MyBase.Columns("MAINRECIPE_MINBATCH")
            Me.columnMAINRECIPE_MAXBATCH = MyBase.Columns("MAINRECIPE_MAXBATCH")
            Me.columnMAINRECIPE_TIMEOUT = MyBase.Columns("MAINRECIPE_TIMEOUT")
            Me.columnMAINRECIPE_TIMEOUT_ENABLED = MyBase.Columns("MAINRECIPE_TIMEOUT_ENABLED")
            Me._column_ORDER_IDENT = MyBase.Columns("~ORDER_IDENT")
            Me._column_CUSTOMER_IDENT = MyBase.Columns("~CUSTOMER_IDENT")
            Me._column_PROD_NUM = MyBase.Columns("~PROD_NUM")
            Me._column_PROD_SETPOINT = MyBase.Columns("~PROD_SETPOINT")
            Me._column_START_SYNCHRON = MyBase.Columns("~START_SYNCHRON")
            Me._column_PROD_CYCLE = MyBase.Columns("~PROD_CYCLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINRECIPE_IDENT = New Global.System.Data.DataColumn("MAINRECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_IDENT)
            Me.columnMAINRECIPE_NAME = New Global.System.Data.DataColumn("MAINRECIPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_NAME)
            Me.columnMAINRECIPE_CREATE_DATE = New Global.System.Data.DataColumn("MAINRECIPE_CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_CREATE_DATE)
            Me.columnMAINRECIPE_CHANGE_DATE = New Global.System.Data.DataColumn("MAINRECIPE_CHANGE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_CHANGE_DATE)
            Me.columnMAINRECIPE_ENABLED = New Global.System.Data.DataColumn("MAINRECIPE_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_ENABLED)
            Me.columnMAINRECIPE_TOTAL = New Global.System.Data.DataColumn("MAINRECIPE_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TOTAL)
            Me.columnMAINRECIPE_USER = New Global.System.Data.DataColumn("MAINRECIPE_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_USER)
            Me.columnMAINRECIPE_UNIT = New Global.System.Data.DataColumn("MAINRECIPE_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_UNIT)
            Me.columnMAINRECIPE_DECIMALPOINT = New Global.System.Data.DataColumn("MAINRECIPE_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_DECIMALPOINT)
            Me.columnMAINRECIPE_MAXRESOLU_DP = New Global.System.Data.DataColumn("MAINRECIPE_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_MAXRESOLU_DP)
            Me.columnMAINRECIPE_MINBATCH = New Global.System.Data.DataColumn("MAINRECIPE_MINBATCH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_MINBATCH)
            Me.columnMAINRECIPE_MAXBATCH = New Global.System.Data.DataColumn("MAINRECIPE_MAXBATCH", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_MAXBATCH)
            Me.columnMAINRECIPE_TIMEOUT = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT)
            Me.columnMAINRECIPE_TIMEOUT_ENABLED = New Global.System.Data.DataColumn("MAINRECIPE_TIMEOUT_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_TIMEOUT_ENABLED)
            Me._column_ORDER_IDENT = New Global.System.Data.DataColumn("~ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_ORDER_IDENT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_ORDER_IDENT")
            Me._column_ORDER_IDENT.ExtendedProperties.Add("Generator_UserColumnName", "~ORDER_IDENT")
            MyBase.Columns.Add(Me._column_ORDER_IDENT)
            Me._column_CUSTOMER_IDENT = New Global.System.Data.DataColumn("~CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_CUSTOMER_IDENT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_CUSTOMER_IDENT")
            Me._column_CUSTOMER_IDENT.ExtendedProperties.Add("Generator_UserColumnName", "~CUSTOMER_IDENT")
            MyBase.Columns.Add(Me._column_CUSTOMER_IDENT)
            Me._column_PROD_NUM = New Global.System.Data.DataColumn("~PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_NUM.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_NUM")
            Me._column_PROD_NUM.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_NUM")
            MyBase.Columns.Add(Me._column_PROD_NUM)
            Me._column_PROD_SETPOINT = New Global.System.Data.DataColumn("~PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_SETPOINT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_SETPOINT")
            Me._column_PROD_SETPOINT.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_SETPOINT")
            MyBase.Columns.Add(Me._column_PROD_SETPOINT)
            Me._column_START_SYNCHRON = New Global.System.Data.DataColumn("~START_SYNCHRON", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            Me._column_START_SYNCHRON.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_START_SYNCHRON")
            Me._column_START_SYNCHRON.ExtendedProperties.Add("Generator_UserColumnName", "~START_SYNCHRON")
            MyBase.Columns.Add(Me._column_START_SYNCHRON)
            Me._column_PROD_CYCLE = New Global.System.Data.DataColumn("~PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_CYCLE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_CYCLE")
            Me._column_PROD_CYCLE.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_CYCLE")
            MyBase.Columns.Add(Me._column_PROD_CYCLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINRECIPE_IDENT}, true))
            Me.columnMAINRECIPE_IDENT.AllowDBNull = false
            Me.columnMAINRECIPE_IDENT.Unique = true
            Me.columnMAINRECIPE_IDENT.MaxLength = 20
            Me.columnMAINRECIPE_NAME.MaxLength = 30
            Me.columnMAINRECIPE_USER.MaxLength = 20
            Me.columnMAINRECIPE_UNIT.MaxLength = 10
            Me._column_ORDER_IDENT.MaxLength = 20
            Me._column_CUSTOMER_IDENT.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINRECIPE_HEADERRow() As MAINRECIPE_HEADERRow
            Return CType(Me.NewRow,MAINRECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINRECIPE_HEADERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINRECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINRECIPE_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_HEADERRowChanged(Me, New MAINRECIPE_HEADERRowChangeEvent(CType(e.Row,MAINRECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINRECIPE_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_HEADERRowChanging(Me, New MAINRECIPE_HEADERRowChangeEvent(CType(e.Row,MAINRECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINRECIPE_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_HEADERRowDeleted(Me, New MAINRECIPE_HEADERRowChangeEvent(CType(e.Row,MAINRECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINRECIPE_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_HEADERRowDeleting(Me, New MAINRECIPE_HEADERRowChangeEvent(CType(e.Row,MAINRECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINRECIPE_HEADERRow(ByVal row As MAINRECIPE_HEADERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINRECIPE_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINRECIPE_LINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_SETPOINT As Global.System.Data.DataColumn
        
        Private columnRECIPE_CALCULATE_SETPOINT As Global.System.Data.DataColumn
        
        Private columnRECIPE_CYCLE As Global.System.Data.DataColumn
        
        Private columnRECIPE_PRIORITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINRECIPE_LINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CALCULATE_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CALCULATE_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_PRIORITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_PRIORITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINRECIPE_LINERow
            Get
                Return CType(Me.Rows(index),MAINRECIPE_LINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_LINERowChanging As MAINRECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_LINERowChanged As MAINRECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_LINERowDeleting As MAINRECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPE_LINERowDeleted As MAINRECIPE_LINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINRECIPE_LINERow(ByVal row As MAINRECIPE_LINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINRECIPE_LINERow(ByVal PRODLINE_IDENT As String, ByVal parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPE_LINE As MAINRECIPE_HEADERRow, ByVal RECIPE_IDENT As String, ByVal RECIPE_SETPOINT As Double, ByVal RECIPE_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_CYCLE As Short, ByVal RECIPE_PRIORITY As Short) As MAINRECIPE_LINERow
            Dim rowMAINRECIPE_LINERow As MAINRECIPE_LINERow = CType(Me.NewRow,MAINRECIPE_LINERow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, Nothing, RECIPE_IDENT, RECIPE_SETPOINT, RECIPE_CALCULATE_SETPOINT, RECIPE_CYCLE, RECIPE_PRIORITY}
            If (Not (parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPE_LINE) Is Nothing) Then
                columnValuesArray(1) = parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPE_LINE(0)
            End If
            rowMAINRECIPE_LINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINRECIPE_LINERow)
            Return rowMAINRECIPE_LINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTMAINRECIPE_IDENT(ByVal PRODLINE_IDENT As String, ByVal MAINRECIPE_IDENT As String) As MAINRECIPE_LINERow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, MAINRECIPE_IDENT}),MAINRECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINRECIPE_LINEDataTable = CType(MyBase.Clone,MAINRECIPE_LINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINRECIPE_LINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnMAINRECIPE_IDENT = MyBase.Columns("MAINRECIPE_IDENT")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_SETPOINT = MyBase.Columns("RECIPE_SETPOINT")
            Me.columnRECIPE_CALCULATE_SETPOINT = MyBase.Columns("RECIPE_CALCULATE_SETPOINT")
            Me.columnRECIPE_CYCLE = MyBase.Columns("RECIPE_CYCLE")
            Me.columnRECIPE_PRIORITY = MyBase.Columns("RECIPE_PRIORITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnMAINRECIPE_IDENT = New Global.System.Data.DataColumn("MAINRECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_IDENT)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_SETPOINT = New Global.System.Data.DataColumn("RECIPE_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_SETPOINT)
            Me.columnRECIPE_CALCULATE_SETPOINT = New Global.System.Data.DataColumn("RECIPE_CALCULATE_SETPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CALCULATE_SETPOINT)
            Me.columnRECIPE_CYCLE = New Global.System.Data.DataColumn("RECIPE_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CYCLE)
            Me.columnRECIPE_PRIORITY = New Global.System.Data.DataColumn("RECIPE_PRIORITY", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_PRIORITY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnMAINRECIPE_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnMAINRECIPE_IDENT.AllowDBNull = false
            Me.columnMAINRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_IDENT.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINRECIPE_LINERow() As MAINRECIPE_LINERow
            Return CType(Me.NewRow,MAINRECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINRECIPE_LINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINRECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINRECIPE_LINERowChangedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_LINERowChanged(Me, New MAINRECIPE_LINERowChangeEvent(CType(e.Row,MAINRECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINRECIPE_LINERowChangingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_LINERowChanging(Me, New MAINRECIPE_LINERowChangeEvent(CType(e.Row,MAINRECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINRECIPE_LINERowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_LINERowDeleted(Me, New MAINRECIPE_LINERowChangeEvent(CType(e.Row,MAINRECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINRECIPE_LINERowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPE_LINERowDeleting(Me, New MAINRECIPE_LINERowChangeEvent(CType(e.Row,MAINRECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINRECIPE_LINERow(ByVal row As MAINRECIPE_LINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINRECIPE_LINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINRECIPEPLAN_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINRECIPEPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPEPLAN_NAME As Global.System.Data.DataColumn
        
        Private columnPLAN_USER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINRECIPEPLAN_HEADER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPEPLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPEPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPEPLAN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPEPLAN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINRECIPEPLAN_HEADERRow
            Get
                Return CType(Me.Rows(index),MAINRECIPEPLAN_HEADERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_HEADERRowChanging As MAINRECIPEPLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_HEADERRowChanged As MAINRECIPEPLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_HEADERRowDeleting As MAINRECIPEPLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_HEADERRowDeleted As MAINRECIPEPLAN_HEADERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINRECIPEPLAN_HEADERRow(ByVal row As MAINRECIPEPLAN_HEADERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINRECIPEPLAN_HEADERRow(ByVal MAINRECIPEPLAN_IDENT As String, ByVal MAINRECIPEPLAN_NAME As String, ByVal PLAN_USER As String) As MAINRECIPEPLAN_HEADERRow
            Dim rowMAINRECIPEPLAN_HEADERRow As MAINRECIPEPLAN_HEADERRow = CType(Me.NewRow,MAINRECIPEPLAN_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {MAINRECIPEPLAN_IDENT, MAINRECIPEPLAN_NAME, PLAN_USER}
            rowMAINRECIPEPLAN_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINRECIPEPLAN_HEADERRow)
            Return rowMAINRECIPEPLAN_HEADERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINRECIPEPLAN_IDENT(ByVal MAINRECIPEPLAN_IDENT As String) As MAINRECIPEPLAN_HEADERRow
            Return CType(Me.Rows.Find(New Object() {MAINRECIPEPLAN_IDENT}),MAINRECIPEPLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINRECIPEPLAN_HEADERDataTable = CType(MyBase.Clone,MAINRECIPEPLAN_HEADERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINRECIPEPLAN_HEADERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINRECIPEPLAN_IDENT = MyBase.Columns("MAINRECIPEPLAN_IDENT")
            Me.columnMAINRECIPEPLAN_NAME = MyBase.Columns("MAINRECIPEPLAN_NAME")
            Me.columnPLAN_USER = MyBase.Columns("PLAN_USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINRECIPEPLAN_IDENT = New Global.System.Data.DataColumn("MAINRECIPEPLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPEPLAN_IDENT)
            Me.columnMAINRECIPEPLAN_NAME = New Global.System.Data.DataColumn("MAINRECIPEPLAN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPEPLAN_NAME)
            Me.columnPLAN_USER = New Global.System.Data.DataColumn("PLAN_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_USER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINRECIPEPLAN_IDENT}, true))
            Me.columnMAINRECIPEPLAN_IDENT.AllowDBNull = false
            Me.columnMAINRECIPEPLAN_IDENT.Unique = true
            Me.columnMAINRECIPEPLAN_IDENT.MaxLength = 20
            Me.columnMAINRECIPEPLAN_NAME.MaxLength = 30
            Me.columnPLAN_USER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINRECIPEPLAN_HEADERRow() As MAINRECIPEPLAN_HEADERRow
            Return CType(Me.NewRow,MAINRECIPEPLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINRECIPEPLAN_HEADERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINRECIPEPLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINRECIPEPLAN_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_HEADERRowChanged(Me, New MAINRECIPEPLAN_HEADERRowChangeEvent(CType(e.Row,MAINRECIPEPLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINRECIPEPLAN_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_HEADERRowChanging(Me, New MAINRECIPEPLAN_HEADERRowChangeEvent(CType(e.Row,MAINRECIPEPLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINRECIPEPLAN_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_HEADERRowDeleted(Me, New MAINRECIPEPLAN_HEADERRowChangeEvent(CType(e.Row,MAINRECIPEPLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINRECIPEPLAN_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_HEADERRowDeleting(Me, New MAINRECIPEPLAN_HEADERRowChangeEvent(CType(e.Row,MAINRECIPEPLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINRECIPEPLAN_HEADERRow(ByVal row As MAINRECIPEPLAN_HEADERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINRECIPEPLAN_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MAINRECIPEPLAN_LINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnMAINRECIPEPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnMAINRECIPEPLAN_LINE As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnPROD_CYCLE As Global.System.Data.DataColumn
        
        Private columnPLAN_STATUS As Global.System.Data.DataColumn
        
        Private columnSTART_DATETIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MAINRECIPEPLAN_LINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPEPLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPEPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPEPLAN_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPEPLAN_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property START_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MAINRECIPEPLAN_LINERow
            Get
                Return CType(Me.Rows(index),MAINRECIPEPLAN_LINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_LINERowChanging As MAINRECIPEPLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_LINERowChanged As MAINRECIPEPLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_LINERowDeleting As MAINRECIPEPLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MAINRECIPEPLAN_LINERowDeleted As MAINRECIPEPLAN_LINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMAINRECIPEPLAN_LINERow(ByVal row As MAINRECIPEPLAN_LINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMAINRECIPEPLAN_LINERow(ByVal parentMAINRECIPEPLAN_HEADERRowByMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE As MAINRECIPEPLAN_HEADERRow, ByVal MAINRECIPEPLAN_LINE As Short, ByVal parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPEPLAN_LINE As MAINRECIPE_HEADERRow, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Integer, ByVal PROD_SETPOINT As Double, ByVal PROD_UNIT As String, ByVal PROD_CYCLE As Short, ByVal PLAN_STATUS As Short, ByVal START_DATETIME As Date) As MAINRECIPEPLAN_LINERow
            Dim rowMAINRECIPEPLAN_LINERow As MAINRECIPEPLAN_LINERow = CType(Me.NewRow,MAINRECIPEPLAN_LINERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, MAINRECIPEPLAN_LINE, Nothing, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_CYCLE, PLAN_STATUS, START_DATETIME}
            If (Not (parentMAINRECIPEPLAN_HEADERRowByMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE) Is Nothing) Then
                columnValuesArray(0) = parentMAINRECIPEPLAN_HEADERRowByMAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE(0)
            End If
            If (Not (parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPEPLAN_LINE) Is Nothing) Then
                columnValuesArray(2) = parentMAINRECIPE_HEADERRowByMAINRECIPE_HEADERMAINRECIPEPLAN_LINE(0)
            End If
            rowMAINRECIPEPLAN_LINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMAINRECIPEPLAN_LINERow)
            Return rowMAINRECIPEPLAN_LINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByMAINRECIPEPLAN_IDENTMAINRECIPEPLAN_LINE(ByVal MAINRECIPEPLAN_IDENT As String, ByVal MAINRECIPEPLAN_LINE As Short) As MAINRECIPEPLAN_LINERow
            Return CType(Me.Rows.Find(New Object() {MAINRECIPEPLAN_IDENT, MAINRECIPEPLAN_LINE}),MAINRECIPEPLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MAINRECIPEPLAN_LINEDataTable = CType(MyBase.Clone,MAINRECIPEPLAN_LINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MAINRECIPEPLAN_LINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnMAINRECIPEPLAN_IDENT = MyBase.Columns("MAINRECIPEPLAN_IDENT")
            Me.columnMAINRECIPEPLAN_LINE = MyBase.Columns("MAINRECIPEPLAN_LINE")
            Me.columnMAINRECIPE_IDENT = MyBase.Columns("MAINRECIPE_IDENT")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnPROD_CYCLE = MyBase.Columns("PROD_CYCLE")
            Me.columnPLAN_STATUS = MyBase.Columns("PLAN_STATUS")
            Me.columnSTART_DATETIME = MyBase.Columns("START_DATETIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnMAINRECIPEPLAN_IDENT = New Global.System.Data.DataColumn("MAINRECIPEPLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPEPLAN_IDENT)
            Me.columnMAINRECIPEPLAN_LINE = New Global.System.Data.DataColumn("MAINRECIPEPLAN_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPEPLAN_LINE)
            Me.columnMAINRECIPE_IDENT = New Global.System.Data.DataColumn("MAINRECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_IDENT)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnPROD_CYCLE = New Global.System.Data.DataColumn("PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_CYCLE)
            Me.columnPLAN_STATUS = New Global.System.Data.DataColumn("PLAN_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_STATUS)
            Me.columnSTART_DATETIME = New Global.System.Data.DataColumn("START_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_DATETIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMAINRECIPEPLAN_IDENT, Me.columnMAINRECIPEPLAN_LINE}, true))
            Me.columnMAINRECIPEPLAN_IDENT.AllowDBNull = false
            Me.columnMAINRECIPEPLAN_IDENT.MaxLength = 20
            Me.columnMAINRECIPEPLAN_LINE.AllowDBNull = false
            Me.columnMAINRECIPE_IDENT.MaxLength = 20
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMAINRECIPEPLAN_LINERow() As MAINRECIPEPLAN_LINERow
            Return CType(Me.NewRow,MAINRECIPEPLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MAINRECIPEPLAN_LINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MAINRECIPEPLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MAINRECIPEPLAN_LINERowChangedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_LINERowChanged(Me, New MAINRECIPEPLAN_LINERowChangeEvent(CType(e.Row,MAINRECIPEPLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MAINRECIPEPLAN_LINERowChangingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_LINERowChanging(Me, New MAINRECIPEPLAN_LINERowChangeEvent(CType(e.Row,MAINRECIPEPLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MAINRECIPEPLAN_LINERowDeletedEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_LINERowDeleted(Me, New MAINRECIPEPLAN_LINERowChangeEvent(CType(e.Row,MAINRECIPEPLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MAINRECIPEPLAN_LINERowDeletingEvent) Is Nothing) Then
                RaiseEvent MAINRECIPEPLAN_LINERowDeleting(Me, New MAINRECIPEPLAN_LINERowChangeEvent(CType(e.Row,MAINRECIPEPLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMAINRECIPEPLAN_LINERow(ByVal row As MAINRECIPEPLAN_LINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MAINRECIPEPLAN_LINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MATERIALDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_NAME As Global.System.Data.DataColumn
        
        Private columnMAT_BATCH_MODE As Global.System.Data.DataColumn
        
        Private columnWP_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_SPM_OUTADR As Global.System.Data.DataColumn
        
        Private columnMAT_SPM_INADR As Global.System.Data.DataColumn
        
        Private columnMAT_PROD_REPORT As Global.System.Data.DataColumn
        
        Private columnMAT_BATCH_REPORT As Global.System.Data.DataColumn
        
        Private columnMAT_USER As Global.System.Data.DataColumn
        
        Private columnMAT_PARA As Global.System.Data.DataColumn
        
        Private columnMAT_PRESET As Global.System.Data.DataColumn
        
        Private columnMAT_OVERSHOOT As Global.System.Data.DataColumn
        
        Private columnMAT_POS_TOL As Global.System.Data.DataColumn
        
        Private columnMAT_NEG_TOL As Global.System.Data.DataColumn
        
        Private columnMAT_FLOWRATE As Global.System.Data.DataColumn
        
        Private columnMAT_CALMINGTIME As Global.System.Data.DataColumn
        
        Private columnMAT_RESTART_MODE As Global.System.Data.DataColumn
        
        Private columnMAT_DISCHARGETIME As Global.System.Data.DataColumn
        
        Private columnMAT_A1_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_A1_MAX As Global.System.Data.DataColumn
        
        Private columnMAT_A1_MIN As Global.System.Data.DataColumn
        
        Private columnMAT_STOCK As Global.System.Data.DataColumn
        
        Private columnMAT_MIN_STOCK As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT_CORR As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT_CORR_VAL As Global.System.Data.DataColumn
        
        Private columnMAT_POS_TOL_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_NEG_TOL_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_ORDER As Global.System.Data.DataColumn
        
        Private columnMAT_DELIVERY As Global.System.Data.DataColumn
        
        Private columnMAT_LOT As Global.System.Data.DataColumn
        
        Private columnMAT_DATETIME As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_COD_SRC As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_COD_LST As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_COD_ERR As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_COD_ERRNUM As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        Private columnSCRIPT_CIC As Global.System.Data.DataColumn
        
        Private columnLABEL_PRINT As Global.System.Data.DataColumn
        
        Private columnLABEL_COPIES As Global.System.Data.DataColumn
        
        Private columnLABEL_NAME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MATERIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_BATCH_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_BATCH_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SPM_OUTADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SPM_OUTADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SPM_INADRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SPM_INADR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PROD_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PROD_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_BATCH_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_BATCH_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PARAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PARA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_PRESETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_PRESET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_OVERSHOOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_OVERSHOOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_POS_TOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_POS_TOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NEG_TOLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NEG_TOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_FLOWRATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_FLOWRATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_CALMINGTIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_CALMINGTIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_RESTART_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_RESTART_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DISCHARGETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DISCHARGETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_MAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_MAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_A1_MINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_A1_MIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_STOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_MIN_STOCKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_MIN_STOCK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENT_CORRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT_CORR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENT_CORR_VALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT_CORR_VAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_POS_TOL_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_POS_TOL_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_NEG_TOL_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_NEG_TOL_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DELIVERYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DELIVERY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_LOTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_LOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_COD_SRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_COD_SRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_COD_LSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_COD_LST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_COD_ERRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_COD_ERR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_COD_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_COD_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_CICColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_CIC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_PRINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_PRINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_COPIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_COPIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MATERIALRow
            Get
                Return CType(Me.Rows(index),MATERIALRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MATERIALRowChanging As MATERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MATERIALRowChanged As MATERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MATERIALRowDeleting As MATERIALRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MATERIALRowDeleted As MATERIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMATERIALRow(ByVal row As MATERIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMATERIALRow( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_USER As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_PRESET As Double,  _
                    ByVal MAT_OVERSHOOT As Double,  _
                    ByVal MAT_POS_TOL As Double,  _
                    ByVal MAT_NEG_TOL As Double,  _
                    ByVal MAT_FLOWRATE As Double,  _
                    ByVal MAT_CALMINGTIME As Short,  _
                    ByVal MAT_RESTART_MODE As Byte,  _
                    ByVal MAT_DISCHARGETIME As Short,  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_A1_MAX As Double,  _
                    ByVal MAT_A1_MIN As Double,  _
                    ByVal MAT_STOCK As Double,  _
                    ByVal MAT_MIN_STOCK As Double,  _
                    ByVal MAT_IDENT_CORR As String,  _
                    ByVal MAT_IDENT_CORR_VAL As Double,  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Date,  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal SCRIPT_VAR_COD_LST As String,  _
                    ByVal SCRIPT_VAR_COD_ERR As String,  _
                    ByVal SCRIPT_VAR_COD_ERRNUM As Integer,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Short,  _
                    ByVal LABEL_NAME As String) As MATERIALRow
            Dim rowMATERIALRow As MATERIALRow = CType(Me.NewRow,MATERIALRow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, MAT_IDENT, MAT_NAME, MAT_BATCH_MODE, WP_IDENT, MAT_SPM_OUTADR, MAT_SPM_INADR, MAT_PROD_REPORT, MAT_BATCH_REPORT, MAT_USER, MAT_PARA, MAT_PRESET, MAT_OVERSHOOT, MAT_POS_TOL, MAT_NEG_TOL, MAT_FLOWRATE, MAT_CALMINGTIME, MAT_RESTART_MODE, MAT_DISCHARGETIME, MAT_A1_UNIT, MAT_A1_MAX, MAT_A1_MIN, MAT_STOCK, MAT_MIN_STOCK, MAT_IDENT_CORR, MAT_IDENT_CORR_VAL, MAT_POS_TOL_UNIT, MAT_NEG_TOL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SCRIPT_VAR_COD_SRC, SCRIPT_VAR_COD_LST, SCRIPT_VAR_COD_ERR, SCRIPT_VAR_COD_ERRNUM, SCRIPT_DIT, SCRIPT_CIC, LABEL_PRINT, LABEL_COPIES, LABEL_NAME}
            rowMATERIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMATERIALRow)
            Return rowMATERIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTMAT_IDENT(ByVal PRODLINE_IDENT As String, ByVal MAT_IDENT As String) As MATERIALRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, MAT_IDENT}),MATERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MATERIALDataTable = CType(MyBase.Clone,MATERIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MATERIALDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnMAT_IDENT = MyBase.Columns("MAT_IDENT")
            Me.columnMAT_NAME = MyBase.Columns("MAT_NAME")
            Me.columnMAT_BATCH_MODE = MyBase.Columns("MAT_BATCH_MODE")
            Me.columnWP_IDENT = MyBase.Columns("WP_IDENT")
            Me.columnMAT_SPM_OUTADR = MyBase.Columns("MAT_SPM_OUTADR")
            Me.columnMAT_SPM_INADR = MyBase.Columns("MAT_SPM_INADR")
            Me.columnMAT_PROD_REPORT = MyBase.Columns("MAT_PROD_REPORT")
            Me.columnMAT_BATCH_REPORT = MyBase.Columns("MAT_BATCH_REPORT")
            Me.columnMAT_USER = MyBase.Columns("MAT_USER")
            Me.columnMAT_PARA = MyBase.Columns("MAT_PARA")
            Me.columnMAT_PRESET = MyBase.Columns("MAT_PRESET")
            Me.columnMAT_OVERSHOOT = MyBase.Columns("MAT_OVERSHOOT")
            Me.columnMAT_POS_TOL = MyBase.Columns("MAT_POS_TOL")
            Me.columnMAT_NEG_TOL = MyBase.Columns("MAT_NEG_TOL")
            Me.columnMAT_FLOWRATE = MyBase.Columns("MAT_FLOWRATE")
            Me.columnMAT_CALMINGTIME = MyBase.Columns("MAT_CALMINGTIME")
            Me.columnMAT_RESTART_MODE = MyBase.Columns("MAT_RESTART_MODE")
            Me.columnMAT_DISCHARGETIME = MyBase.Columns("MAT_DISCHARGETIME")
            Me.columnMAT_A1_UNIT = MyBase.Columns("MAT_A1_UNIT")
            Me.columnMAT_A1_MAX = MyBase.Columns("MAT_A1_MAX")
            Me.columnMAT_A1_MIN = MyBase.Columns("MAT_A1_MIN")
            Me.columnMAT_STOCK = MyBase.Columns("MAT_STOCK")
            Me.columnMAT_MIN_STOCK = MyBase.Columns("MAT_MIN_STOCK")
            Me.columnMAT_IDENT_CORR = MyBase.Columns("MAT_IDENT_CORR")
            Me.columnMAT_IDENT_CORR_VAL = MyBase.Columns("MAT_IDENT_CORR_VAL")
            Me.columnMAT_POS_TOL_UNIT = MyBase.Columns("MAT_POS_TOL_UNIT")
            Me.columnMAT_NEG_TOL_UNIT = MyBase.Columns("MAT_NEG_TOL_UNIT")
            Me.columnMAT_ORDER = MyBase.Columns("MAT_ORDER")
            Me.columnMAT_DELIVERY = MyBase.Columns("MAT_DELIVERY")
            Me.columnMAT_LOT = MyBase.Columns("MAT_LOT")
            Me.columnMAT_DATETIME = MyBase.Columns("MAT_DATETIME")
            Me.columnSCRIPT_VAR_COD_SRC = MyBase.Columns("SCRIPT_VAR_COD_SRC")
            Me.columnSCRIPT_VAR_COD_LST = MyBase.Columns("SCRIPT_VAR_COD_LST")
            Me.columnSCRIPT_VAR_COD_ERR = MyBase.Columns("SCRIPT_VAR_COD_ERR")
            Me.columnSCRIPT_VAR_COD_ERRNUM = MyBase.Columns("SCRIPT_VAR_COD_ERRNUM")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
            Me.columnSCRIPT_CIC = MyBase.Columns("SCRIPT_CIC")
            Me.columnLABEL_PRINT = MyBase.Columns("LABEL_PRINT")
            Me.columnLABEL_COPIES = MyBase.Columns("LABEL_COPIES")
            Me.columnLABEL_NAME = MyBase.Columns("LABEL_NAME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnMAT_IDENT = New Global.System.Data.DataColumn("MAT_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT)
            Me.columnMAT_NAME = New Global.System.Data.DataColumn("MAT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NAME)
            Me.columnMAT_BATCH_MODE = New Global.System.Data.DataColumn("MAT_BATCH_MODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_BATCH_MODE)
            Me.columnWP_IDENT = New Global.System.Data.DataColumn("WP_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_IDENT)
            Me.columnMAT_SPM_OUTADR = New Global.System.Data.DataColumn("MAT_SPM_OUTADR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SPM_OUTADR)
            Me.columnMAT_SPM_INADR = New Global.System.Data.DataColumn("MAT_SPM_INADR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SPM_INADR)
            Me.columnMAT_PROD_REPORT = New Global.System.Data.DataColumn("MAT_PROD_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PROD_REPORT)
            Me.columnMAT_BATCH_REPORT = New Global.System.Data.DataColumn("MAT_BATCH_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_BATCH_REPORT)
            Me.columnMAT_USER = New Global.System.Data.DataColumn("MAT_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_USER)
            Me.columnMAT_PARA = New Global.System.Data.DataColumn("MAT_PARA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PARA)
            Me.columnMAT_PRESET = New Global.System.Data.DataColumn("MAT_PRESET", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_PRESET)
            Me.columnMAT_OVERSHOOT = New Global.System.Data.DataColumn("MAT_OVERSHOOT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_OVERSHOOT)
            Me.columnMAT_POS_TOL = New Global.System.Data.DataColumn("MAT_POS_TOL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_POS_TOL)
            Me.columnMAT_NEG_TOL = New Global.System.Data.DataColumn("MAT_NEG_TOL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NEG_TOL)
            Me.columnMAT_FLOWRATE = New Global.System.Data.DataColumn("MAT_FLOWRATE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_FLOWRATE)
            Me.columnMAT_CALMINGTIME = New Global.System.Data.DataColumn("MAT_CALMINGTIME", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_CALMINGTIME)
            Me.columnMAT_RESTART_MODE = New Global.System.Data.DataColumn("MAT_RESTART_MODE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_RESTART_MODE)
            Me.columnMAT_DISCHARGETIME = New Global.System.Data.DataColumn("MAT_DISCHARGETIME", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DISCHARGETIME)
            Me.columnMAT_A1_UNIT = New Global.System.Data.DataColumn("MAT_A1_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_UNIT)
            Me.columnMAT_A1_MAX = New Global.System.Data.DataColumn("MAT_A1_MAX", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_MAX)
            Me.columnMAT_A1_MIN = New Global.System.Data.DataColumn("MAT_A1_MIN", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_A1_MIN)
            Me.columnMAT_STOCK = New Global.System.Data.DataColumn("MAT_STOCK", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_STOCK)
            Me.columnMAT_MIN_STOCK = New Global.System.Data.DataColumn("MAT_MIN_STOCK", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_MIN_STOCK)
            Me.columnMAT_IDENT_CORR = New Global.System.Data.DataColumn("MAT_IDENT_CORR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT_CORR)
            Me.columnMAT_IDENT_CORR_VAL = New Global.System.Data.DataColumn("MAT_IDENT_CORR_VAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT_CORR_VAL)
            Me.columnMAT_POS_TOL_UNIT = New Global.System.Data.DataColumn("MAT_POS_TOL_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_POS_TOL_UNIT)
            Me.columnMAT_NEG_TOL_UNIT = New Global.System.Data.DataColumn("MAT_NEG_TOL_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_NEG_TOL_UNIT)
            Me.columnMAT_ORDER = New Global.System.Data.DataColumn("MAT_ORDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ORDER)
            Me.columnMAT_DELIVERY = New Global.System.Data.DataColumn("MAT_DELIVERY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DELIVERY)
            Me.columnMAT_LOT = New Global.System.Data.DataColumn("MAT_LOT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_LOT)
            Me.columnMAT_DATETIME = New Global.System.Data.DataColumn("MAT_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_DATETIME)
            Me.columnSCRIPT_VAR_COD_SRC = New Global.System.Data.DataColumn("SCRIPT_VAR_COD_SRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_COD_SRC)
            Me.columnSCRIPT_VAR_COD_LST = New Global.System.Data.DataColumn("SCRIPT_VAR_COD_LST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_COD_LST)
            Me.columnSCRIPT_VAR_COD_ERR = New Global.System.Data.DataColumn("SCRIPT_VAR_COD_ERR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_COD_ERR)
            Me.columnSCRIPT_VAR_COD_ERRNUM = New Global.System.Data.DataColumn("SCRIPT_VAR_COD_ERRNUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_COD_ERRNUM)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me.columnSCRIPT_CIC = New Global.System.Data.DataColumn("SCRIPT_CIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_CIC)
            Me.columnLABEL_PRINT = New Global.System.Data.DataColumn("LABEL_PRINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_PRINT)
            Me.columnLABEL_COPIES = New Global.System.Data.DataColumn("LABEL_COPIES", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_COPIES)
            Me.columnLABEL_NAME = New Global.System.Data.DataColumn("LABEL_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_NAME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnMAT_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnMAT_IDENT.AllowDBNull = false
            Me.columnMAT_IDENT.MaxLength = 20
            Me.columnMAT_NAME.MaxLength = 30
            Me.columnMAT_BATCH_MODE.MaxLength = 20
            Me.columnWP_IDENT.MaxLength = 20
            Me.columnMAT_USER.MaxLength = 20
            Me.columnMAT_PARA.MaxLength = 255
            Me.columnMAT_A1_UNIT.MaxLength = 10
            Me.columnMAT_IDENT_CORR.MaxLength = 20
            Me.columnMAT_POS_TOL_UNIT.MaxLength = 4
            Me.columnMAT_NEG_TOL_UNIT.MaxLength = 4
            Me.columnMAT_ORDER.MaxLength = 30
            Me.columnMAT_DELIVERY.MaxLength = 30
            Me.columnMAT_LOT.MaxLength = 30
            Me.columnSCRIPT_VAR_COD_SRC.MaxLength = 536870910
            Me.columnSCRIPT_VAR_COD_LST.MaxLength = 536870910
            Me.columnSCRIPT_VAR_COD_ERR.MaxLength = 536870910
            Me.columnSCRIPT_DIT.MaxLength = 536870910
            Me.columnSCRIPT_CIC.MaxLength = 536870910
            Me.columnLABEL_NAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMATERIALRow() As MATERIALRow
            Return CType(Me.NewRow,MATERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MATERIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MATERIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MATERIALRowChangedEvent) Is Nothing) Then
                RaiseEvent MATERIALRowChanged(Me, New MATERIALRowChangeEvent(CType(e.Row,MATERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MATERIALRowChangingEvent) Is Nothing) Then
                RaiseEvent MATERIALRowChanging(Me, New MATERIALRowChangeEvent(CType(e.Row,MATERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MATERIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent MATERIALRowDeleted(Me, New MATERIALRowChangeEvent(CType(e.Row,MATERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MATERIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent MATERIALRowDeleting(Me, New MATERIALRowChangeEvent(CType(e.Row,MATERIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMATERIALRow(ByVal row As MATERIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MATERIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLAN_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_NAME As Global.System.Data.DataColumn
        
        Private columnPLAN_USER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLAN_HEADER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLAN_HEADERRow
            Get
                Return CType(Me.Rows(index),PLAN_HEADERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_HEADERRowChanging As PLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_HEADERRowChanged As PLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_HEADERRowDeleting As PLAN_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_HEADERRowDeleted As PLAN_HEADERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLAN_HEADERRow(ByVal row As PLAN_HEADERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLAN_HEADERRow(ByVal parentPRODUCTIONLINERowByPRODUCTIONLINEPLAN_HEADER As PRODUCTIONLINERow, ByVal PLAN_IDENT As String, ByVal PLAN_NAME As String, ByVal PLAN_USER As String) As PLAN_HEADERRow
            Dim rowPLAN_HEADERRow As PLAN_HEADERRow = CType(Me.NewRow,PLAN_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PLAN_IDENT, PLAN_NAME, PLAN_USER}
            If (Not (parentPRODUCTIONLINERowByPRODUCTIONLINEPLAN_HEADER) Is Nothing) Then
                columnValuesArray(0) = parentPRODUCTIONLINERowByPRODUCTIONLINEPLAN_HEADER(1)
            End If
            rowPLAN_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLAN_HEADERRow)
            Return rowPLAN_HEADERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTPLAN_IDENT(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String) As PLAN_HEADERRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, PLAN_IDENT}),PLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLAN_HEADERDataTable = CType(MyBase.Clone,PLAN_HEADERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLAN_HEADERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnPLAN_IDENT = MyBase.Columns("PLAN_IDENT")
            Me.columnPLAN_NAME = MyBase.Columns("PLAN_NAME")
            Me.columnPLAN_USER = MyBase.Columns("PLAN_USER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnPLAN_IDENT = New Global.System.Data.DataColumn("PLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_IDENT)
            Me.columnPLAN_NAME = New Global.System.Data.DataColumn("PLAN_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_NAME)
            Me.columnPLAN_USER = New Global.System.Data.DataColumn("PLAN_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_USER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnPLAN_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnPLAN_IDENT.AllowDBNull = false
            Me.columnPLAN_IDENT.MaxLength = 20
            Me.columnPLAN_NAME.MaxLength = 30
            Me.columnPLAN_USER.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLAN_HEADERRow() As PLAN_HEADERRow
            Return CType(Me.NewRow,PLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLAN_HEADERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLAN_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLAN_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent PLAN_HEADERRowChanged(Me, New PLAN_HEADERRowChangeEvent(CType(e.Row,PLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLAN_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent PLAN_HEADERRowChanging(Me, New PLAN_HEADERRowChangeEvent(CType(e.Row,PLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLAN_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PLAN_HEADERRowDeleted(Me, New PLAN_HEADERRowChangeEvent(CType(e.Row,PLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLAN_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PLAN_HEADERRowDeleting(Me, New PLAN_HEADERRowChangeEvent(CType(e.Row,PLAN_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLAN_HEADERRow(ByVal row As PLAN_HEADERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLAN_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PLAN_LINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_IDENT As Global.System.Data.DataColumn
        
        Private columnPLAN_LINE As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private columnPROD_NUM As Global.System.Data.DataColumn
        
        Private columnPROD_SETPOINT As Global.System.Data.DataColumn
        
        Private columnPROD_UNIT As Global.System.Data.DataColumn
        
        Private columnPROD_PCAUTOSTART As Global.System.Data.DataColumn
        
        Private columnPROD_CYCLE As Global.System.Data.DataColumn
        
        Private columnPLAN_STATUS As Global.System.Data.DataColumn
        
        Private columnSTART_DATETIME As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PLAN_LINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_PCAUTOSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_PCAUTOSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PLAN_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLAN_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property START_DATETIMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTART_DATETIME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PLAN_LINERow
            Get
                Return CType(Me.Rows(index),PLAN_LINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_LINERowChanging As PLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_LINERowChanged As PLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_LINERowDeleting As PLAN_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PLAN_LINERowDeleted As PLAN_LINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPLAN_LINERow(ByVal row As PLAN_LINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPLAN_LINERow(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String, ByVal PLAN_LINE As Short, ByVal RECIPE_IDENT As String, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Integer, ByVal PROD_SETPOINT As Double, ByVal PROD_UNIT As String, ByVal PROD_PCAUTOSTART As Boolean, ByVal PROD_CYCLE As Short, ByVal PLAN_STATUS As Short, ByVal START_DATETIME As Date) As PLAN_LINERow
            Dim rowPLAN_LINERow As PLAN_LINERow = CType(Me.NewRow,PLAN_LINERow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE, RECIPE_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_PCAUTOSTART, PROD_CYCLE, PLAN_STATUS, START_DATETIME}
            rowPLAN_LINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPLAN_LINERow)
            Return rowPLAN_LINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTPLAN_IDENTPLAN_LINE(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String, ByVal PLAN_LINE As Short) As PLAN_LINERow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE}),PLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PLAN_LINEDataTable = CType(MyBase.Clone,PLAN_LINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PLAN_LINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnPLAN_IDENT = MyBase.Columns("PLAN_IDENT")
            Me.columnPLAN_LINE = MyBase.Columns("PLAN_LINE")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnORDER_IDENT = MyBase.Columns("ORDER_IDENT")
            Me.columnCUSTOMER_IDENT = MyBase.Columns("CUSTOMER_IDENT")
            Me.columnPROD_NUM = MyBase.Columns("PROD_NUM")
            Me.columnPROD_SETPOINT = MyBase.Columns("PROD_SETPOINT")
            Me.columnPROD_UNIT = MyBase.Columns("PROD_UNIT")
            Me.columnPROD_PCAUTOSTART = MyBase.Columns("PROD_PCAUTOSTART")
            Me.columnPROD_CYCLE = MyBase.Columns("PROD_CYCLE")
            Me.columnPLAN_STATUS = MyBase.Columns("PLAN_STATUS")
            Me.columnSTART_DATETIME = MyBase.Columns("START_DATETIME")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnPLAN_IDENT = New Global.System.Data.DataColumn("PLAN_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_IDENT)
            Me.columnPLAN_LINE = New Global.System.Data.DataColumn("PLAN_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_LINE)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnORDER_IDENT = New Global.System.Data.DataColumn("ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT)
            Me.columnCUSTOMER_IDENT = New Global.System.Data.DataColumn("CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT)
            Me.columnPROD_NUM = New Global.System.Data.DataColumn("PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_NUM)
            Me.columnPROD_SETPOINT = New Global.System.Data.DataColumn("PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_SETPOINT)
            Me.columnPROD_UNIT = New Global.System.Data.DataColumn("PROD_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_UNIT)
            Me.columnPROD_PCAUTOSTART = New Global.System.Data.DataColumn("PROD_PCAUTOSTART", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_PCAUTOSTART)
            Me.columnPROD_CYCLE = New Global.System.Data.DataColumn("PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_CYCLE)
            Me.columnPLAN_STATUS = New Global.System.Data.DataColumn("PLAN_STATUS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLAN_STATUS)
            Me.columnSTART_DATETIME = New Global.System.Data.DataColumn("START_DATETIME", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTART_DATETIME)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnPLAN_IDENT, Me.columnPLAN_LINE}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnPLAN_IDENT.AllowDBNull = false
            Me.columnPLAN_IDENT.MaxLength = 20
            Me.columnPLAN_LINE.AllowDBNull = false
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnORDER_IDENT.MaxLength = 20
            Me.columnCUSTOMER_IDENT.MaxLength = 20
            Me.columnPROD_UNIT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPLAN_LINERow() As PLAN_LINERow
            Return CType(Me.NewRow,PLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PLAN_LINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PLAN_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PLAN_LINERowChangedEvent) Is Nothing) Then
                RaiseEvent PLAN_LINERowChanged(Me, New PLAN_LINERowChangeEvent(CType(e.Row,PLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PLAN_LINERowChangingEvent) Is Nothing) Then
                RaiseEvent PLAN_LINERowChanging(Me, New PLAN_LINERowChangeEvent(CType(e.Row,PLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PLAN_LINERowDeletedEvent) Is Nothing) Then
                RaiseEvent PLAN_LINERowDeleted(Me, New PLAN_LINERowChangeEvent(CType(e.Row,PLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PLAN_LINERowDeletingEvent) Is Nothing) Then
                RaiseEvent PLAN_LINERowDeleting(Me, New PLAN_LINERowChangeEvent(CType(e.Row,PLAN_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePLAN_LINERow(ByVal row As PLAN_LINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PLAN_LINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PR8400DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPR8400_MODE As Global.System.Data.DataColumn
        
        Private columnPRINT_MAINPRODREPORT As Global.System.Data.DataColumn
        
        Private columnPRINT_MAINBATCHREPORT As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT_CAPTION_MAINREPORT As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT_CAPTION_MAINREPORT As Global.System.Data.DataColumn
        
        Private columnHEADER1_MAINREPORT As Global.System.Data.DataColumn
        
        Private columnHEADER2_MAINREPORT As Global.System.Data.DataColumn
        
        Private columnLOG_MAINREPORT As Global.System.Data.DataColumn
        
        Private columnLOG_MAINREPORT_DAYS As Global.System.Data.DataColumn
        
        Private columnMAINRECIPE_ENABLED As Global.System.Data.DataColumn
        
        Private columnMAINSEQUENCE_NUMBER As Global.System.Data.DataColumn
        
        Private columnPROD_RECIPE_TOTAL As Global.System.Data.DataColumn
        
        Private _columnMAINPROD_SETPOINT__ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PR8400"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PR8400_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPR8400_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRINT_MAINPRODREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINT_MAINPRODREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRINT_MAINBATCHREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINT_MAINBATCHREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENT_CAPTION_MAINREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT_CAPTION_MAINREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENT_CAPTION_MAINREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT_CAPTION_MAINREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HEADER1_MAINREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADER1_MAINREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HEADER2_MAINREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADER2_MAINREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_MAINREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_MAINREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_MAINREPORT_DAYSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_MAINREPORT_DAYS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINRECIPE_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINRECIPE_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAINSEQUENCE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAINSEQUENCE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_RECIPE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_RECIPE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _MAINPROD_SETPOINT__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnMAINPROD_SETPOINT__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PR8400Row
            Get
                Return CType(Me.Rows(index),PR8400Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PR8400RowChanging As PR8400RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PR8400RowChanged As PR8400RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PR8400RowDeleting As PR8400RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PR8400RowDeleted As PR8400RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPR8400Row(ByVal row As PR8400Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPR8400Row(ByVal PR8400_MODE As Short, ByVal PRINT_MAINPRODREPORT As Boolean, ByVal PRINT_MAINBATCHREPORT As Boolean, ByVal ORDER_IDENT_CAPTION_MAINREPORT As String, ByVal CUSTOMER_IDENT_CAPTION_MAINREPORT As String, ByVal HEADER1_MAINREPORT As String, ByVal HEADER2_MAINREPORT As String, ByVal LOG_MAINREPORT As Boolean, ByVal LOG_MAINREPORT_DAYS As Short, ByVal MAINRECIPE_ENABLED As Boolean, ByVal MAINSEQUENCE_NUMBER As Integer, ByVal PROD_RECIPE_TOTAL As Boolean, ByVal _MAINPROD_SETPOINT__ As Boolean) As PR8400Row
            Dim rowPR8400Row As PR8400Row = CType(Me.NewRow,PR8400Row)
            Dim columnValuesArray() As Object = New Object() {PR8400_MODE, PRINT_MAINPRODREPORT, PRINT_MAINBATCHREPORT, ORDER_IDENT_CAPTION_MAINREPORT, CUSTOMER_IDENT_CAPTION_MAINREPORT, HEADER1_MAINREPORT, HEADER2_MAINREPORT, LOG_MAINREPORT, LOG_MAINREPORT_DAYS, MAINRECIPE_ENABLED, MAINSEQUENCE_NUMBER, PROD_RECIPE_TOTAL, _MAINPROD_SETPOINT__}
            rowPR8400Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowPR8400Row)
            Return rowPR8400Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PR8400DataTable = CType(MyBase.Clone,PR8400DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PR8400DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPR8400_MODE = MyBase.Columns("PR8400_MODE")
            Me.columnPRINT_MAINPRODREPORT = MyBase.Columns("PRINT_MAINPRODREPORT")
            Me.columnPRINT_MAINBATCHREPORT = MyBase.Columns("PRINT_MAINBATCHREPORT")
            Me.columnORDER_IDENT_CAPTION_MAINREPORT = MyBase.Columns("ORDER_IDENT_CAPTION_MAINREPORT")
            Me.columnCUSTOMER_IDENT_CAPTION_MAINREPORT = MyBase.Columns("CUSTOMER_IDENT_CAPTION_MAINREPORT")
            Me.columnHEADER1_MAINREPORT = MyBase.Columns("HEADER1_MAINREPORT")
            Me.columnHEADER2_MAINREPORT = MyBase.Columns("HEADER2_MAINREPORT")
            Me.columnLOG_MAINREPORT = MyBase.Columns("LOG_MAINREPORT")
            Me.columnLOG_MAINREPORT_DAYS = MyBase.Columns("LOG_MAINREPORT_DAYS")
            Me.columnMAINRECIPE_ENABLED = MyBase.Columns("MAINRECIPE_ENABLED")
            Me.columnMAINSEQUENCE_NUMBER = MyBase.Columns("MAINSEQUENCE_NUMBER")
            Me.columnPROD_RECIPE_TOTAL = MyBase.Columns("PROD_RECIPE_TOTAL")
            Me._columnMAINPROD_SETPOINT__ = MyBase.Columns("MAINPROD_SETPOINT_%")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPR8400_MODE = New Global.System.Data.DataColumn("PR8400_MODE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPR8400_MODE)
            Me.columnPRINT_MAINPRODREPORT = New Global.System.Data.DataColumn("PRINT_MAINPRODREPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINT_MAINPRODREPORT)
            Me.columnPRINT_MAINBATCHREPORT = New Global.System.Data.DataColumn("PRINT_MAINBATCHREPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINT_MAINBATCHREPORT)
            Me.columnORDER_IDENT_CAPTION_MAINREPORT = New Global.System.Data.DataColumn("ORDER_IDENT_CAPTION_MAINREPORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT_CAPTION_MAINREPORT)
            Me.columnCUSTOMER_IDENT_CAPTION_MAINREPORT = New Global.System.Data.DataColumn("CUSTOMER_IDENT_CAPTION_MAINREPORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT_CAPTION_MAINREPORT)
            Me.columnHEADER1_MAINREPORT = New Global.System.Data.DataColumn("HEADER1_MAINREPORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADER1_MAINREPORT)
            Me.columnHEADER2_MAINREPORT = New Global.System.Data.DataColumn("HEADER2_MAINREPORT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADER2_MAINREPORT)
            Me.columnLOG_MAINREPORT = New Global.System.Data.DataColumn("LOG_MAINREPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_MAINREPORT)
            Me.columnLOG_MAINREPORT_DAYS = New Global.System.Data.DataColumn("LOG_MAINREPORT_DAYS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_MAINREPORT_DAYS)
            Me.columnMAINRECIPE_ENABLED = New Global.System.Data.DataColumn("MAINRECIPE_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINRECIPE_ENABLED)
            Me.columnMAINSEQUENCE_NUMBER = New Global.System.Data.DataColumn("MAINSEQUENCE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAINSEQUENCE_NUMBER)
            Me.columnPROD_RECIPE_TOTAL = New Global.System.Data.DataColumn("PROD_RECIPE_TOTAL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_RECIPE_TOTAL)
            Me._columnMAINPROD_SETPOINT__ = New Global.System.Data.DataColumn("MAINPROD_SETPOINT_%", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            Me._columnMAINPROD_SETPOINT__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnMAINPROD_SETPOINT__")
            Me._columnMAINPROD_SETPOINT__.ExtendedProperties.Add("Generator_UserColumnName", "MAINPROD_SETPOINT_%")
            MyBase.Columns.Add(Me._columnMAINPROD_SETPOINT__)
            Me.columnORDER_IDENT_CAPTION_MAINREPORT.MaxLength = 20
            Me.columnCUSTOMER_IDENT_CAPTION_MAINREPORT.MaxLength = 20
            Me.columnHEADER1_MAINREPORT.MaxLength = 80
            Me.columnHEADER2_MAINREPORT.MaxLength = 80
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPR8400Row() As PR8400Row
            Return CType(Me.NewRow,PR8400Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PR8400Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PR8400Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PR8400RowChangedEvent) Is Nothing) Then
                RaiseEvent PR8400RowChanged(Me, New PR8400RowChangeEvent(CType(e.Row,PR8400Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PR8400RowChangingEvent) Is Nothing) Then
                RaiseEvent PR8400RowChanging(Me, New PR8400RowChangeEvent(CType(e.Row,PR8400Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PR8400RowDeletedEvent) Is Nothing) Then
                RaiseEvent PR8400RowDeleted(Me, New PR8400RowChangeEvent(CType(e.Row,PR8400Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PR8400RowDeletingEvent) Is Nothing) Then
                RaiseEvent PR8400RowDeleting(Me, New PR8400RowChangeEvent(CType(e.Row,PR8400Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePR8400Row(ByVal row As PR8400Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PR8400DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODLINE_WPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnWP_IDENT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODLINE_WP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODLINE_WPRow
            Get
                Return CType(Me.Rows(index),PRODLINE_WPRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODLINE_WPRowChanging As PRODLINE_WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODLINE_WPRowChanged As PRODLINE_WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODLINE_WPRowDeleting As PRODLINE_WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODLINE_WPRowDeleted As PRODLINE_WPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPRODLINE_WPRow(ByVal row As PRODLINE_WPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPRODLINE_WPRow(ByVal parentPRODUCTIONLINERowByPRODUCTIONLINEPRODLINE_WP As PRODUCTIONLINERow, ByVal parentWPRowByWPPRODLINE_WP As WPRow) As PRODLINE_WPRow
            Dim rowPRODLINE_WPRow As PRODLINE_WPRow = CType(Me.NewRow,PRODLINE_WPRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing}
            If (Not (parentPRODUCTIONLINERowByPRODUCTIONLINEPRODLINE_WP) Is Nothing) Then
                columnValuesArray(0) = parentPRODUCTIONLINERowByPRODUCTIONLINEPRODLINE_WP(1)
            End If
            If (Not (parentWPRowByWPPRODLINE_WP) Is Nothing) Then
                columnValuesArray(1) = parentWPRowByWPPRODLINE_WP(1)
            End If
            rowPRODLINE_WPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODLINE_WPRow)
            Return rowPRODLINE_WPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTWP_IDENT(ByVal PRODLINE_IDENT As String, ByVal WP_IDENT As String) As PRODLINE_WPRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, WP_IDENT}),PRODLINE_WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODLINE_WPDataTable = CType(MyBase.Clone,PRODLINE_WPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODLINE_WPDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnWP_IDENT = MyBase.Columns("WP_IDENT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnWP_IDENT = New Global.System.Data.DataColumn("WP_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_IDENT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnWP_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 50
            Me.columnWP_IDENT.AllowDBNull = false
            Me.columnWP_IDENT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPRODLINE_WPRow() As PRODLINE_WPRow
            Return CType(Me.NewRow,PRODLINE_WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODLINE_WPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODLINE_WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODLINE_WPRowChangedEvent) Is Nothing) Then
                RaiseEvent PRODLINE_WPRowChanged(Me, New PRODLINE_WPRowChangeEvent(CType(e.Row,PRODLINE_WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODLINE_WPRowChangingEvent) Is Nothing) Then
                RaiseEvent PRODLINE_WPRowChanging(Me, New PRODLINE_WPRowChangeEvent(CType(e.Row,PRODLINE_WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODLINE_WPRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODLINE_WPRowDeleted(Me, New PRODLINE_WPRowChangeEvent(CType(e.Row,PRODLINE_WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODLINE_WPRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODLINE_WPRowDeleting(Me, New PRODLINE_WPRowChangeEvent(CType(e.Row,PRODLINE_WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePRODLINE_WPRow(ByVal row As PRODLINE_WPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODLINE_WPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PRODUCTIONLINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDEVICE_IDENT As Global.System.Data.DataColumn
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnPRODLINE_NUMBER As Global.System.Data.DataColumn
        
        Private columnDDESET As Global.System.Data.DataColumn
        
        Private columnORDER_IDENT_CAPTION As Global.System.Data.DataColumn
        
        Private columnCUSTOMER_IDENT_CAPTION As Global.System.Data.DataColumn
        
        Private columnHEADER1 As Global.System.Data.DataColumn
        
        Private columnHEADER2 As Global.System.Data.DataColumn
        
        Private _columnPROD_SETPOINT__ As Global.System.Data.DataColumn
        
        Private columnPROD_MODE As Global.System.Data.DataColumn
        
        Private columnPROD_RECIPE_TOTAL As Global.System.Data.DataColumn
        
        Private columnLOG_REPORT As Global.System.Data.DataColumn
        
        Private columnPRINT_PRODREPORT As Global.System.Data.DataColumn
        
        Private columnPRINT_BATCHREPORT As Global.System.Data.DataColumn
        
        Private columnPROD_MANUAL_START As Global.System.Data.DataColumn
        
        Private columnBATCH_MANUAL_START As Global.System.Data.DataColumn
        
        Private columnPRODLINE_ENABLED As Global.System.Data.DataColumn
        
        Private columnSEQUENCE_NUMBER As Global.System.Data.DataColumn
        
        Private columnLOG_REPORT_DAYS As Global.System.Data.DataColumn
        
        Private columnLOAD_RECIPE_CHANGED As Global.System.Data.DataColumn
        
        Private columnLOG_FLOWALARM As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_SRC As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_LST As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERR As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERRNUM As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PRODUCTIONLINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DDESETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDESET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORDER_IDENT_CAPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_IDENT_CAPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CUSTOMER_IDENT_CAPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUSTOMER_IDENT_CAPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HEADER1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADER1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HEADER2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnHEADER2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _PROD_SETPOINT__Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnPROD_SETPOINT__
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_MODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_MODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_RECIPE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_RECIPE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_REPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_REPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRINT_PRODREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINT_PRODREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRINT_BATCHREPORTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRINT_BATCHREPORT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROD_MANUAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROD_MANUAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BATCH_MANUAL_STARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBATCH_MANUAL_START
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQUENCE_NUMBERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQUENCE_NUMBER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_REPORT_DAYSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_REPORT_DAYS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOAD_RECIPE_CHANGEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOAD_RECIPE_CHANGED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LOG_FLOWALARMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOG_FLOWALARM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_SRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_SRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_LSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_LST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRODUCTIONLINERow
            Get
                Return CType(Me.Rows(index),PRODUCTIONLINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONLINERowChanging As PRODUCTIONLINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONLINERowChanged As PRODUCTIONLINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONLINERowDeleting As PRODUCTIONLINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PRODUCTIONLINERowDeleted As PRODUCTIONLINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPRODUCTIONLINERow(ByVal row As PRODUCTIONLINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPRODUCTIONLINERow( _
                    ByVal parentDEVICERowByReference As DEVICERow,  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PRODLINE_NUMBER As Short,  _
                    ByVal DDESET As Short,  _
                    ByVal ORDER_IDENT_CAPTION As String,  _
                    ByVal CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal HEADER1 As String,  _
                    ByVal HEADER2 As String,  _
                    ByVal _PROD_SETPOINT__ As Boolean,  _
                    ByVal PROD_MODE As Short,  _
                    ByVal PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal LOG_REPORT As Boolean,  _
                    ByVal PRINT_PRODREPORT As Boolean,  _
                    ByVal PRINT_BATCHREPORT As Boolean,  _
                    ByVal PROD_MANUAL_START As Boolean,  _
                    ByVal BATCH_MANUAL_START As Boolean,  _
                    ByVal PRODLINE_ENABLED As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Integer,  _
                    ByVal LOG_REPORT_DAYS As Short,  _
                    ByVal LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal LOG_FLOWALARM As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Integer,  _
                    ByVal SCRIPT_DIT As String) As PRODUCTIONLINERow
            Dim rowPRODUCTIONLINERow As PRODUCTIONLINERow = CType(Me.NewRow,PRODUCTIONLINERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PRODLINE_IDENT, PRODLINE_NUMBER, DDESET, ORDER_IDENT_CAPTION, CUSTOMER_IDENT_CAPTION, HEADER1, HEADER2, _PROD_SETPOINT__, PROD_MODE, PROD_RECIPE_TOTAL, LOG_REPORT, PRINT_PRODREPORT, PRINT_BATCHREPORT, PROD_MANUAL_START, BATCH_MANUAL_START, PRODLINE_ENABLED, SEQUENCE_NUMBER, LOG_REPORT_DAYS, LOAD_RECIPE_CHANGED, LOG_FLOWALARM, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT}
            If (Not (parentDEVICERowByReference) Is Nothing) Then
                columnValuesArray(0) = parentDEVICERowByReference(0)
            End If
            rowPRODUCTIONLINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPRODUCTIONLINERow)
            Return rowPRODUCTIONLINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENT(ByVal PRODLINE_IDENT As String) As PRODUCTIONLINERow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT}),PRODUCTIONLINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PRODUCTIONLINEDataTable = CType(MyBase.Clone,PRODUCTIONLINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PRODUCTIONLINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEVICE_IDENT = MyBase.Columns("DEVICE_IDENT")
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnPRODLINE_NUMBER = MyBase.Columns("PRODLINE_NUMBER")
            Me.columnDDESET = MyBase.Columns("DDESET")
            Me.columnORDER_IDENT_CAPTION = MyBase.Columns("ORDER_IDENT_CAPTION")
            Me.columnCUSTOMER_IDENT_CAPTION = MyBase.Columns("CUSTOMER_IDENT_CAPTION")
            Me.columnHEADER1 = MyBase.Columns("HEADER1")
            Me.columnHEADER2 = MyBase.Columns("HEADER2")
            Me._columnPROD_SETPOINT__ = MyBase.Columns("PROD_SETPOINT_%")
            Me.columnPROD_MODE = MyBase.Columns("PROD_MODE")
            Me.columnPROD_RECIPE_TOTAL = MyBase.Columns("PROD_RECIPE_TOTAL")
            Me.columnLOG_REPORT = MyBase.Columns("LOG_REPORT")
            Me.columnPRINT_PRODREPORT = MyBase.Columns("PRINT_PRODREPORT")
            Me.columnPRINT_BATCHREPORT = MyBase.Columns("PRINT_BATCHREPORT")
            Me.columnPROD_MANUAL_START = MyBase.Columns("PROD_MANUAL_START")
            Me.columnBATCH_MANUAL_START = MyBase.Columns("BATCH_MANUAL_START")
            Me.columnPRODLINE_ENABLED = MyBase.Columns("PRODLINE_ENABLED")
            Me.columnSEQUENCE_NUMBER = MyBase.Columns("SEQUENCE_NUMBER")
            Me.columnLOG_REPORT_DAYS = MyBase.Columns("LOG_REPORT_DAYS")
            Me.columnLOAD_RECIPE_CHANGED = MyBase.Columns("LOAD_RECIPE_CHANGED")
            Me.columnLOG_FLOWALARM = MyBase.Columns("LOG_FLOWALARM")
            Me.columnSCRIPT_VAR_SRC = MyBase.Columns("SCRIPT_VAR_SRC")
            Me.columnSCRIPT_VAR_LST = MyBase.Columns("SCRIPT_VAR_LST")
            Me.columnSCRIPT_VAR_ERR = MyBase.Columns("SCRIPT_VAR_ERR")
            Me.columnSCRIPT_VAR_ERRNUM = MyBase.Columns("SCRIPT_VAR_ERRNUM")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEVICE_IDENT = New Global.System.Data.DataColumn("DEVICE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_IDENT)
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnPRODLINE_NUMBER = New Global.System.Data.DataColumn("PRODLINE_NUMBER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_NUMBER)
            Me.columnDDESET = New Global.System.Data.DataColumn("DDESET", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDESET)
            Me.columnORDER_IDENT_CAPTION = New Global.System.Data.DataColumn("ORDER_IDENT_CAPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_IDENT_CAPTION)
            Me.columnCUSTOMER_IDENT_CAPTION = New Global.System.Data.DataColumn("CUSTOMER_IDENT_CAPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUSTOMER_IDENT_CAPTION)
            Me.columnHEADER1 = New Global.System.Data.DataColumn("HEADER1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADER1)
            Me.columnHEADER2 = New Global.System.Data.DataColumn("HEADER2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHEADER2)
            Me._columnPROD_SETPOINT__ = New Global.System.Data.DataColumn("PROD_SETPOINT_%", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPROD_SETPOINT__.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPROD_SETPOINT__")
            Me._columnPROD_SETPOINT__.ExtendedProperties.Add("Generator_UserColumnName", "PROD_SETPOINT_%")
            MyBase.Columns.Add(Me._columnPROD_SETPOINT__)
            Me.columnPROD_MODE = New Global.System.Data.DataColumn("PROD_MODE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_MODE)
            Me.columnPROD_RECIPE_TOTAL = New Global.System.Data.DataColumn("PROD_RECIPE_TOTAL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_RECIPE_TOTAL)
            Me.columnLOG_REPORT = New Global.System.Data.DataColumn("LOG_REPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_REPORT)
            Me.columnPRINT_PRODREPORT = New Global.System.Data.DataColumn("PRINT_PRODREPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINT_PRODREPORT)
            Me.columnPRINT_BATCHREPORT = New Global.System.Data.DataColumn("PRINT_BATCHREPORT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRINT_BATCHREPORT)
            Me.columnPROD_MANUAL_START = New Global.System.Data.DataColumn("PROD_MANUAL_START", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROD_MANUAL_START)
            Me.columnBATCH_MANUAL_START = New Global.System.Data.DataColumn("BATCH_MANUAL_START", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBATCH_MANUAL_START)
            Me.columnPRODLINE_ENABLED = New Global.System.Data.DataColumn("PRODLINE_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_ENABLED)
            Me.columnSEQUENCE_NUMBER = New Global.System.Data.DataColumn("SEQUENCE_NUMBER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQUENCE_NUMBER)
            Me.columnLOG_REPORT_DAYS = New Global.System.Data.DataColumn("LOG_REPORT_DAYS", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_REPORT_DAYS)
            Me.columnLOAD_RECIPE_CHANGED = New Global.System.Data.DataColumn("LOAD_RECIPE_CHANGED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOAD_RECIPE_CHANGED)
            Me.columnLOG_FLOWALARM = New Global.System.Data.DataColumn("LOG_FLOWALARM", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOG_FLOWALARM)
            Me.columnSCRIPT_VAR_SRC = New Global.System.Data.DataColumn("SCRIPT_VAR_SRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_SRC)
            Me.columnSCRIPT_VAR_LST = New Global.System.Data.DataColumn("SCRIPT_VAR_LST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_LST)
            Me.columnSCRIPT_VAR_ERR = New Global.System.Data.DataColumn("SCRIPT_VAR_ERR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERR)
            Me.columnSCRIPT_VAR_ERRNUM = New Global.System.Data.DataColumn("SCRIPT_VAR_ERRNUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERRNUM)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT}, true))
            Me.columnDEVICE_IDENT.MaxLength = 20
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.Unique = true
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnORDER_IDENT_CAPTION.MaxLength = 20
            Me.columnCUSTOMER_IDENT_CAPTION.MaxLength = 20
            Me.columnHEADER1.MaxLength = 80
            Me.columnHEADER2.MaxLength = 80
            Me.columnSCRIPT_VAR_SRC.MaxLength = 536870910
            Me.columnSCRIPT_VAR_LST.MaxLength = 536870910
            Me.columnSCRIPT_VAR_ERR.MaxLength = 536870910
            Me.columnSCRIPT_DIT.MaxLength = 536870910
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPRODUCTIONLINERow() As PRODUCTIONLINERow
            Return CType(Me.NewRow,PRODUCTIONLINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PRODUCTIONLINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PRODUCTIONLINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRODUCTIONLINERowChangedEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONLINERowChanged(Me, New PRODUCTIONLINERowChangeEvent(CType(e.Row,PRODUCTIONLINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRODUCTIONLINERowChangingEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONLINERowChanging(Me, New PRODUCTIONLINERowChangeEvent(CType(e.Row,PRODUCTIONLINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRODUCTIONLINERowDeletedEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONLINERowDeleted(Me, New PRODUCTIONLINERowChangeEvent(CType(e.Row,PRODUCTIONLINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRODUCTIONLINERowDeletingEvent) Is Nothing) Then
                RaiseEvent PRODUCTIONLINERowDeleting(Me, New PRODUCTIONLINERowChangeEvent(CType(e.Row,PRODUCTIONLINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePRODUCTIONLINERow(ByVal row As PRODUCTIONLINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PRODUCTIONLINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RECIPE_HEADERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_NAME As Global.System.Data.DataColumn
        
        Private columnRECIPE_CREATE_DATE As Global.System.Data.DataColumn
        
        Private columnRECIPE_CHANGE_DATE As Global.System.Data.DataColumn
        
        Private columnRECIPE_ENABLED As Global.System.Data.DataColumn
        
        Private columnRECIPE_USER As Global.System.Data.DataColumn
        
        Private columnRECIPE_TOTAL As Global.System.Data.DataColumn
        
        Private columnRECIPE_REFWEIGHT As Global.System.Data.DataColumn
        
        Private columnRECIPE_UNIT As Global.System.Data.DataColumn
        
        Private columnRECIPE_DECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnRECIPE_MAXRESOLU_DP As Global.System.Data.DataColumn
        
        Private columnRECIPE_IN_PERCENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_CHECK As Global.System.Data.DataColumn
        
        Private columnRECIPE_TIMEOUT As Global.System.Data.DataColumn
        
        Private columnRECIPE_TIMEOUT_ENABLED As Global.System.Data.DataColumn
        
        Private columnCORR_RECIPE As Global.System.Data.DataColumn
        
        Private columnMAIN_RECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnSUB_RECIPE As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_SRC As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_LST As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERR As Global.System.Data.DataColumn
        
        Private columnSCRIPT_VAR_ERRNUM As Global.System.Data.DataColumn
        
        Private columnSCRIPT_DIT As Global.System.Data.DataColumn
        
        Private _column_ORDER_IDENT As Global.System.Data.DataColumn
        
        Private _column_CUSTOMER_IDENT As Global.System.Data.DataColumn
        
        Private _column_PROD_NUM As Global.System.Data.DataColumn
        
        Private _column_PROD_SETPOINT As Global.System.Data.DataColumn
        
        Private _column_PROD_PCAUTOSTART As Global.System.Data.DataColumn
        
        Private _column_PROD_CYCLE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RECIPE_HEADER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CHANGE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CHANGE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_USERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_USER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_REFWEIGHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_REFWEIGHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_DECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_MAXRESOLU_DPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_MAXRESOLU_DP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IN_PERCENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IN_PERCENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_CHECKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_CHECK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TIMEOUTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TIMEOUT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_TIMEOUT_ENABLEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_TIMEOUT_ENABLED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CORR_RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCORR_RECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAIN_RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAIN_RECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUB_RECIPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_RECIPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_SRCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_SRC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_LSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_LST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_VAR_ERRNUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_VAR_ERRNUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SCRIPT_DITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCRIPT_DIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __ORDER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_ORDER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __CUSTOMER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_CUSTOMER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_NUMColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_NUM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_PCAUTOSTARTColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_PCAUTOSTART
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property __PROD_CYCLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me._column_PROD_CYCLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RECIPE_HEADERRow
            Get
                Return CType(Me.Rows(index),RECIPE_HEADERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_HEADERRowChanging As RECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_HEADERRowChanged As RECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_HEADERRowDeleting As RECIPE_HEADERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_HEADERRowDeleted As RECIPE_HEADERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRECIPE_HEADERRow(ByVal row As RECIPE_HEADERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRECIPE_HEADERRow( _
                    ByVal parentPRODUCTIONLINERowByPRODUCTIONLINERECIPE_HEADER As PRODUCTIONLINERow,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_CREATE_DATE As Date,  _
                    ByVal RECIPE_CHANGE_DATE As Date,  _
                    ByVal RECIPE_ENABLED As Boolean,  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Short,  _
                    ByVal RECIPE_MAXRESOLU_DP As Short,  _
                    ByVal RECIPE_IN_PERCENT As Boolean,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Date,  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal CORR_RECIPE As Boolean,  _
                    ByVal MAIN_RECIPE_IDENT As String,  _
                    ByVal SUB_RECIPE As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Integer,  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Integer,  _
                    ByVal __PROD_SETPOINT As Double,  _
                    ByVal __PROD_PCAUTOSTART As Boolean,  _
                    ByVal __PROD_CYCLE As Short) As RECIPE_HEADERRow
            Dim rowRECIPE_HEADERRow As RECIPE_HEADERRow = CType(Me.NewRow,RECIPE_HEADERRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RECIPE_IDENT, RECIPE_NAME, RECIPE_CREATE_DATE, RECIPE_CHANGE_DATE, RECIPE_ENABLED, RECIPE_USER, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_UNIT, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_IN_PERCENT, RECIPE_CHECK, RECIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, CORR_RECIPE, MAIN_RECIPE_IDENT, SUB_RECIPE, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT, __ORDER_IDENT, __CUSTOMER_IDENT, __PROD_NUM, __PROD_SETPOINT, __PROD_PCAUTOSTART, __PROD_CYCLE}
            If (Not (parentPRODUCTIONLINERowByPRODUCTIONLINERECIPE_HEADER) Is Nothing) Then
                columnValuesArray(0) = parentPRODUCTIONLINERowByPRODUCTIONLINERECIPE_HEADER(1)
            End If
            rowRECIPE_HEADERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRECIPE_HEADERRow)
            Return rowRECIPE_HEADERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTRECIPE_IDENT(ByVal PRODLINE_IDENT As String, ByVal RECIPE_IDENT As String) As RECIPE_HEADERRow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, RECIPE_IDENT}),RECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RECIPE_HEADERDataTable = CType(MyBase.Clone,RECIPE_HEADERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RECIPE_HEADERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_NAME = MyBase.Columns("RECIPE_NAME")
            Me.columnRECIPE_CREATE_DATE = MyBase.Columns("RECIPE_CREATE_DATE")
            Me.columnRECIPE_CHANGE_DATE = MyBase.Columns("RECIPE_CHANGE_DATE")
            Me.columnRECIPE_ENABLED = MyBase.Columns("RECIPE_ENABLED")
            Me.columnRECIPE_USER = MyBase.Columns("RECIPE_USER")
            Me.columnRECIPE_TOTAL = MyBase.Columns("RECIPE_TOTAL")
            Me.columnRECIPE_REFWEIGHT = MyBase.Columns("RECIPE_REFWEIGHT")
            Me.columnRECIPE_UNIT = MyBase.Columns("RECIPE_UNIT")
            Me.columnRECIPE_DECIMALPOINT = MyBase.Columns("RECIPE_DECIMALPOINT")
            Me.columnRECIPE_MAXRESOLU_DP = MyBase.Columns("RECIPE_MAXRESOLU_DP")
            Me.columnRECIPE_IN_PERCENT = MyBase.Columns("RECIPE_IN_PERCENT")
            Me.columnRECIPE_CHECK = MyBase.Columns("RECIPE_CHECK")
            Me.columnRECIPE_TIMEOUT = MyBase.Columns("RECIPE_TIMEOUT")
            Me.columnRECIPE_TIMEOUT_ENABLED = MyBase.Columns("RECIPE_TIMEOUT_ENABLED")
            Me.columnCORR_RECIPE = MyBase.Columns("CORR_RECIPE")
            Me.columnMAIN_RECIPE_IDENT = MyBase.Columns("MAIN_RECIPE_IDENT")
            Me.columnSUB_RECIPE = MyBase.Columns("SUB_RECIPE")
            Me.columnSCRIPT_VAR_SRC = MyBase.Columns("SCRIPT_VAR_SRC")
            Me.columnSCRIPT_VAR_LST = MyBase.Columns("SCRIPT_VAR_LST")
            Me.columnSCRIPT_VAR_ERR = MyBase.Columns("SCRIPT_VAR_ERR")
            Me.columnSCRIPT_VAR_ERRNUM = MyBase.Columns("SCRIPT_VAR_ERRNUM")
            Me.columnSCRIPT_DIT = MyBase.Columns("SCRIPT_DIT")
            Me._column_ORDER_IDENT = MyBase.Columns("~ORDER_IDENT")
            Me._column_CUSTOMER_IDENT = MyBase.Columns("~CUSTOMER_IDENT")
            Me._column_PROD_NUM = MyBase.Columns("~PROD_NUM")
            Me._column_PROD_SETPOINT = MyBase.Columns("~PROD_SETPOINT")
            Me._column_PROD_PCAUTOSTART = MyBase.Columns("~PROD_PCAUTOSTART")
            Me._column_PROD_CYCLE = MyBase.Columns("~PROD_CYCLE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_NAME = New Global.System.Data.DataColumn("RECIPE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_NAME)
            Me.columnRECIPE_CREATE_DATE = New Global.System.Data.DataColumn("RECIPE_CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CREATE_DATE)
            Me.columnRECIPE_CHANGE_DATE = New Global.System.Data.DataColumn("RECIPE_CHANGE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CHANGE_DATE)
            Me.columnRECIPE_ENABLED = New Global.System.Data.DataColumn("RECIPE_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_ENABLED)
            Me.columnRECIPE_USER = New Global.System.Data.DataColumn("RECIPE_USER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_USER)
            Me.columnRECIPE_TOTAL = New Global.System.Data.DataColumn("RECIPE_TOTAL", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TOTAL)
            Me.columnRECIPE_REFWEIGHT = New Global.System.Data.DataColumn("RECIPE_REFWEIGHT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_REFWEIGHT)
            Me.columnRECIPE_UNIT = New Global.System.Data.DataColumn("RECIPE_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_UNIT)
            Me.columnRECIPE_DECIMALPOINT = New Global.System.Data.DataColumn("RECIPE_DECIMALPOINT", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_DECIMALPOINT)
            Me.columnRECIPE_MAXRESOLU_DP = New Global.System.Data.DataColumn("RECIPE_MAXRESOLU_DP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_MAXRESOLU_DP)
            Me.columnRECIPE_IN_PERCENT = New Global.System.Data.DataColumn("RECIPE_IN_PERCENT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IN_PERCENT)
            Me.columnRECIPE_CHECK = New Global.System.Data.DataColumn("RECIPE_CHECK", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_CHECK)
            Me.columnRECIPE_TIMEOUT = New Global.System.Data.DataColumn("RECIPE_TIMEOUT", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TIMEOUT)
            Me.columnRECIPE_TIMEOUT_ENABLED = New Global.System.Data.DataColumn("RECIPE_TIMEOUT_ENABLED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_TIMEOUT_ENABLED)
            Me.columnCORR_RECIPE = New Global.System.Data.DataColumn("CORR_RECIPE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCORR_RECIPE)
            Me.columnMAIN_RECIPE_IDENT = New Global.System.Data.DataColumn("MAIN_RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAIN_RECIPE_IDENT)
            Me.columnSUB_RECIPE = New Global.System.Data.DataColumn("SUB_RECIPE", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_RECIPE)
            Me.columnSCRIPT_VAR_SRC = New Global.System.Data.DataColumn("SCRIPT_VAR_SRC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_SRC)
            Me.columnSCRIPT_VAR_LST = New Global.System.Data.DataColumn("SCRIPT_VAR_LST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_LST)
            Me.columnSCRIPT_VAR_ERR = New Global.System.Data.DataColumn("SCRIPT_VAR_ERR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERR)
            Me.columnSCRIPT_VAR_ERRNUM = New Global.System.Data.DataColumn("SCRIPT_VAR_ERRNUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_VAR_ERRNUM)
            Me.columnSCRIPT_DIT = New Global.System.Data.DataColumn("SCRIPT_DIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCRIPT_DIT)
            Me._column_ORDER_IDENT = New Global.System.Data.DataColumn("~ORDER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_ORDER_IDENT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_ORDER_IDENT")
            Me._column_ORDER_IDENT.ExtendedProperties.Add("Generator_UserColumnName", "~ORDER_IDENT")
            MyBase.Columns.Add(Me._column_ORDER_IDENT)
            Me._column_CUSTOMER_IDENT = New Global.System.Data.DataColumn("~CUSTOMER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._column_CUSTOMER_IDENT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_CUSTOMER_IDENT")
            Me._column_CUSTOMER_IDENT.ExtendedProperties.Add("Generator_UserColumnName", "~CUSTOMER_IDENT")
            MyBase.Columns.Add(Me._column_CUSTOMER_IDENT)
            Me._column_PROD_NUM = New Global.System.Data.DataColumn("~PROD_NUM", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_NUM.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_NUM")
            Me._column_PROD_NUM.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_NUM")
            MyBase.Columns.Add(Me._column_PROD_NUM)
            Me._column_PROD_SETPOINT = New Global.System.Data.DataColumn("~PROD_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_SETPOINT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_SETPOINT")
            Me._column_PROD_SETPOINT.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_SETPOINT")
            MyBase.Columns.Add(Me._column_PROD_SETPOINT)
            Me._column_PROD_PCAUTOSTART = New Global.System.Data.DataColumn("~PROD_PCAUTOSTART", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_PCAUTOSTART.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_PCAUTOSTART")
            Me._column_PROD_PCAUTOSTART.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_PCAUTOSTART")
            MyBase.Columns.Add(Me._column_PROD_PCAUTOSTART)
            Me._column_PROD_CYCLE = New Global.System.Data.DataColumn("~PROD_CYCLE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            Me._column_PROD_CYCLE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_column_PROD_CYCLE")
            Me._column_PROD_CYCLE.ExtendedProperties.Add("Generator_UserColumnName", "~PROD_CYCLE")
            MyBase.Columns.Add(Me._column_PROD_CYCLE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnRECIPE_IDENT}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnRECIPE_IDENT.AllowDBNull = false
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_NAME.MaxLength = 30
            Me.columnRECIPE_USER.MaxLength = 20
            Me.columnRECIPE_UNIT.MaxLength = 10
            Me.columnMAIN_RECIPE_IDENT.MaxLength = 20
            Me.columnSCRIPT_VAR_SRC.MaxLength = 536870910
            Me.columnSCRIPT_VAR_LST.MaxLength = 536870910
            Me.columnSCRIPT_VAR_ERR.MaxLength = 536870910
            Me.columnSCRIPT_DIT.MaxLength = 536870910
            Me._column_ORDER_IDENT.MaxLength = 20
            Me._column_CUSTOMER_IDENT.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRECIPE_HEADERRow() As RECIPE_HEADERRow
            Return CType(Me.NewRow,RECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RECIPE_HEADERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RECIPE_HEADERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RECIPE_HEADERRowChangedEvent) Is Nothing) Then
                RaiseEvent RECIPE_HEADERRowChanged(Me, New RECIPE_HEADERRowChangeEvent(CType(e.Row,RECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RECIPE_HEADERRowChangingEvent) Is Nothing) Then
                RaiseEvent RECIPE_HEADERRowChanging(Me, New RECIPE_HEADERRowChangeEvent(CType(e.Row,RECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RECIPE_HEADERRowDeletedEvent) Is Nothing) Then
                RaiseEvent RECIPE_HEADERRowDeleted(Me, New RECIPE_HEADERRowChangeEvent(CType(e.Row,RECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RECIPE_HEADERRowDeletingEvent) Is Nothing) Then
                RaiseEvent RECIPE_HEADERRowDeleting(Me, New RECIPE_HEADERRowChangeEvent(CType(e.Row,RECIPE_HEADERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRECIPE_HEADERRow(ByVal row As RECIPE_HEADERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RECIPE_HEADERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RECIPE_LINEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_IDENT As Global.System.Data.DataColumn
        
        Private columnRECIPE_LINE As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_SETPOINT As Global.System.Data.DataColumn
        
        Private columnMAT_UNIT As Global.System.Data.DataColumn
        
        Private columnMAT_ADD_TO_TOTAL As Global.System.Data.DataColumn
        
        Private columnMAT_CALCULATE_SETPOINT As Global.System.Data.DataColumn
        
        Private columnRECIPE_LINE_PARA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RECIPE_LINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_LINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_LINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_ADD_TO_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_ADD_TO_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_CALCULATE_SETPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_CALCULATE_SETPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RECIPE_LINE_PARAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECIPE_LINE_PARA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RECIPE_LINERow
            Get
                Return CType(Me.Rows(index),RECIPE_LINERow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_LINERowChanging As RECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_LINERowChanged As RECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_LINERowDeleting As RECIPE_LINERowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event RECIPE_LINERowDeleted As RECIPE_LINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddRECIPE_LINERow(ByVal row As RECIPE_LINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddRECIPE_LINERow(ByVal PRODLINE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_LINE As Short, ByVal MAT_IDENT As String, ByVal MAT_SETPOINT As Double, ByVal MAT_UNIT As String, ByVal MAT_ADD_TO_TOTAL As Boolean, ByVal MAT_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_LINE_PARA As String) As RECIPE_LINERow
            Dim rowRECIPE_LINERow As RECIPE_LINERow = CType(Me.NewRow,RECIPE_LINERow)
            Dim columnValuesArray() As Object = New Object() {PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE, MAT_IDENT, MAT_SETPOINT, MAT_UNIT, MAT_ADD_TO_TOTAL, MAT_CALCULATE_SETPOINT, RECIPE_LINE_PARA}
            rowRECIPE_LINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRECIPE_LINERow)
            Return rowRECIPE_LINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPRODLINE_IDENTRECIPE_IDENTRECIPE_LINE(ByVal PRODLINE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_LINE As Short) As RECIPE_LINERow
            Return CType(Me.Rows.Find(New Object() {PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE}),RECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RECIPE_LINEDataTable = CType(MyBase.Clone,RECIPE_LINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RECIPE_LINEDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnRECIPE_IDENT = MyBase.Columns("RECIPE_IDENT")
            Me.columnRECIPE_LINE = MyBase.Columns("RECIPE_LINE")
            Me.columnMAT_IDENT = MyBase.Columns("MAT_IDENT")
            Me.columnMAT_SETPOINT = MyBase.Columns("MAT_SETPOINT")
            Me.columnMAT_UNIT = MyBase.Columns("MAT_UNIT")
            Me.columnMAT_ADD_TO_TOTAL = MyBase.Columns("MAT_ADD_TO_TOTAL")
            Me.columnMAT_CALCULATE_SETPOINT = MyBase.Columns("MAT_CALCULATE_SETPOINT")
            Me.columnRECIPE_LINE_PARA = MyBase.Columns("RECIPE_LINE_PARA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnRECIPE_IDENT = New Global.System.Data.DataColumn("RECIPE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_IDENT)
            Me.columnRECIPE_LINE = New Global.System.Data.DataColumn("RECIPE_LINE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_LINE)
            Me.columnMAT_IDENT = New Global.System.Data.DataColumn("MAT_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT)
            Me.columnMAT_SETPOINT = New Global.System.Data.DataColumn("MAT_SETPOINT", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_SETPOINT)
            Me.columnMAT_UNIT = New Global.System.Data.DataColumn("MAT_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_UNIT)
            Me.columnMAT_ADD_TO_TOTAL = New Global.System.Data.DataColumn("MAT_ADD_TO_TOTAL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_ADD_TO_TOTAL)
            Me.columnMAT_CALCULATE_SETPOINT = New Global.System.Data.DataColumn("MAT_CALCULATE_SETPOINT", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_CALCULATE_SETPOINT)
            Me.columnRECIPE_LINE_PARA = New Global.System.Data.DataColumn("RECIPE_LINE_PARA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECIPE_LINE_PARA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRODLINE_IDENT, Me.columnRECIPE_IDENT, Me.columnRECIPE_LINE}, true))
            Me.columnPRODLINE_IDENT.AllowDBNull = false
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnRECIPE_IDENT.AllowDBNull = false
            Me.columnRECIPE_IDENT.MaxLength = 20
            Me.columnRECIPE_LINE.AllowDBNull = false
            Me.columnMAT_IDENT.MaxLength = 20
            Me.columnMAT_UNIT.MaxLength = 10
            Me.columnRECIPE_LINE_PARA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewRECIPE_LINERow() As RECIPE_LINERow
            Return CType(Me.NewRow,RECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RECIPE_LINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RECIPE_LINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RECIPE_LINERowChangedEvent) Is Nothing) Then
                RaiseEvent RECIPE_LINERowChanged(Me, New RECIPE_LINERowChangeEvent(CType(e.Row,RECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RECIPE_LINERowChangingEvent) Is Nothing) Then
                RaiseEvent RECIPE_LINERowChanging(Me, New RECIPE_LINERowChangeEvent(CType(e.Row,RECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RECIPE_LINERowDeletedEvent) Is Nothing) Then
                RaiseEvent RECIPE_LINERowDeleted(Me, New RECIPE_LINERowChangeEvent(CType(e.Row,RECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RECIPE_LINERowDeletingEvent) Is Nothing) Then
                RaiseEvent RECIPE_LINERowDeleting(Me, New RECIPE_LINERowChangeEvent(CType(e.Row,RECIPE_LINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveRECIPE_LINERow(ByVal row As RECIPE_LINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RECIPE_LINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUPPLIERDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSUPPLIER_IDENT As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NAME As Global.System.Data.DataColumn
        
        Private columnADDRESS As Global.System.Data.DataColumn
        
        Private columnCITY As Global.System.Data.DataColumn
        
        Private columnCOUNTRY As Global.System.Data.DataColumn
        
        Private columnPOSTAL_CODE As Global.System.Data.DataColumn
        
        Private columnPHONE As Global.System.Data.DataColumn
        
        Private columnFAX As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUPPLIER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLIER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLIER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property COUNTRYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOUNTRY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POSTAL_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOSTAL_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FAXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFAX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUPPLIERRow
            Get
                Return CType(Me.Rows(index),SUPPLIERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLIERRowChanging As SUPPLIERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLIERRowChanged As SUPPLIERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLIERRowDeleting As SUPPLIERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLIERRowDeleted As SUPPLIERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSUPPLIERRow(ByVal row As SUPPLIERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSUPPLIERRow(ByVal SUPPLIER_IDENT As String, ByVal SUPPLIER_NAME As String, ByVal ADDRESS As String, ByVal CITY As String, ByVal COUNTRY As String, ByVal POSTAL_CODE As String, ByVal PHONE As String, ByVal FAX As String) As SUPPLIERRow
            Dim rowSUPPLIERRow As SUPPLIERRow = CType(Me.NewRow,SUPPLIERRow)
            Dim columnValuesArray() As Object = New Object() {SUPPLIER_IDENT, SUPPLIER_NAME, ADDRESS, CITY, COUNTRY, POSTAL_CODE, PHONE, FAX}
            rowSUPPLIERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUPPLIERRow)
            Return rowSUPPLIERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySUPPLIER_IDENT(ByVal SUPPLIER_IDENT As String) As SUPPLIERRow
            Return CType(Me.Rows.Find(New Object() {SUPPLIER_IDENT}),SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUPPLIERDataTable = CType(MyBase.Clone,SUPPLIERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUPPLIERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSUPPLIER_IDENT = MyBase.Columns("SUPPLIER_IDENT")
            Me.columnSUPPLIER_NAME = MyBase.Columns("SUPPLIER_NAME")
            Me.columnADDRESS = MyBase.Columns("ADDRESS")
            Me.columnCITY = MyBase.Columns("CITY")
            Me.columnCOUNTRY = MyBase.Columns("COUNTRY")
            Me.columnPOSTAL_CODE = MyBase.Columns("POSTAL_CODE")
            Me.columnPHONE = MyBase.Columns("PHONE")
            Me.columnFAX = MyBase.Columns("FAX")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSUPPLIER_IDENT = New Global.System.Data.DataColumn("SUPPLIER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_IDENT)
            Me.columnSUPPLIER_NAME = New Global.System.Data.DataColumn("SUPPLIER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NAME)
            Me.columnADDRESS = New Global.System.Data.DataColumn("ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDRESS)
            Me.columnCITY = New Global.System.Data.DataColumn("CITY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCITY)
            Me.columnCOUNTRY = New Global.System.Data.DataColumn("COUNTRY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOUNTRY)
            Me.columnPOSTAL_CODE = New Global.System.Data.DataColumn("POSTAL_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOSTAL_CODE)
            Me.columnPHONE = New Global.System.Data.DataColumn("PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPHONE)
            Me.columnFAX = New Global.System.Data.DataColumn("FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFAX)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSUPPLIER_IDENT}, true))
            Me.columnSUPPLIER_IDENT.AllowDBNull = false
            Me.columnSUPPLIER_IDENT.Unique = true
            Me.columnSUPPLIER_IDENT.MaxLength = 20
            Me.columnSUPPLIER_NAME.MaxLength = 50
            Me.columnADDRESS.MaxLength = 50
            Me.columnCITY.MaxLength = 50
            Me.columnCOUNTRY.MaxLength = 50
            Me.columnPOSTAL_CODE.MaxLength = 50
            Me.columnPHONE.MaxLength = 50
            Me.columnFAX.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSUPPLIERRow() As SUPPLIERRow
            Return CType(Me.NewRow,SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUPPLIERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUPPLIERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUPPLIERRowChangedEvent) Is Nothing) Then
                RaiseEvent SUPPLIERRowChanged(Me, New SUPPLIERRowChangeEvent(CType(e.Row,SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUPPLIERRowChangingEvent) Is Nothing) Then
                RaiseEvent SUPPLIERRowChanging(Me, New SUPPLIERRowChangeEvent(CType(e.Row,SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUPPLIERRowDeletedEvent) Is Nothing) Then
                RaiseEvent SUPPLIERRowDeleted(Me, New SUPPLIERRowChangeEvent(CType(e.Row,SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUPPLIERRowDeletingEvent) Is Nothing) Then
                RaiseEvent SUPPLIERRowDeleting(Me, New SUPPLIERRowChangeEvent(CType(e.Row,SUPPLIERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSUPPLIERRow(ByVal row As SUPPLIERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUPPLIERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SUPPLYDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPRODLINE_IDENT As Global.System.Data.DataColumn
        
        Private columnMAT_IDENT As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_IDENT As Global.System.Data.DataColumn
        
        Private columnDATE As Global.System.Data.DataColumn
        
        Private columnQUANTITY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SUPPLY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PRODLINE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRODLINE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAT_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAT_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SUPPLIER_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property QUANTITYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQUANTITY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SUPPLYRow
            Get
                Return CType(Me.Rows(index),SUPPLYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLYRowChanging As SUPPLYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLYRowChanged As SUPPLYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLYRowDeleting As SUPPLYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SUPPLYRowDeleted As SUPPLYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSUPPLYRow(ByVal row As SUPPLYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSUPPLYRow(ByVal PRODLINE_IDENT As String, ByVal MAT_IDENT As String, ByVal SUPPLIER_IDENT As String, ByVal _DATE As Date, ByVal QUANTITY As Double) As SUPPLYRow
            Dim rowSUPPLYRow As SUPPLYRow = CType(Me.NewRow,SUPPLYRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PRODLINE_IDENT, MAT_IDENT, SUPPLIER_IDENT, _DATE, QUANTITY}
            rowSUPPLYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSUPPLYRow)
            Return rowSUPPLYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As SUPPLYRow
            Return CType(Me.Rows.Find(New Object() {ID}),SUPPLYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SUPPLYDataTable = CType(MyBase.Clone,SUPPLYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SUPPLYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPRODLINE_IDENT = MyBase.Columns("PRODLINE_IDENT")
            Me.columnMAT_IDENT = MyBase.Columns("MAT_IDENT")
            Me.columnSUPPLIER_IDENT = MyBase.Columns("SUPPLIER_IDENT")
            Me.columnDATE = MyBase.Columns("DATE")
            Me.columnQUANTITY = MyBase.Columns("QUANTITY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPRODLINE_IDENT = New Global.System.Data.DataColumn("PRODLINE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRODLINE_IDENT)
            Me.columnMAT_IDENT = New Global.System.Data.DataColumn("MAT_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAT_IDENT)
            Me.columnSUPPLIER_IDENT = New Global.System.Data.DataColumn("SUPPLIER_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_IDENT)
            Me.columnDATE = New Global.System.Data.DataColumn("DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DATEColumn")
            Me.columnDATE.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDATE")
            Me.columnDATE.ExtendedProperties.Add("Generator_UserColumnName", "DATE")
            MyBase.Columns.Add(Me.columnDATE)
            Me.columnQUANTITY = New Global.System.Data.DataColumn("QUANTITY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQUANTITY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnPRODLINE_IDENT.MaxLength = 20
            Me.columnMAT_IDENT.MaxLength = 20
            Me.columnSUPPLIER_IDENT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSUPPLYRow() As SUPPLYRow
            Return CType(Me.NewRow,SUPPLYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SUPPLYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SUPPLYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SUPPLYRowChangedEvent) Is Nothing) Then
                RaiseEvent SUPPLYRowChanged(Me, New SUPPLYRowChangeEvent(CType(e.Row,SUPPLYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SUPPLYRowChangingEvent) Is Nothing) Then
                RaiseEvent SUPPLYRowChanging(Me, New SUPPLYRowChangeEvent(CType(e.Row,SUPPLYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SUPPLYRowDeletedEvent) Is Nothing) Then
                RaiseEvent SUPPLYRowDeleted(Me, New SUPPLYRowChangeEvent(CType(e.Row,SUPPLYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SUPPLYRowDeletingEvent) Is Nothing) Then
                RaiseEvent SUPPLYRowDeleting(Me, New SUPPLYRowChangeEvent(CType(e.Row,SUPPLYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSUPPLYRow(ByVal row As SUPPLYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SUPPLYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class WPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDEVICE_IDENT As Global.System.Data.DataColumn
        
        Private columnWP_IDENT As Global.System.Data.DataColumn
        
        Private columnWP_NAME As Global.System.Data.DataColumn
        
        Private columnWP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnFULLSCALE As Global.System.Data.DataColumn
        
        Private columnDECIMALPOINT As Global.System.Data.DataColumn
        
        Private columnWP_UNIT As Global.System.Data.DataColumn
        
        Private columnMAX_RESIDUE As Global.System.Data.DataColumn
        
        Private columnWP_TYPE As Global.System.Data.DataColumn
        
        Private columnOPC_SERVER As Global.System.Data.DataColumn
        
        Private columnOPC_GROUP As Global.System.Data.DataColumn
        
        Private columnOPC_GROUP_OFFSET As Global.System.Data.DataColumn
        
        Private columnLABEL_PRINTER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "WP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DEVICE_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVICE_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_IDENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_IDENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FULLSCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFULLSCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DECIMALPOINTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDECIMALPOINT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_UNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAX_RESIDUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAX_RESIDUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property WP_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWP_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OPC_SERVERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPC_SERVER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OPC_GROUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPC_GROUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OPC_GROUP_OFFSETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPC_GROUP_OFFSET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABEL_PRINTERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL_PRINTER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As WPRow
            Get
                Return CType(Me.Rows(index),WPRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WPRowChanging As WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WPRowChanged As WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WPRowDeleting As WPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event WPRowDeleted As WPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddWPRow(ByVal row As WPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddWPRow(ByVal parentDEVICERowByReference7 As DEVICERow, ByVal WP_IDENT As String, ByVal WP_NAME As String, ByVal WP_ADDRESS As String, ByVal FULLSCALE As Double, ByVal DECIMALPOINT As Byte, ByVal WP_UNIT As String, ByVal MAX_RESIDUE As Double, ByVal WP_TYPE As Short, ByVal OPC_SERVER As String, ByVal OPC_GROUP As String, ByVal OPC_GROUP_OFFSET As String, ByVal LABEL_PRINTER As String) As WPRow
            Dim rowWPRow As WPRow = CType(Me.NewRow,WPRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WP_IDENT, WP_NAME, WP_ADDRESS, FULLSCALE, DECIMALPOINT, WP_UNIT, MAX_RESIDUE, WP_TYPE, OPC_SERVER, OPC_GROUP, OPC_GROUP_OFFSET, LABEL_PRINTER}
            If (Not (parentDEVICERowByReference7) Is Nothing) Then
                columnValuesArray(0) = parentDEVICERowByReference7(0)
            End If
            rowWPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowWPRow)
            Return rowWPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByWP_IDENT(ByVal WP_IDENT As String) As WPRow
            Return CType(Me.Rows.Find(New Object() {WP_IDENT}),WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As WPDataTable = CType(MyBase.Clone,WPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New WPDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDEVICE_IDENT = MyBase.Columns("DEVICE_IDENT")
            Me.columnWP_IDENT = MyBase.Columns("WP_IDENT")
            Me.columnWP_NAME = MyBase.Columns("WP_NAME")
            Me.columnWP_ADDRESS = MyBase.Columns("WP_ADDRESS")
            Me.columnFULLSCALE = MyBase.Columns("FULLSCALE")
            Me.columnDECIMALPOINT = MyBase.Columns("DECIMALPOINT")
            Me.columnWP_UNIT = MyBase.Columns("WP_UNIT")
            Me.columnMAX_RESIDUE = MyBase.Columns("MAX_RESIDUE")
            Me.columnWP_TYPE = MyBase.Columns("WP_TYPE")
            Me.columnOPC_SERVER = MyBase.Columns("OPC_SERVER")
            Me.columnOPC_GROUP = MyBase.Columns("OPC_GROUP")
            Me.columnOPC_GROUP_OFFSET = MyBase.Columns("OPC_GROUP_OFFSET")
            Me.columnLABEL_PRINTER = MyBase.Columns("LABEL_PRINTER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDEVICE_IDENT = New Global.System.Data.DataColumn("DEVICE_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVICE_IDENT)
            Me.columnWP_IDENT = New Global.System.Data.DataColumn("WP_IDENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_IDENT)
            Me.columnWP_NAME = New Global.System.Data.DataColumn("WP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_NAME)
            Me.columnWP_ADDRESS = New Global.System.Data.DataColumn("WP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_ADDRESS)
            Me.columnFULLSCALE = New Global.System.Data.DataColumn("FULLSCALE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFULLSCALE)
            Me.columnDECIMALPOINT = New Global.System.Data.DataColumn("DECIMALPOINT", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDECIMALPOINT)
            Me.columnWP_UNIT = New Global.System.Data.DataColumn("WP_UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_UNIT)
            Me.columnMAX_RESIDUE = New Global.System.Data.DataColumn("MAX_RESIDUE", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAX_RESIDUE)
            Me.columnWP_TYPE = New Global.System.Data.DataColumn("WP_TYPE", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWP_TYPE)
            Me.columnOPC_SERVER = New Global.System.Data.DataColumn("OPC_SERVER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPC_SERVER)
            Me.columnOPC_GROUP = New Global.System.Data.DataColumn("OPC_GROUP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPC_GROUP)
            Me.columnOPC_GROUP_OFFSET = New Global.System.Data.DataColumn("OPC_GROUP_OFFSET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPC_GROUP_OFFSET)
            Me.columnLABEL_PRINTER = New Global.System.Data.DataColumn("LABEL_PRINTER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL_PRINTER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWP_IDENT}, true))
            Me.columnDEVICE_IDENT.MaxLength = 20
            Me.columnWP_IDENT.AllowDBNull = false
            Me.columnWP_IDENT.Unique = true
            Me.columnWP_IDENT.MaxLength = 20
            Me.columnWP_NAME.MaxLength = 30
            Me.columnWP_ADDRESS.MaxLength = 1
            Me.columnWP_UNIT.MaxLength = 10
            Me.columnOPC_SERVER.MaxLength = 50
            Me.columnOPC_GROUP.MaxLength = 50
            Me.columnOPC_GROUP_OFFSET.MaxLength = 50
            Me.columnLABEL_PRINTER.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewWPRow() As WPRow
            Return CType(Me.NewRow,WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New WPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(WPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.WPRowChangedEvent) Is Nothing) Then
                RaiseEvent WPRowChanged(Me, New WPRowChangeEvent(CType(e.Row,WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.WPRowChangingEvent) Is Nothing) Then
                RaiseEvent WPRowChanging(Me, New WPRowChangeEvent(CType(e.Row,WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.WPRowDeletedEvent) Is Nothing) Then
                RaiseEvent WPRowDeleted(Me, New WPRowChangeEvent(CType(e.Row,WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.WPRowDeletingEvent) Is Nothing) Then
                RaiseEvent WPRowDeleting(Me, New WPRowChangeEvent(CType(e.Row,WPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveWPRow(ByVal row As WPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As _840002P1DataSet = New _840002P1DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "WPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DEVICERow
        Inherits Global.System.Data.DataRow
        
        Private tableDEVICE As DEVICEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDEVICE = CType(Me.Table,DEVICEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_IDENT() As String
            Get
                Return CType(Me(Me.tableDEVICE.DEVICE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableDEVICE.DEVICE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.DEVICE_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_ADDRESS' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.DEVICE_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.DEVICE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_NAME' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.DEVICE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.DEVICE_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_TYPE' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.DEVICE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BAUDRATE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.BAUDRATEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BAUDRATE' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.BAUDRATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COM_PORT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.COM_PORTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COM_PORT' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.COM_PORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.IP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IP_ADDRESS' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.IP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SIMULATION() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SIMULATIONColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SIMULATION' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SIMULATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_SRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SCRIPT_VAR_SRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_SRC' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SCRIPT_VAR_SRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_LST() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SCRIPT_VAR_LSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_LST' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SCRIPT_VAR_LSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERR() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SCRIPT_VAR_ERRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERR' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SCRIPT_VAR_ERRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERRNUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SCRIPT_VAR_ERRNUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERRNUM' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SCRIPT_VAR_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRIORITY() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableDEVICE.PRIORITYColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRIORITY' in table 'DEVICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDEVICE.PRIORITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDEVICE_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.DEVICE_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDEVICE_ADDRESSNull()
            Me(Me.tableDEVICE.DEVICE_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDEVICE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.DEVICE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDEVICE_NAMENull()
            Me(Me.tableDEVICE.DEVICE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDEVICE_TYPENull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.DEVICE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDEVICE_TYPENull()
            Me(Me.tableDEVICE.DEVICE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBAUDRATENull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.BAUDRATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBAUDRATENull()
            Me(Me.tableDEVICE.BAUDRATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOM_PORTNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.COM_PORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOM_PORTNull()
            Me(Me.tableDEVICE.COM_PORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.IP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIP_ADDRESSNull()
            Me(Me.tableDEVICE.IP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSIMULATIONNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SIMULATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSIMULATIONNull()
            Me(Me.tableDEVICE.SIMULATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_SRCNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SCRIPT_VAR_SRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_SRCNull()
            Me(Me.tableDEVICE.SCRIPT_VAR_SRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_LSTNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SCRIPT_VAR_LSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_LSTNull()
            Me(Me.tableDEVICE.SCRIPT_VAR_LSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SCRIPT_VAR_ERRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNull()
            Me(Me.tableDEVICE.SCRIPT_VAR_ERRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SCRIPT_VAR_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNUMNull()
            Me(Me.tableDEVICE.SCRIPT_VAR_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tableDEVICE.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRIORITYNull() As Boolean
            Return Me.IsNull(Me.tableDEVICE.PRIORITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRIORITYNull()
            Me(Me.tableDEVICE.PRIORITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPRODUCTIONLINERows() As PRODUCTIONLINERow()
            If (Me.Table.ChildRelations("Reference") Is Nothing) Then
                Return New PRODUCTIONLINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference")),PRODUCTIONLINERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetWPRows() As WPRow()
            If (Me.Table.ChildRelations("Reference7") Is Nothing) Then
                Return New WPRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Reference7")),WPRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINRECIPE_HEADERRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINRECIPE_HEADER As MAINRECIPE_HEADERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINRECIPE_HEADER = CType(Me.Table,MAINRECIPE_HEADERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_NAME' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_CREATE_DATE' in table 'MAINRECIPE_HEADER' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_CHANGE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CHANGE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_CHANGE_DATE' in table 'MAINRECIPE_HEADER' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CHANGE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_ENABLED' in table 'MAINRECIPE_HEADER' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TOTAL' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_USER' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_UNIT' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_DECIMALPOINT' in table 'MAINRECIPE_HEADER' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_MAXRESOLU_DP' in table 'MAINRECIPE_HEADER' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_MINBATCH() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MINBATCHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_MINBATCH' in table 'MAINRECIPE_HEADER' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MINBATCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_MAXBATCH() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXBATCHColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_MAXBATCH' in table 'MAINRECIPE_HEADER' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXBATCHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT' in table 'MAINRECIPE_HEADER' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_TIMEOUT_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUT_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_TIMEOUT_ENABLED' in table 'MAINRECIPE_HEADER' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUT_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~ORDER_IDENT' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~CUSTOMER_IDENT' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_NUM' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_SETPOINT' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __START_SYNCHRON() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__START_SYNCHRONColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~START_SYNCHRON' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__START_SYNCHRONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_HEADER.__PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_CYCLE' in table 'MAINRECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_HEADER.__PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_NAMENull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_CREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_CREATE_DATENull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_CHANGE_DATENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CHANGE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_CHANGE_DATENull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_CHANGE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_ENABLEDNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TOTALNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_USERNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_USERNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_UNITNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_DECIMALPOINTNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_MAXRESOLU_DPNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_MINBATCHNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MINBATCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_MINBATCHNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MINBATCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_MAXBATCHNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXBATCHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_MAXBATCHNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_MAXBATCHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUTNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_TIMEOUT_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUT_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_TIMEOUT_ENABLEDNull()
            Me(Me.tableMAINRECIPE_HEADER.MAINRECIPE_TIMEOUT_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__ORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__ORDER_IDENTNull()
            Me(Me.tableMAINRECIPE_HEADER.__ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__CUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__CUSTOMER_IDENTNull()
            Me(Me.tableMAINRECIPE_HEADER.__CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_NUMNull()
            Me(Me.tableMAINRECIPE_HEADER.__PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_SETPOINTNull()
            Me(Me.tableMAINRECIPE_HEADER.__PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__START_SYNCHRONNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__START_SYNCHRONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__START_SYNCHRONNull()
            Me(Me.tableMAINRECIPE_HEADER.__START_SYNCHRONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_HEADER.__PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_CYCLENull()
            Me(Me.tableMAINRECIPE_HEADER.__PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINRECIPE_LINERows() As MAINRECIPE_LINERow()
            If (Me.Table.ChildRelations("MAINRECIPE_HEADERMAINRECIPE_LINE") Is Nothing) Then
                Return New MAINRECIPE_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MAINRECIPE_HEADERMAINRECIPE_LINE")),MAINRECIPE_LINERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINRECIPEPLAN_LINERows() As MAINRECIPEPLAN_LINERow()
            If (Me.Table.ChildRelations("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE") Is Nothing) Then
                Return New MAINRECIPEPLAN_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE")),MAINRECIPEPLAN_LINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINRECIPE_LINERow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINRECIPE_LINE As MAINRECIPE_LINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINRECIPE_LINE = CType(Me.Table,MAINRECIPE_LINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPE_LINE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPE_LINE.MAINRECIPE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.MAINRECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_LINE.RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IDENT' in table 'MAINRECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_LINE.RECIPE_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_SETPOINT' in table 'MAINRECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.RECIPE_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CALCULATE_SETPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_LINE.RECIPE_CALCULATE_SETPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CALCULATE_SETPOINT' in table 'MAINRECIPE_LINE' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.RECIPE_CALCULATE_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_LINE.RECIPE_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CYCLE' in table 'MAINRECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.RECIPE_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_PRIORITY() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPE_LINE.RECIPE_PRIORITYColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_PRIORITY' in table 'MAINRECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPE_LINE.RECIPE_PRIORITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_HEADERRow() As MAINRECIPE_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MAINRECIPE_HEADERMAINRECIPE_LINE")),MAINRECIPE_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MAINRECIPE_HEADERMAINRECIPE_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_HEADERRowParent() As RECIPE_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RECIPE_HEADERMAINRECIPE_LINE")),RECIPE_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RECIPE_HEADERMAINRECIPE_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_LINE.RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IDENTNull()
            Me(Me.tableMAINRECIPE_LINE.RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_LINE.RECIPE_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_SETPOINTNull()
            Me(Me.tableMAINRECIPE_LINE.RECIPE_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CALCULATE_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_LINE.RECIPE_CALCULATE_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CALCULATE_SETPOINTNull()
            Me(Me.tableMAINRECIPE_LINE.RECIPE_CALCULATE_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_LINE.RECIPE_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CYCLENull()
            Me(Me.tableMAINRECIPE_LINE.RECIPE_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_PRIORITYNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPE_LINE.RECIPE_PRIORITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_PRIORITYNull()
            Me(Me.tableMAINRECIPE_LINE.RECIPE_PRIORITYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINRECIPEPLAN_HEADERRow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINRECIPEPLAN_HEADER As MAINRECIPEPLAN_HEADERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINRECIPEPLAN_HEADER = CType(Me.Table,MAINRECIPEPLAN_HEADERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPEPLAN_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPEPLAN_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPEPLAN_NAME' in table 'MAINRECIPEPLAN_HEADER' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_HEADER.PLAN_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_USER' in table 'MAINRECIPEPLAN_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_HEADER.PLAN_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPEPLAN_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPEPLAN_NAMENull()
            Me(Me.tableMAINRECIPEPLAN_HEADER.MAINRECIPEPLAN_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_USERNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_HEADER.PLAN_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_USERNull()
            Me(Me.tableMAINRECIPEPLAN_HEADER.PLAN_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINRECIPEPLAN_LINERows() As MAINRECIPEPLAN_LINERow()
            If (Me.Table.ChildRelations("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE") Is Nothing) Then
                Return New MAINRECIPEPLAN_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE")),MAINRECIPEPLAN_LINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MAINRECIPEPLAN_LINERow
        Inherits Global.System.Data.DataRow
        
        Private tableMAINRECIPEPLAN_LINE As MAINRECIPEPLAN_LINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMAINRECIPEPLAN_LINE = CType(Me.Table,MAINRECIPEPLAN_LINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPEPLAN_IDENT() As String
            Get
                Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPEPLAN_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPEPLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPEPLAN_LINE() As Short
            Get
                Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPEPLAN_LINEColumn),Short)
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPEPLAN_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_IDENT' in table 'MAINRECIPEPLAN_LINE' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_CYCLE' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.PLAN_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_STATUS' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.PLAN_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property START_DATETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMAINRECIPEPLAN_LINE.START_DATETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_DATETIME' in table 'MAINRECIPEPLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMAINRECIPEPLAN_LINE.START_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_HEADERRow() As MAINRECIPE_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE")),MAINRECIPE_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MAINRECIPE_HEADERMAINRECIPEPLAN_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPEPLAN_HEADERRow() As MAINRECIPEPLAN_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE")),MAINRECIPEPLAN_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MAINRECIPEPLAN_HEADERMAINRECIPEPLAN_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_IDENTNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.MAINRECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_CYCLENull()
            Me(Me.tableMAINRECIPEPLAN_LINE.PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.PLAN_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_STATUSNull()
            Me(Me.tableMAINRECIPEPLAN_LINE.PLAN_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTART_DATETIMENull() As Boolean
            Return Me.IsNull(Me.tableMAINRECIPEPLAN_LINE.START_DATETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTART_DATETIMENull()
            Me(Me.tableMAINRECIPEPLAN_LINE.START_DATETIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MATERIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableMATERIAL As MATERIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMATERIAL = CType(Me.Table,MATERIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableMATERIAL.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMATERIAL.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT() As String
            Get
                Return CType(Me(Me.tableMATERIAL.MAT_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NAME' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_BATCH_MODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_BATCH_MODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_BATCH_MODE' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_BATCH_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.WP_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_IDENT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.WP_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SPM_OUTADR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_SPM_OUTADRColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SPM_OUTADR' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_SPM_OUTADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SPM_INADR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_SPM_INADRColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SPM_INADR' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_SPM_INADRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PROD_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_PROD_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PROD_REPORT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_PROD_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_BATCH_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_BATCH_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_BATCH_REPORT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_BATCH_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_USER' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PARA() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_PARAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PARA' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_PARAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_PRESET() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_PRESETColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_PRESET' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_PRESETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_OVERSHOOT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_OVERSHOOTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_OVERSHOOT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_OVERSHOOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_POS_TOL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_POS_TOLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_POS_TOL' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_POS_TOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NEG_TOL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_NEG_TOLColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NEG_TOL' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_NEG_TOLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_FLOWRATE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_FLOWRATEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_FLOWRATE' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_FLOWRATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_CALMINGTIME() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_CALMINGTIMEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_CALMINGTIME' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_CALMINGTIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_RESTART_MODE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_RESTART_MODEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_RESTART_MODE' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_RESTART_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DISCHARGETIME() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_DISCHARGETIMEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DISCHARGETIME' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_DISCHARGETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_A1_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_UNIT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_A1_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_MAX() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_A1_MAXColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_MAX' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_A1_MAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_A1_MIN() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_A1_MINColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_A1_MIN' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_A1_MINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_STOCK() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_STOCKColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_STOCK' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_MIN_STOCK() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_MIN_STOCKColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_MIN_STOCK' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_MIN_STOCKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT_CORR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_IDENT_CORRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_IDENT_CORR' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_IDENT_CORRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT_CORR_VAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_IDENT_CORR_VALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_IDENT_CORR_VAL' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_IDENT_CORR_VALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_POS_TOL_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_POS_TOL_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_POS_TOL_UNIT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_POS_TOL_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_NEG_TOL_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_NEG_TOL_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_NEG_TOL_UNIT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_NEG_TOL_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ORDER() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_ORDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ORDER' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_ORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DELIVERY() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_DELIVERYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DELIVERY' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_DELIVERYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_LOT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_LOTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_LOT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_LOTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_DATETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.MAT_DATETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_DATETIME' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.MAT_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_COD_SRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_VAR_COD_SRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_COD_SRC' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_VAR_COD_SRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_COD_LST() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_VAR_COD_LSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_COD_LST' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_VAR_COD_LSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_COD_ERR() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_COD_ERR' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_COD_ERRNUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRNUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_COD_ERRNUM' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_CIC() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.SCRIPT_CICColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_CIC' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.SCRIPT_CICColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_PRINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.LABEL_PRINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_PRINT' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.LABEL_PRINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_COPIES() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.LABEL_COPIESColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_COPIES' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.LABEL_COPIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMATERIAL.LABEL_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_NAME' in table 'MATERIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMATERIAL.LABEL_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_WPRowParent() As PRODLINE_WPRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PRODLINE_WPMATERIAL")),PRODLINE_WPRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PRODLINE_WPMATERIAL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NAMENull()
            Me(Me.tableMATERIAL.MAT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_BATCH_MODENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_BATCH_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_BATCH_MODENull()
            Me(Me.tableMATERIAL.MAT_BATCH_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.WP_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_IDENTNull()
            Me(Me.tableMATERIAL.WP_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SPM_OUTADRNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_SPM_OUTADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SPM_OUTADRNull()
            Me(Me.tableMATERIAL.MAT_SPM_OUTADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SPM_INADRNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_SPM_INADRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SPM_INADRNull()
            Me(Me.tableMATERIAL.MAT_SPM_INADRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PROD_REPORTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_PROD_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PROD_REPORTNull()
            Me(Me.tableMATERIAL.MAT_PROD_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_BATCH_REPORTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_BATCH_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_BATCH_REPORTNull()
            Me(Me.tableMATERIAL.MAT_BATCH_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_USERNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_USERNull()
            Me(Me.tableMATERIAL.MAT_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PARANull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_PARAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PARANull()
            Me(Me.tableMATERIAL.MAT_PARAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_PRESETNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_PRESETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_PRESETNull()
            Me(Me.tableMATERIAL.MAT_PRESETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_OVERSHOOTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_OVERSHOOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_OVERSHOOTNull()
            Me(Me.tableMATERIAL.MAT_OVERSHOOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_POS_TOLNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_POS_TOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_POS_TOLNull()
            Me(Me.tableMATERIAL.MAT_POS_TOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NEG_TOLNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_NEG_TOLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NEG_TOLNull()
            Me(Me.tableMATERIAL.MAT_NEG_TOLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_FLOWRATENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_FLOWRATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_FLOWRATENull()
            Me(Me.tableMATERIAL.MAT_FLOWRATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_CALMINGTIMENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_CALMINGTIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_CALMINGTIMENull()
            Me(Me.tableMATERIAL.MAT_CALMINGTIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_RESTART_MODENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_RESTART_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_RESTART_MODENull()
            Me(Me.tableMATERIAL.MAT_RESTART_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DISCHARGETIMENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_DISCHARGETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DISCHARGETIMENull()
            Me(Me.tableMATERIAL.MAT_DISCHARGETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_A1_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_UNITNull()
            Me(Me.tableMATERIAL.MAT_A1_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_MAXNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_A1_MAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_MAXNull()
            Me(Me.tableMATERIAL.MAT_A1_MAXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_A1_MINNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_A1_MINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_A1_MINNull()
            Me(Me.tableMATERIAL.MAT_A1_MINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_STOCKNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_STOCKNull()
            Me(Me.tableMATERIAL.MAT_STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_MIN_STOCKNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_MIN_STOCKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_MIN_STOCKNull()
            Me(Me.tableMATERIAL.MAT_MIN_STOCKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_IDENT_CORRNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_IDENT_CORRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_IDENT_CORRNull()
            Me(Me.tableMATERIAL.MAT_IDENT_CORRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_IDENT_CORR_VALNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_IDENT_CORR_VALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_IDENT_CORR_VALNull()
            Me(Me.tableMATERIAL.MAT_IDENT_CORR_VALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_POS_TOL_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_POS_TOL_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_POS_TOL_UNITNull()
            Me(Me.tableMATERIAL.MAT_POS_TOL_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_NEG_TOL_UNITNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_NEG_TOL_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_NEG_TOL_UNITNull()
            Me(Me.tableMATERIAL.MAT_NEG_TOL_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ORDERNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_ORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ORDERNull()
            Me(Me.tableMATERIAL.MAT_ORDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DELIVERYNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_DELIVERYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DELIVERYNull()
            Me(Me.tableMATERIAL.MAT_DELIVERYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_LOTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_LOTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_LOTNull()
            Me(Me.tableMATERIAL.MAT_LOTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_DATETIMENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.MAT_DATETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_DATETIMENull()
            Me(Me.tableMATERIAL.MAT_DATETIMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_COD_SRCNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_VAR_COD_SRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_COD_SRCNull()
            Me(Me.tableMATERIAL.SCRIPT_VAR_COD_SRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_COD_LSTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_VAR_COD_LSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_COD_LSTNull()
            Me(Me.tableMATERIAL.SCRIPT_VAR_COD_LSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_COD_ERRNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_COD_ERRNull()
            Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_COD_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_COD_ERRNUMNull()
            Me(Me.tableMATERIAL.SCRIPT_VAR_COD_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tableMATERIAL.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_CICNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.SCRIPT_CICColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_CICNull()
            Me(Me.tableMATERIAL.SCRIPT_CICColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_PRINTNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.LABEL_PRINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_PRINTNull()
            Me(Me.tableMATERIAL.LABEL_PRINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_COPIESNull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.LABEL_COPIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_COPIESNull()
            Me(Me.tableMATERIAL.LABEL_COPIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMATERIAL.LABEL_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_NAMENull()
            Me(Me.tableMATERIAL.LABEL_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLAN_HEADERRow
        Inherits Global.System.Data.DataRow
        
        Private tablePLAN_HEADER As PLAN_HEADERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLAN_HEADER = CType(Me.Table,PLAN_HEADERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tablePLAN_HEADER.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePLAN_HEADER.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_IDENT() As String
            Get
                Return CType(Me(Me.tablePLAN_HEADER.PLAN_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePLAN_HEADER.PLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_HEADER.PLAN_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_NAME' in table 'PLAN_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_HEADER.PLAN_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_HEADER.PLAN_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_USER' in table 'PLAN_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_HEADER.PLAN_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCTIONLINERow() As PRODUCTIONLINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PRODUCTIONLINEPLAN_HEADER")),PRODUCTIONLINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PRODUCTIONLINEPLAN_HEADER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePLAN_HEADER.PLAN_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_NAMENull()
            Me(Me.tablePLAN_HEADER.PLAN_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_USERNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_HEADER.PLAN_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_USERNull()
            Me(Me.tablePLAN_HEADER.PLAN_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLAN_LINERows() As PLAN_LINERow()
            If (Me.Table.ChildRelations("PLAN_HEADERPLAN_LINE") Is Nothing) Then
                Return New PLAN_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PLAN_HEADERPLAN_LINE")),PLAN_LINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PLAN_LINERow
        Inherits Global.System.Data.DataRow
        
        Private tablePLAN_LINE As PLAN_LINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePLAN_LINE = CType(Me.Table,PLAN_LINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tablePLAN_LINE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePLAN_LINE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_IDENT() As String
            Get
                Return CType(Me(Me.tablePLAN_LINE.PLAN_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePLAN_LINE.PLAN_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_LINE() As Short
            Get
                Return CType(Me(Me.tablePLAN_LINE.PLAN_LINEColumn),Short)
            End Get
            Set
                Me(Me.tablePLAN_LINE.PLAN_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IDENT' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_NUM' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PROD_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_UNIT' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PROD_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_PCAUTOSTART() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PROD_PCAUTOSTARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_PCAUTOSTART' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PROD_PCAUTOSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_CYCLE' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_STATUS() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.PLAN_STATUSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLAN_STATUS' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.PLAN_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property START_DATETIME() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePLAN_LINE.START_DATETIMEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'START_DATETIME' in table 'PLAN_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePLAN_LINE.START_DATETIMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PLAN_HEADERRowParent() As PLAN_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PLAN_HEADERPLAN_LINE")),PLAN_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PLAN_HEADERPLAN_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IDENTNull()
            Me(Me.tablePLAN_LINE.RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENTNull()
            Me(Me.tablePLAN_LINE.ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENTNull()
            Me(Me.tablePLAN_LINE.CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_NUMNull()
            Me(Me.tablePLAN_LINE.PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_SETPOINTNull()
            Me(Me.tablePLAN_LINE.PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_UNITNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PROD_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_UNITNull()
            Me(Me.tablePLAN_LINE.PROD_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_PCAUTOSTARTNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PROD_PCAUTOSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_PCAUTOSTARTNull()
            Me(Me.tablePLAN_LINE.PROD_PCAUTOSTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_CYCLENull()
            Me(Me.tablePLAN_LINE.PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPLAN_STATUSNull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.PLAN_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPLAN_STATUSNull()
            Me(Me.tablePLAN_LINE.PLAN_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSTART_DATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePLAN_LINE.START_DATETIMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSTART_DATETIMENull()
            Me(Me.tablePLAN_LINE.START_DATETIMEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PR8400Row
        Inherits Global.System.Data.DataRow
        
        Private tablePR8400 As PR8400DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePR8400 = CType(Me.Table,PR8400DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PR8400_MODE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.PR8400_MODEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PR8400_MODE' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.PR8400_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRINT_MAINPRODREPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.PRINT_MAINPRODREPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINT_MAINPRODREPORT' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.PRINT_MAINPRODREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRINT_MAINBATCHREPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.PRINT_MAINBATCHREPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINT_MAINBATCHREPORT' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.PRINT_MAINBATCHREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT_CAPTION_MAINREPORT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.ORDER_IDENT_CAPTION_MAINREPORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT_CAPTION_MAINREPORT' in table 'PR8400' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.ORDER_IDENT_CAPTION_MAINREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT_CAPTION_MAINREPORT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.CUSTOMER_IDENT_CAPTION_MAINREPORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT_CAPTION_MAINREPORT' in table 'PR8400' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.CUSTOMER_IDENT_CAPTION_MAINREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HEADER1_MAINREPORT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.HEADER1_MAINREPORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADER1_MAINREPORT' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.HEADER1_MAINREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HEADER2_MAINREPORT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.HEADER2_MAINREPORTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADER2_MAINREPORT' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.HEADER2_MAINREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_MAINREPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.LOG_MAINREPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_MAINREPORT' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.LOG_MAINREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_MAINREPORT_DAYS() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.LOG_MAINREPORT_DAYSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_MAINREPORT_DAYS' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.LOG_MAINREPORT_DAYSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINRECIPE_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.MAINRECIPE_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINRECIPE_ENABLED' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.MAINRECIPE_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAINSEQUENCE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.MAINSEQUENCE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINSEQUENCE_NUMBER' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.MAINSEQUENCE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_RECIPE_TOTAL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400.PROD_RECIPE_TOTALColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_RECIPE_TOTAL' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400.PROD_RECIPE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _MAINPROD_SETPOINT__() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePR8400._MAINPROD_SETPOINT__Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAINPROD_SETPOINT_%' in table 'PR8400' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePR8400._MAINPROD_SETPOINT__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPR8400_MODENull() As Boolean
            Return Me.IsNull(Me.tablePR8400.PR8400_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPR8400_MODENull()
            Me(Me.tablePR8400.PR8400_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRINT_MAINPRODREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.PRINT_MAINPRODREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRINT_MAINPRODREPORTNull()
            Me(Me.tablePR8400.PRINT_MAINPRODREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRINT_MAINBATCHREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.PRINT_MAINBATCHREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRINT_MAINBATCHREPORTNull()
            Me(Me.tablePR8400.PRINT_MAINBATCHREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENT_CAPTION_MAINREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.ORDER_IDENT_CAPTION_MAINREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENT_CAPTION_MAINREPORTNull()
            Me(Me.tablePR8400.ORDER_IDENT_CAPTION_MAINREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENT_CAPTION_MAINREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.CUSTOMER_IDENT_CAPTION_MAINREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENT_CAPTION_MAINREPORTNull()
            Me(Me.tablePR8400.CUSTOMER_IDENT_CAPTION_MAINREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHEADER1_MAINREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.HEADER1_MAINREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHEADER1_MAINREPORTNull()
            Me(Me.tablePR8400.HEADER1_MAINREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHEADER2_MAINREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.HEADER2_MAINREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHEADER2_MAINREPORTNull()
            Me(Me.tablePR8400.HEADER2_MAINREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_MAINREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.LOG_MAINREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_MAINREPORTNull()
            Me(Me.tablePR8400.LOG_MAINREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_MAINREPORT_DAYSNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.LOG_MAINREPORT_DAYSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_MAINREPORT_DAYSNull()
            Me(Me.tablePR8400.LOG_MAINREPORT_DAYSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINRECIPE_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.MAINRECIPE_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINRECIPE_ENABLEDNull()
            Me(Me.tablePR8400.MAINRECIPE_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAINSEQUENCE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.MAINSEQUENCE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAINSEQUENCE_NUMBERNull()
            Me(Me.tablePR8400.MAINSEQUENCE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_RECIPE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tablePR8400.PROD_RECIPE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_RECIPE_TOTALNull()
            Me(Me.tablePR8400.PROD_RECIPE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_MAINPROD_SETPOINT__Null() As Boolean
            Return Me.IsNull(Me.tablePR8400._MAINPROD_SETPOINT__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_MAINPROD_SETPOINT__Null()
            Me(Me.tablePR8400._MAINPROD_SETPOINT__Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PRODLINE_WPRow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODLINE_WP As PRODLINE_WPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODLINE_WP = CType(Me.Table,PRODLINE_WPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tablePRODLINE_WP.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePRODLINE_WP.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_IDENT() As String
            Get
                Return CType(Me(Me.tablePRODLINE_WP.WP_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePRODLINE_WP.WP_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCTIONLINERow() As PRODUCTIONLINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PRODUCTIONLINEPRODLINE_WP")),PRODUCTIONLINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PRODUCTIONLINEPRODLINE_WP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WPRow() As WPRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("WPPRODLINE_WP")),WPRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("WPPRODLINE_WP"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMATERIALRows() As MATERIALRow()
            If (Me.Table.ChildRelations("PRODLINE_WPMATERIAL") Is Nothing) Then
                Return New MATERIALRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PRODLINE_WPMATERIAL")),MATERIALRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PRODUCTIONLINERow
        Inherits Global.System.Data.DataRow
        
        Private tablePRODUCTIONLINE As PRODUCTIONLINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRODUCTIONLINE = CType(Me.Table,PRODUCTIONLINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.DEVICE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_IDENT' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.DEVICE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tablePRODUCTIONLINE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_NUMBER() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PRODLINE_NUMBERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODLINE_NUMBER' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PRODLINE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DDESET() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.DDESETColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DDESET' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.DDESETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORDER_IDENT_CAPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.ORDER_IDENT_CAPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_IDENT_CAPTION' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.ORDER_IDENT_CAPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CUSTOMER_IDENT_CAPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.CUSTOMER_IDENT_CAPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUSTOMER_IDENT_CAPTION' in table 'PRODUCTIONLINE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.CUSTOMER_IDENT_CAPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HEADER1() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.HEADER1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADER1' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.HEADER1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HEADER2() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.HEADER2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HEADER2' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.HEADER2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _PROD_SETPOINT__() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE._PROD_SETPOINT__Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_SETPOINT_%' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE._PROD_SETPOINT__Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_MODE() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PROD_MODEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_MODE' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PROD_MODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_RECIPE_TOTAL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PROD_RECIPE_TOTALColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_RECIPE_TOTAL' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PROD_RECIPE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_REPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.LOG_REPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_REPORT' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.LOG_REPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRINT_PRODREPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PRINT_PRODREPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINT_PRODREPORT' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PRINT_PRODREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRINT_BATCHREPORT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PRINT_BATCHREPORTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRINT_BATCHREPORT' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PRINT_BATCHREPORTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROD_MANUAL_START() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PROD_MANUAL_STARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROD_MANUAL_START' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PROD_MANUAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BATCH_MANUAL_START() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.BATCH_MANUAL_STARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BATCH_MANUAL_START' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.BATCH_MANUAL_STARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.PRODLINE_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODLINE_ENABLED' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.PRODLINE_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQUENCE_NUMBER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SEQUENCE_NUMBERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQUENCE_NUMBER' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SEQUENCE_NUMBERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_REPORT_DAYS() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.LOG_REPORT_DAYSColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_REPORT_DAYS' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.LOG_REPORT_DAYSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOAD_RECIPE_CHANGED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.LOAD_RECIPE_CHANGEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOAD_RECIPE_CHANGED' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.LOAD_RECIPE_CHANGEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LOG_FLOWALARM() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.LOG_FLOWALARMColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOG_FLOWALARM' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.LOG_FLOWALARMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_SRC() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_SRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_SRC' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_SRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_LST() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_LSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_LST' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_LSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERR' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERRNUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRNUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERRNUM' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tablePRODUCTIONLINE.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'PRODUCTIONLINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRODUCTIONLINE.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICERow() As DEVICERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference")),DEVICERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDEVICE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.DEVICE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDEVICE_IDENTNull()
            Me(Me.tablePRODUCTIONLINE.DEVICE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODLINE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PRODLINE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODLINE_NUMBERNull()
            Me(Me.tablePRODUCTIONLINE.PRODLINE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDDESETNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.DDESETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDDESETNull()
            Me(Me.tablePRODUCTIONLINE.DDESETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORDER_IDENT_CAPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.ORDER_IDENT_CAPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORDER_IDENT_CAPTIONNull()
            Me(Me.tablePRODUCTIONLINE.ORDER_IDENT_CAPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCUSTOMER_IDENT_CAPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.CUSTOMER_IDENT_CAPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCUSTOMER_IDENT_CAPTIONNull()
            Me(Me.tablePRODUCTIONLINE.CUSTOMER_IDENT_CAPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHEADER1Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.HEADER1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHEADER1Null()
            Me(Me.tablePRODUCTIONLINE.HEADER1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHEADER2Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.HEADER2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHEADER2Null()
            Me(Me.tablePRODUCTIONLINE.HEADER2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_PROD_SETPOINT__Null() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE._PROD_SETPOINT__Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_PROD_SETPOINT__Null()
            Me(Me.tablePRODUCTIONLINE._PROD_SETPOINT__Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_MODENull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PROD_MODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_MODENull()
            Me(Me.tablePRODUCTIONLINE.PROD_MODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_RECIPE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PROD_RECIPE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_RECIPE_TOTALNull()
            Me(Me.tablePRODUCTIONLINE.PROD_RECIPE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_REPORTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.LOG_REPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_REPORTNull()
            Me(Me.tablePRODUCTIONLINE.LOG_REPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRINT_PRODREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PRINT_PRODREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRINT_PRODREPORTNull()
            Me(Me.tablePRODUCTIONLINE.PRINT_PRODREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRINT_BATCHREPORTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PRINT_BATCHREPORTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRINT_BATCHREPORTNull()
            Me(Me.tablePRODUCTIONLINE.PRINT_BATCHREPORTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROD_MANUAL_STARTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PROD_MANUAL_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROD_MANUAL_STARTNull()
            Me(Me.tablePRODUCTIONLINE.PROD_MANUAL_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBATCH_MANUAL_STARTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.BATCH_MANUAL_STARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBATCH_MANUAL_STARTNull()
            Me(Me.tablePRODUCTIONLINE.BATCH_MANUAL_STARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODLINE_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.PRODLINE_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODLINE_ENABLEDNull()
            Me(Me.tablePRODUCTIONLINE.PRODLINE_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQUENCE_NUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SEQUENCE_NUMBERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQUENCE_NUMBERNull()
            Me(Me.tablePRODUCTIONLINE.SEQUENCE_NUMBERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_REPORT_DAYSNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.LOG_REPORT_DAYSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_REPORT_DAYSNull()
            Me(Me.tablePRODUCTIONLINE.LOG_REPORT_DAYSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOAD_RECIPE_CHANGEDNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.LOAD_RECIPE_CHANGEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOAD_RECIPE_CHANGEDNull()
            Me(Me.tablePRODUCTIONLINE.LOAD_RECIPE_CHANGEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLOG_FLOWALARMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.LOG_FLOWALARMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLOG_FLOWALARMNull()
            Me(Me.tablePRODUCTIONLINE.LOG_FLOWALARMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_SRCNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SCRIPT_VAR_SRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_SRCNull()
            Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_SRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_LSTNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SCRIPT_VAR_LSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_LSTNull()
            Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_LSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNull()
            Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNUMNull()
            Me(Me.tablePRODUCTIONLINE.SCRIPT_VAR_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tablePRODUCTIONLINE.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tablePRODUCTIONLINE.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPLAN_HEADERRows() As PLAN_HEADERRow()
            If (Me.Table.ChildRelations("PRODUCTIONLINEPLAN_HEADER") Is Nothing) Then
                Return New PLAN_HEADERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PRODUCTIONLINEPLAN_HEADER")),PLAN_HEADERRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPRODLINE_WPRows() As PRODLINE_WPRow()
            If (Me.Table.ChildRelations("PRODUCTIONLINEPRODLINE_WP") Is Nothing) Then
                Return New PRODLINE_WPRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PRODUCTIONLINEPRODLINE_WP")),PRODLINE_WPRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetRECIPE_HEADERRows() As RECIPE_HEADERRow()
            If (Me.Table.ChildRelations("PRODUCTIONLINERECIPE_HEADER") Is Nothing) Then
                Return New RECIPE_HEADERRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PRODUCTIONLINERECIPE_HEADER")),RECIPE_HEADERRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RECIPE_HEADERRow
        Inherits Global.System.Data.DataRow
        
        Private tableRECIPE_HEADER As RECIPE_HEADERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRECIPE_HEADER = CType(Me.Table,RECIPE_HEADERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE_HEADER.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_NAME' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CREATE_DATE' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CHANGE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_CHANGE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CHANGE_DATE' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_CHANGE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_ENABLED' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_USER() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_USERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_USER' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_USERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TOTAL() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_TOTALColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TOTAL' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_REFWEIGHT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_REFWEIGHTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_REFWEIGHT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_REFWEIGHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_UNIT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_DECIMALPOINT() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_DECIMALPOINTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_DECIMALPOINT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_MAXRESOLU_DP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_MAXRESOLU_DPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_MAXRESOLU_DP' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_MAXRESOLU_DPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IN_PERCENT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_IN_PERCENTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_IN_PERCENT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_IN_PERCENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_CHECK() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_CHECKColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_CHECK' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_CHECKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TIMEOUT() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUTColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TIMEOUT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_TIMEOUT_ENABLED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUT_ENABLEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_TIMEOUT_ENABLED' in table 'RECIPE_HEADER' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUT_ENABLEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CORR_RECIPE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.CORR_RECIPEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CORR_RECIPE' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.CORR_RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAIN_RECIPE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.MAIN_RECIPE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAIN_RECIPE_IDENT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.MAIN_RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUB_RECIPE() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SUB_RECIPEColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUB_RECIPE' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SUB_RECIPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_SRC() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_SRCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_SRC' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_SRCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_LST() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_LSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_LST' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_LSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERR() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERR' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_VAR_ERRNUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRNUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_VAR_ERRNUM' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRNUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SCRIPT_DIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.SCRIPT_DITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCRIPT_DIT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.SCRIPT_DITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __ORDER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__ORDER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~ORDER_IDENT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__ORDER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __CUSTOMER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__CUSTOMER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~CUSTOMER_IDENT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__CUSTOMER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_NUM() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__PROD_NUMColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_NUM' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__PROD_NUMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__PROD_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_SETPOINT' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__PROD_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_PCAUTOSTART() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__PROD_PCAUTOSTARTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_PCAUTOSTART' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__PROD_PCAUTOSTARTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property __PROD_CYCLE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_HEADER.__PROD_CYCLEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column '~PROD_CYCLE' in table 'RECIPE_HEADER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_HEADER.__PROD_CYCLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODUCTIONLINERow() As PRODUCTIONLINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PRODUCTIONLINERECIPE_HEADER")),PRODUCTIONLINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PRODUCTIONLINERECIPE_HEADER"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_NAMENull()
            Me(Me.tableRECIPE_HEADER.RECIPE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CREATE_DATENull()
            Me(Me.tableRECIPE_HEADER.RECIPE_CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CHANGE_DATENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_CHANGE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CHANGE_DATENull()
            Me(Me.tableRECIPE_HEADER.RECIPE_CHANGE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_ENABLEDNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_USERNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_USERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_USERNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_USERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TOTALNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_REFWEIGHTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_REFWEIGHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_REFWEIGHTNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_REFWEIGHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_UNITNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_DECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_DECIMALPOINTNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_MAXRESOLU_DPNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_MAXRESOLU_DPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_MAXRESOLU_DPNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_MAXRESOLU_DPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_IN_PERCENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_IN_PERCENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_IN_PERCENTNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_IN_PERCENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_CHECKNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_CHECKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_CHECKNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_CHECKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TIMEOUTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_TIMEOUTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TIMEOUTNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_TIMEOUT_ENABLEDNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.RECIPE_TIMEOUT_ENABLEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_TIMEOUT_ENABLEDNull()
            Me(Me.tableRECIPE_HEADER.RECIPE_TIMEOUT_ENABLEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCORR_RECIPENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.CORR_RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCORR_RECIPENull()
            Me(Me.tableRECIPE_HEADER.CORR_RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAIN_RECIPE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.MAIN_RECIPE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAIN_RECIPE_IDENTNull()
            Me(Me.tableRECIPE_HEADER.MAIN_RECIPE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUB_RECIPENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SUB_RECIPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUB_RECIPENull()
            Me(Me.tableRECIPE_HEADER.SUB_RECIPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_SRCNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SCRIPT_VAR_SRCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_SRCNull()
            Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_SRCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_LSTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SCRIPT_VAR_LSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_LSTNull()
            Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_LSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNull()
            Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_VAR_ERRNUMNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRNUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_VAR_ERRNUMNull()
            Me(Me.tableRECIPE_HEADER.SCRIPT_VAR_ERRNUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSCRIPT_DITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.SCRIPT_DITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSCRIPT_DITNull()
            Me(Me.tableRECIPE_HEADER.SCRIPT_DITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__ORDER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__ORDER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__ORDER_IDENTNull()
            Me(Me.tableRECIPE_HEADER.__ORDER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__CUSTOMER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__CUSTOMER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__CUSTOMER_IDENTNull()
            Me(Me.tableRECIPE_HEADER.__CUSTOMER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_NUMNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__PROD_NUMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_NUMNull()
            Me(Me.tableRECIPE_HEADER.__PROD_NUMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__PROD_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_SETPOINTNull()
            Me(Me.tableRECIPE_HEADER.__PROD_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_PCAUTOSTARTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__PROD_PCAUTOSTARTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_PCAUTOSTARTNull()
            Me(Me.tableRECIPE_HEADER.__PROD_PCAUTOSTARTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is__PROD_CYCLENull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_HEADER.__PROD_CYCLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set__PROD_CYCLENull()
            Me(Me.tableRECIPE_HEADER.__PROD_CYCLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetMAINRECIPE_LINERows() As MAINRECIPE_LINERow()
            If (Me.Table.ChildRelations("RECIPE_HEADERMAINRECIPE_LINE") Is Nothing) Then
                Return New MAINRECIPE_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RECIPE_HEADERMAINRECIPE_LINE")),MAINRECIPE_LINERow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetRECIPE_LINERows() As RECIPE_LINERow()
            If (Me.Table.ChildRelations("RECIPE_HEADERRECIPE_LINE") Is Nothing) Then
                Return New RECIPE_LINERow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RECIPE_HEADERRECIPE_LINE")),RECIPE_LINERow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RECIPE_LINERow
        Inherits Global.System.Data.DataRow
        
        Private tableRECIPE_LINE As RECIPE_LINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRECIPE_LINE = CType(Me.Table,RECIPE_LINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE_LINE.PRODLINE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE_LINE.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_IDENT() As String
            Get
                Return CType(Me(Me.tableRECIPE_LINE.RECIPE_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableRECIPE_LINE.RECIPE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_LINE() As Short
            Get
                Return CType(Me(Me.tableRECIPE_LINE.RECIPE_LINEColumn),Short)
            End Get
            Set
                Me(Me.tableRECIPE_LINE.RECIPE_LINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.MAT_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_IDENT' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.MAT_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_SETPOINT() As Double
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.MAT_SETPOINTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_SETPOINT' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.MAT_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.MAT_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_UNIT' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.MAT_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_ADD_TO_TOTAL() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.MAT_ADD_TO_TOTALColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_ADD_TO_TOTAL' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.MAT_ADD_TO_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_CALCULATE_SETPOINT() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.MAT_CALCULATE_SETPOINTColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_CALCULATE_SETPOINT' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.MAT_CALCULATE_SETPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_LINE_PARA() As String
            Get
                Try 
                    Return CType(Me(Me.tableRECIPE_LINE.RECIPE_LINE_PARAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECIPE_LINE_PARA' in table 'RECIPE_LINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRECIPE_LINE.RECIPE_LINE_PARAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RECIPE_HEADERRowParent() As RECIPE_HEADERRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RECIPE_HEADERRECIPE_LINE")),RECIPE_HEADERRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RECIPE_HEADERRECIPE_LINE"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.MAT_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_IDENTNull()
            Me(Me.tableRECIPE_LINE.MAT_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.MAT_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_SETPOINTNull()
            Me(Me.tableRECIPE_LINE.MAT_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_UNITNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.MAT_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_UNITNull()
            Me(Me.tableRECIPE_LINE.MAT_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_ADD_TO_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.MAT_ADD_TO_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_ADD_TO_TOTALNull()
            Me(Me.tableRECIPE_LINE.MAT_ADD_TO_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_CALCULATE_SETPOINTNull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.MAT_CALCULATE_SETPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_CALCULATE_SETPOINTNull()
            Me(Me.tableRECIPE_LINE.MAT_CALCULATE_SETPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRECIPE_LINE_PARANull() As Boolean
            Return Me.IsNull(Me.tableRECIPE_LINE.RECIPE_LINE_PARAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRECIPE_LINE_PARANull()
            Me(Me.tableRECIPE_LINE.RECIPE_LINE_PARAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SUPPLIERRow
        Inherits Global.System.Data.DataRow
        
        Private tableSUPPLIER As SUPPLIERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUPPLIER = CType(Me.Table,SUPPLIERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLIER_IDENT() As String
            Get
                Return CType(Me(Me.tableSUPPLIER.SUPPLIER_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableSUPPLIER.SUPPLIER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLIER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.SUPPLIER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NAME' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.SUPPLIER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDRESS' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CITY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.CITYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CITY' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.CITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property COUNTRY() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.COUNTRYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COUNTRY' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.COUNTRYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POSTAL_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.POSTAL_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POSTAL_CODE' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.POSTAL_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PHONE' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FAX() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLIER.FAXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FAX' in table 'SUPPLIER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLIER.FAXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUPPLIER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.SUPPLIER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUPPLIER_NAMENull()
            Me(Me.tableSUPPLIER.SUPPLIER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetADDRESSNull()
            Me(Me.tableSUPPLIER.ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCITYNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.CITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCITYNull()
            Me(Me.tableSUPPLIER.CITYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.COUNTRYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCOUNTRYNull()
            Me(Me.tableSUPPLIER.COUNTRYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPOSTAL_CODENull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.POSTAL_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPOSTAL_CODENull()
            Me(Me.tableSUPPLIER.POSTAL_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPHONENull()
            Me(Me.tableSUPPLIER.PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFAXNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLIER.FAXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFAXNull()
            Me(Me.tableSUPPLIER.FAXColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SUPPLYRow
        Inherits Global.System.Data.DataRow
        
        Private tableSUPPLY As SUPPLYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSUPPLY = CType(Me.Table,SUPPLYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSUPPLY.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSUPPLY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PRODLINE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLY.PRODLINE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRODLINE_IDENT' in table 'SUPPLY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLY.PRODLINE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAT_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLY.MAT_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAT_IDENT' in table 'SUPPLY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLY.MAT_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SUPPLIER_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLY.SUPPLIER_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_IDENT' in table 'SUPPLY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLY.SUPPLIER_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLY.DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE' in table 'SUPPLY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLY.DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property QUANTITY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableSUPPLY.QUANTITYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QUANTITY' in table 'SUPPLY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSUPPLY.QUANTITYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPRODLINE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLY.PRODLINE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPRODLINE_IDENTNull()
            Me(Me.tableSUPPLY.PRODLINE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAT_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLY.MAT_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAT_IDENTNull()
            Me(Me.tableSUPPLY.MAT_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSUPPLIER_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLY.SUPPLIER_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSUPPLIER_IDENTNull()
            Me(Me.tableSUPPLY.SUPPLIER_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_DATENull() As Boolean
            Return Me.IsNull(Me.tableSUPPLY.DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_DATENull()
            Me(Me.tableSUPPLY.DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsQUANTITYNull() As Boolean
            Return Me.IsNull(Me.tableSUPPLY.QUANTITYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetQUANTITYNull()
            Me(Me.tableSUPPLY.QUANTITYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class WPRow
        Inherits Global.System.Data.DataRow
        
        Private tableWP As WPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableWP = CType(Me.Table,WPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICE_IDENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.DEVICE_IDENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEVICE_IDENT' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.DEVICE_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_IDENT() As String
            Get
                Return CType(Me(Me.tableWP.WP_IDENTColumn),String)
            End Get
            Set
                Me(Me.tableWP.WP_IDENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.WP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_NAME' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.WP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.WP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_ADDRESS' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.WP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FULLSCALE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableWP.FULLSCALEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FULLSCALE' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.FULLSCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DECIMALPOINT() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableWP.DECIMALPOINTColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DECIMALPOINT' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.DECIMALPOINTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.WP_UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_UNIT' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.WP_UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAX_RESIDUE() As Double
            Get
                Try 
                    Return CType(Me(Me.tableWP.MAX_RESIDUEColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAX_RESIDUE' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.MAX_RESIDUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property WP_TYPE() As Short
            Get
                Try 
                    Return CType(Me(Me.tableWP.WP_TYPEColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WP_TYPE' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.WP_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OPC_SERVER() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.OPC_SERVERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPC_SERVER' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.OPC_SERVERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OPC_GROUP() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.OPC_GROUPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPC_GROUP' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.OPC_GROUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OPC_GROUP_OFFSET() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.OPC_GROUP_OFFSETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPC_GROUP_OFFSET' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.OPC_GROUP_OFFSETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL_PRINTER() As String
            Get
                Try 
                    Return CType(Me(Me.tableWP.LABEL_PRINTERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL_PRINTER' in table 'WP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableWP.LABEL_PRINTERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DEVICERow() As DEVICERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Reference7")),DEVICERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Reference7"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDEVICE_IDENTNull() As Boolean
            Return Me.IsNull(Me.tableWP.DEVICE_IDENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDEVICE_IDENTNull()
            Me(Me.tableWP.DEVICE_IDENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableWP.WP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_NAMENull()
            Me(Me.tableWP.WP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableWP.WP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_ADDRESSNull()
            Me(Me.tableWP.WP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFULLSCALENull() As Boolean
            Return Me.IsNull(Me.tableWP.FULLSCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFULLSCALENull()
            Me(Me.tableWP.FULLSCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDECIMALPOINTNull() As Boolean
            Return Me.IsNull(Me.tableWP.DECIMALPOINTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDECIMALPOINTNull()
            Me(Me.tableWP.DECIMALPOINTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_UNITNull() As Boolean
            Return Me.IsNull(Me.tableWP.WP_UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_UNITNull()
            Me(Me.tableWP.WP_UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAX_RESIDUENull() As Boolean
            Return Me.IsNull(Me.tableWP.MAX_RESIDUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAX_RESIDUENull()
            Me(Me.tableWP.MAX_RESIDUEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsWP_TYPENull() As Boolean
            Return Me.IsNull(Me.tableWP.WP_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetWP_TYPENull()
            Me(Me.tableWP.WP_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOPC_SERVERNull() As Boolean
            Return Me.IsNull(Me.tableWP.OPC_SERVERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOPC_SERVERNull()
            Me(Me.tableWP.OPC_SERVERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOPC_GROUPNull() As Boolean
            Return Me.IsNull(Me.tableWP.OPC_GROUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOPC_GROUPNull()
            Me(Me.tableWP.OPC_GROUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOPC_GROUP_OFFSETNull() As Boolean
            Return Me.IsNull(Me.tableWP.OPC_GROUP_OFFSETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOPC_GROUP_OFFSETNull()
            Me(Me.tableWP.OPC_GROUP_OFFSETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABEL_PRINTERNull() As Boolean
            Return Me.IsNull(Me.tableWP.LABEL_PRINTERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABEL_PRINTERNull()
            Me(Me.tableWP.LABEL_PRINTERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetPRODLINE_WPRows() As PRODLINE_WPRow()
            If (Me.Table.ChildRelations("WPPRODLINE_WP") Is Nothing) Then
                Return New PRODLINE_WPRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("WPPRODLINE_WP")),PRODLINE_WPRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DEVICERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DEVICERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DEVICERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DEVICERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINRECIPE_HEADERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINRECIPE_HEADERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINRECIPE_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINRECIPE_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINRECIPE_LINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINRECIPE_LINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINRECIPE_LINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINRECIPE_LINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINRECIPEPLAN_HEADERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINRECIPEPLAN_HEADERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINRECIPEPLAN_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINRECIPEPLAN_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MAINRECIPEPLAN_LINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MAINRECIPEPLAN_LINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MAINRECIPEPLAN_LINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MAINRECIPEPLAN_LINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MATERIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MATERIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MATERIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MATERIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLAN_HEADERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLAN_HEADERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLAN_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLAN_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PLAN_LINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PLAN_LINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PLAN_LINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PLAN_LINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PR8400RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PR8400Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PR8400Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PR8400Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PRODLINE_WPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODLINE_WPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PRODLINE_WPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PRODLINE_WPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PRODUCTIONLINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PRODUCTIONLINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PRODUCTIONLINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PRODUCTIONLINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RECIPE_HEADERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RECIPE_HEADERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RECIPE_HEADERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RECIPE_HEADERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class RECIPE_LINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RECIPE_LINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As RECIPE_LINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As RECIPE_LINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SUPPLIERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUPPLIERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SUPPLIERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SUPPLIERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SUPPLYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SUPPLYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SUPPLYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SUPPLYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class WPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As WPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As WPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As WPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace _840002P1DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DEVICETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DEVICE"
            tableMapping.ColumnMappings.Add("DEVICE_IDENT", "DEVICE_IDENT")
            tableMapping.ColumnMappings.Add("DEVICE_ADDRESS", "DEVICE_ADDRESS")
            tableMapping.ColumnMappings.Add("DEVICE_NAME", "DEVICE_NAME")
            tableMapping.ColumnMappings.Add("DEVICE_TYPE", "DEVICE_TYPE")
            tableMapping.ColumnMappings.Add("BAUDRATE", "BAUDRATE")
            tableMapping.ColumnMappings.Add("COM_PORT", "COM_PORT")
            tableMapping.ColumnMappings.Add("IP_ADDRESS", "IP_ADDRESS")
            tableMapping.ColumnMappings.Add("SIMULATION", "SIMULATION")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_SRC", "SCRIPT_VAR_SRC")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_LST", "SCRIPT_VAR_LST")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERR", "SCRIPT_VAR_ERR")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERRNUM", "SCRIPT_VAR_ERRNUM")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            tableMapping.ColumnMappings.Add("PRIORITY", "PRIORITY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `DEVICE` WHERE ((`DEVICE_IDENT` = ?) AND ((? = 1 AND `DEVICE_ADDRESS`"& _ 
                " IS NULL) OR (`DEVICE_ADDRESS` = ?)) AND ((? = 1 AND `DEVICE_NAME` IS NULL) OR ("& _ 
                "`DEVICE_NAME` = ?)) AND ((? = 1 AND `DEVICE_TYPE` IS NULL) OR (`DEVICE_TYPE` = ?"& _ 
                ")) AND ((? = 1 AND `BAUDRATE` IS NULL) OR (`BAUDRATE` = ?)) AND ((? = 1 AND `COM"& _ 
                "_PORT` IS NULL) OR (`COM_PORT` = ?)) AND ((? = 1 AND `IP_ADDRESS` IS NULL) OR (`"& _ 
                "IP_ADDRESS` = ?)) AND ((? = 1 AND `SIMULATION` IS NULL) OR (`SIMULATION` = ?)) A"& _ 
                "ND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`SCRIPT_VAR_ERRNUM` = ?)) AND (("& _ 
                "? = 1 AND `PRIORITY` IS NULL) OR (`PRIORITY` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COM_PORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COM_PORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SIMULATION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SIMULATION", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRIORITY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `DEVICE` (`DEVICE_IDENT`, `DEVICE_ADDRESS`, `DEVICE_NAME`, `DEVICE_TY"& _ 
                "PE`, `BAUDRATE`, `COM_PORT`, `IP_ADDRESS`, `SIMULATION`, `SCRIPT_VAR_SRC`, `SCRI"& _ 
                "PT_VAR_LST`, `SCRIPT_VAR_ERR`, `SCRIPT_VAR_ERRNUM`, `SCRIPT_DIT`, `PRIORITY`) VA"& _ 
                "LUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COM_PORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SIMULATION", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRIORITY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `DEVICE` SET `DEVICE_IDENT` = ?, `DEVICE_ADDRESS` = ?, `DEVICE_NAME` = ?, "& _ 
                "`DEVICE_TYPE` = ?, `BAUDRATE` = ?, `COM_PORT` = ?, `IP_ADDRESS` = ?, `SIMULATION"& _ 
                "` = ?, `SCRIPT_VAR_SRC` = ?, `SCRIPT_VAR_LST` = ?, `SCRIPT_VAR_ERR` = ?, `SCRIPT"& _ 
                "_VAR_ERRNUM` = ?, `SCRIPT_DIT` = ?, `PRIORITY` = ? WHERE ((`DEVICE_IDENT` = ?) A"& _ 
                "ND ((? = 1 AND `DEVICE_ADDRESS` IS NULL) OR (`DEVICE_ADDRESS` = ?)) AND ((? = 1 "& _ 
                "AND `DEVICE_NAME` IS NULL) OR (`DEVICE_NAME` = ?)) AND ((? = 1 AND `DEVICE_TYPE`"& _ 
                " IS NULL) OR (`DEVICE_TYPE` = ?)) AND ((? = 1 AND `BAUDRATE` IS NULL) OR (`BAUDR"& _ 
                "ATE` = ?)) AND ((? = 1 AND `COM_PORT` IS NULL) OR (`COM_PORT` = ?)) AND ((? = 1 "& _ 
                "AND `IP_ADDRESS` IS NULL) OR (`IP_ADDRESS` = ?)) AND ((? = 1 AND `SIMULATION` IS"& _ 
                " NULL) OR (`SIMULATION` = ?)) AND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`"& _ 
                "SCRIPT_VAR_ERRNUM` = ?)) AND ((? = 1 AND `PRIORITY` IS NULL) OR (`PRIORITY` = ?)"& _ 
                "))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COM_PORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SIMULATION", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRIORITY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_TYPE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BAUDRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BAUDRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COM_PORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COM_PORT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COM_PORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_IP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_IP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SIMULATION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SIMULATION", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SIMULATION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRIORITY", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEVICE_IDENT, DEVICE_ADDRESS, DEVICE_NAME, DEVICE_TYPE, BAUDRATE, COM_PORT"& _ 
                ", IP_ADDRESS, SIMULATION, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT"& _ 
                "_VAR_ERRNUM, SCRIPT_DIT, PRIORITY FROM DEVICE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.DEVICEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.DEVICEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.DEVICEDataTable = New _840002P1DataSet.DEVICEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.DEVICEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DEVICE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DEVICE_IDENT As String, ByVal Original_DEVICE_ADDRESS As String, ByVal Original_DEVICE_NAME As String, ByVal Original_DEVICE_TYPE As String, ByVal Original_BAUDRATE As Integer, ByVal Original_COM_PORT As Short, ByVal Original_IP_ADDRESS As String, ByVal Original_SIMULATION As Boolean, ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer), ByVal Original_PRIORITY As Boolean) As Integer
            If (Original_DEVICE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_DEVICE_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DEVICE_ADDRESS,String)
            End If
            If (Original_DEVICE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DEVICE_NAME,String)
            End If
            If (Original_DEVICE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_TYPE")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DEVICE_TYPE,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_BAUDRATE,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COM_PORT,Short)
            If (Original_IP_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_IP_ADDRESS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SIMULATION,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PRIORITY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DEVICE_IDENT As String, ByVal DEVICE_ADDRESS As String, ByVal DEVICE_NAME As String, ByVal DEVICE_TYPE As String, ByVal BAUDRATE As Integer, ByVal COM_PORT As Short, ByVal IP_ADDRESS As String, ByVal SIMULATION As Boolean, ByVal SCRIPT_VAR_SRC As String, ByVal SCRIPT_VAR_LST As String, ByVal SCRIPT_VAR_ERR As String, ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer), ByVal SCRIPT_DIT As String, ByVal PRIORITY As Boolean) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (DEVICE_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DEVICE_ADDRESS,String)
            End If
            If (DEVICE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DEVICE_NAME,String)
            End If
            If (DEVICE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_TYPE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DEVICE_TYPE,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(BAUDRATE,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(COM_PORT,Short)
            If (IP_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IP_ADDRESS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(SIMULATION,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(SCRIPT_DIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(PRIORITY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal DEVICE_ADDRESS As String,  _
                    ByVal DEVICE_NAME As String,  _
                    ByVal DEVICE_TYPE As String,  _
                    ByVal BAUDRATE As Integer,  _
                    ByVal COM_PORT As Short,  _
                    ByVal IP_ADDRESS As String,  _
                    ByVal SIMULATION As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal PRIORITY As Boolean,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_DEVICE_ADDRESS As String,  _
                    ByVal Original_DEVICE_NAME As String,  _
                    ByVal Original_DEVICE_TYPE As String,  _
                    ByVal Original_BAUDRATE As Integer,  _
                    ByVal Original_COM_PORT As Short,  _
                    ByVal Original_IP_ADDRESS As String,  _
                    ByVal Original_SIMULATION As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PRIORITY As Boolean) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (DEVICE_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DEVICE_ADDRESS,String)
            End If
            If (DEVICE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DEVICE_NAME,String)
            End If
            If (DEVICE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DEVICE_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BAUDRATE,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(COM_PORT,Short)
            If (IP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IP_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SIMULATION,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(SCRIPT_DIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PRIORITY,Boolean)
            If (Original_DEVICE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_DEVICE_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DEVICE_ADDRESS,String)
            End If
            If (Original_DEVICE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DEVICE_NAME,String)
            End If
            If (Original_DEVICE_TYPE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_TYPE")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DEVICE_TYPE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_BAUDRATE,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_COM_PORT,Short)
            If (Original_IP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_IP_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SIMULATION,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_PRIORITY,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_ADDRESS As String,  _
                    ByVal DEVICE_NAME As String,  _
                    ByVal DEVICE_TYPE As String,  _
                    ByVal BAUDRATE As Integer,  _
                    ByVal COM_PORT As Short,  _
                    ByVal IP_ADDRESS As String,  _
                    ByVal SIMULATION As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal PRIORITY As Boolean,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_DEVICE_ADDRESS As String,  _
                    ByVal Original_DEVICE_NAME As String,  _
                    ByVal Original_DEVICE_TYPE As String,  _
                    ByVal Original_BAUDRATE As Integer,  _
                    ByVal Original_COM_PORT As Short,  _
                    ByVal Original_IP_ADDRESS As String,  _
                    ByVal Original_SIMULATION As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PRIORITY As Boolean) As Integer
            Return Me.Update(Original_DEVICE_IDENT, DEVICE_ADDRESS, DEVICE_NAME, DEVICE_TYPE, BAUDRATE, COM_PORT, IP_ADDRESS, SIMULATION, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT, PRIORITY, Original_DEVICE_IDENT, Original_DEVICE_ADDRESS, Original_DEVICE_NAME, Original_DEVICE_TYPE, Original_BAUDRATE, Original_COM_PORT, Original_IP_ADDRESS, Original_SIMULATION, Original_SCRIPT_VAR_ERRNUM, Original_PRIORITY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINRECIPE_HEADERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINRECIPE_HEADER"
            tableMapping.ColumnMappings.Add("MAINRECIPE_IDENT", "MAINRECIPE_IDENT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_NAME", "MAINRECIPE_NAME")
            tableMapping.ColumnMappings.Add("MAINRECIPE_CREATE_DATE", "MAINRECIPE_CREATE_DATE")
            tableMapping.ColumnMappings.Add("MAINRECIPE_CHANGE_DATE", "MAINRECIPE_CHANGE_DATE")
            tableMapping.ColumnMappings.Add("MAINRECIPE_ENABLED", "MAINRECIPE_ENABLED")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TOTAL", "MAINRECIPE_TOTAL")
            tableMapping.ColumnMappings.Add("MAINRECIPE_USER", "MAINRECIPE_USER")
            tableMapping.ColumnMappings.Add("MAINRECIPE_UNIT", "MAINRECIPE_UNIT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_DECIMALPOINT", "MAINRECIPE_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_MAXRESOLU_DP", "MAINRECIPE_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("MAINRECIPE_MINBATCH", "MAINRECIPE_MINBATCH")
            tableMapping.ColumnMappings.Add("MAINRECIPE_MAXBATCH", "MAINRECIPE_MAXBATCH")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT", "MAINRECIPE_TIMEOUT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_TIMEOUT_ENABLED", "MAINRECIPE_TIMEOUT_ENABLED")
            tableMapping.ColumnMappings.Add("~ORDER_IDENT", "~ORDER_IDENT")
            tableMapping.ColumnMappings.Add("~CUSTOMER_IDENT", "~CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("~PROD_NUM", "~PROD_NUM")
            tableMapping.ColumnMappings.Add("~PROD_SETPOINT", "~PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("~START_SYNCHRON", "~START_SYNCHRON")
            tableMapping.ColumnMappings.Add("~PROD_CYCLE", "~PROD_CYCLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINRECIPE_HEADER` WHERE ((`MAINRECIPE_IDENT` = ?) AND ((? = 1 AND `"& _ 
                "MAINRECIPE_NAME` IS NULL) OR (`MAINRECIPE_NAME` = ?)) AND ((? = 1 AND `MAINRECIP"& _ 
                "E_CREATE_DATE` IS NULL) OR (`MAINRECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND `MAIN"& _ 
                "RECIPE_CHANGE_DATE` IS NULL) OR (`MAINRECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND "& _ 
                "`MAINRECIPE_ENABLED` IS NULL) OR (`MAINRECIPE_ENABLED` = ?)) AND ((? = 1 AND `MA"& _ 
                "INRECIPE_TOTAL` IS NULL) OR (`MAINRECIPE_TOTAL` = ?)) AND ((? = 1 AND `MAINRECIP"& _ 
                "E_USER` IS NULL) OR (`MAINRECIPE_USER` = ?)) AND ((? = 1 AND `MAINRECIPE_UNIT` I"& _ 
                "S NULL) OR (`MAINRECIPE_UNIT` = ?)) AND ((? = 1 AND `MAINRECIPE_DECIMALPOINT` IS"& _ 
                " NULL) OR (`MAINRECIPE_DECIMALPOINT` = ?)) AND ((? = 1 AND `MAINRECIPE_MAXRESOLU"& _ 
                "_DP` IS NULL) OR (`MAINRECIPE_MAXRESOLU_DP` = ?)) AND ((? = 1 AND `MAINRECIPE_MI"& _ 
                "NBATCH` IS NULL) OR (`MAINRECIPE_MINBATCH` = ?)) AND ((? = 1 AND `MAINRECIPE_MAX"& _ 
                "BATCH` IS NULL) OR (`MAINRECIPE_MAXBATCH` = ?)) AND ((? = 1 AND `MAINRECIPE_TIME"& _ 
                "OUT` IS NULL) OR (`MAINRECIPE_TIMEOUT` = ?)) AND ((? = 1 AND `MAINRECIPE_TIMEOUT"& _ 
                "_ENABLED` IS NULL) OR (`MAINRECIPE_TIMEOUT_ENABLED` = ?)) AND ((? = 1 AND `~ORDE"& _ 
                "R_IDENT` IS NULL) OR (`~ORDER_IDENT` = ?)) AND ((? = 1 AND `~CUSTOMER_IDENT` IS "& _ 
                "NULL) OR (`~CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `~PROD_NUM` IS NULL) OR (`~PRO"& _ 
                "D_NUM` = ?)) AND ((? = 1 AND `~PROD_SETPOINT` IS NULL) OR (`~PROD_SETPOINT` = ?)"& _ 
                ") AND ((? = 1 AND `~START_SYNCHRON` IS NULL) OR (`~START_SYNCHRON` = ?)) AND ((?"& _ 
                " = 1 AND `~PROD_CYCLE` IS NULL) OR (`~PROD_CYCLE` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINRECIPE_HEADER` (`MAINRECIPE_IDENT`, `MAINRECIPE_NAME`, `MAINRECI"& _ 
                "PE_CREATE_DATE`, `MAINRECIPE_CHANGE_DATE`, `MAINRECIPE_ENABLED`, `MAINRECIPE_TOT"& _ 
                "AL`, `MAINRECIPE_USER`, `MAINRECIPE_UNIT`, `MAINRECIPE_DECIMALPOINT`, `MAINRECIP"& _ 
                "E_MAXRESOLU_DP`, `MAINRECIPE_MINBATCH`, `MAINRECIPE_MAXBATCH`, `MAINRECIPE_TIMEO"& _ 
                "UT`, `MAINRECIPE_TIMEOUT_ENABLED`, `~ORDER_IDENT`, `~CUSTOMER_IDENT`, `~PROD_NUM"& _ 
                "`, `~PROD_SETPOINT`, `~START_SYNCHRON`, `~PROD_CYCLE`) VALUES (?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINRECIPE_HEADER` SET `MAINRECIPE_IDENT` = ?, `MAINRECIPE_NAME` = ?, `MA"& _ 
                "INRECIPE_CREATE_DATE` = ?, `MAINRECIPE_CHANGE_DATE` = ?, `MAINRECIPE_ENABLED` = "& _ 
                "?, `MAINRECIPE_TOTAL` = ?, `MAINRECIPE_USER` = ?, `MAINRECIPE_UNIT` = ?, `MAINRE"& _ 
                "CIPE_DECIMALPOINT` = ?, `MAINRECIPE_MAXRESOLU_DP` = ?, `MAINRECIPE_MINBATCH` = ?"& _ 
                ", `MAINRECIPE_MAXBATCH` = ?, `MAINRECIPE_TIMEOUT` = ?, `MAINRECIPE_TIMEOUT_ENABL"& _ 
                "ED` = ?, `~ORDER_IDENT` = ?, `~CUSTOMER_IDENT` = ?, `~PROD_NUM` = ?, `~PROD_SETP"& _ 
                "OINT` = ?, `~START_SYNCHRON` = ?, `~PROD_CYCLE` = ? WHERE ((`MAINRECIPE_IDENT` ="& _ 
                " ?) AND ((? = 1 AND `MAINRECIPE_NAME` IS NULL) OR (`MAINRECIPE_NAME` = ?)) AND ("& _ 
                "(? = 1 AND `MAINRECIPE_CREATE_DATE` IS NULL) OR (`MAINRECIPE_CREATE_DATE` = ?)) "& _ 
                "AND ((? = 1 AND `MAINRECIPE_CHANGE_DATE` IS NULL) OR (`MAINRECIPE_CHANGE_DATE` ="& _ 
                " ?)) AND ((? = 1 AND `MAINRECIPE_ENABLED` IS NULL) OR (`MAINRECIPE_ENABLED` = ?)"& _ 
                ") AND ((? = 1 AND `MAINRECIPE_TOTAL` IS NULL) OR (`MAINRECIPE_TOTAL` = ?)) AND ("& _ 
                "(? = 1 AND `MAINRECIPE_USER` IS NULL) OR (`MAINRECIPE_USER` = ?)) AND ((? = 1 AN"& _ 
                "D `MAINRECIPE_UNIT` IS NULL) OR (`MAINRECIPE_UNIT` = ?)) AND ((? = 1 AND `MAINRE"& _ 
                "CIPE_DECIMALPOINT` IS NULL) OR (`MAINRECIPE_DECIMALPOINT` = ?)) AND ((? = 1 AND "& _ 
                "`MAINRECIPE_MAXRESOLU_DP` IS NULL) OR (`MAINRECIPE_MAXRESOLU_DP` = ?)) AND ((? ="& _ 
                " 1 AND `MAINRECIPE_MINBATCH` IS NULL) OR (`MAINRECIPE_MINBATCH` = ?)) AND ((? = "& _ 
                "1 AND `MAINRECIPE_MAXBATCH` IS NULL) OR (`MAINRECIPE_MAXBATCH` = ?)) AND ((? = 1"& _ 
                " AND `MAINRECIPE_TIMEOUT` IS NULL) OR (`MAINRECIPE_TIMEOUT` = ?)) AND ((? = 1 AN"& _ 
                "D `MAINRECIPE_TIMEOUT_ENABLED` IS NULL) OR (`MAINRECIPE_TIMEOUT_ENABLED` = ?)) A"& _ 
                "ND ((? = 1 AND `~ORDER_IDENT` IS NULL) OR (`~ORDER_IDENT` = ?)) AND ((? = 1 AND "& _ 
                "`~CUSTOMER_IDENT` IS NULL) OR (`~CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `~PROD_NU"& _ 
                "M` IS NULL) OR (`~PROD_NUM` = ?)) AND ((? = 1 AND `~PROD_SETPOINT` IS NULL) OR ("& _ 
                "`~PROD_SETPOINT` = ?)) AND ((? = 1 AND `~START_SYNCHRON` IS NULL) OR (`~START_SY"& _ 
                "NCHRON` = ?)) AND ((? = 1 AND `~PROD_CYCLE` IS NULL) OR (`~PROD_CYCLE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MINBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MINBATCH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_MAXBATCH", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_MAXBATCH", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~START_SYNCHRON", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~START_SYNCHRON", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINRECIPE_IDENT, MAINRECIPE_NAME, MAINRECIPE_CREATE_DATE, MAINRECIPE_CHAN"& _ 
                "GE_DATE, MAINRECIPE_ENABLED, MAINRECIPE_TOTAL, MAINRECIPE_USER, MAINRECIPE_UNIT,"& _ 
                " MAINRECIPE_DECIMALPOINT, MAINRECIPE_MAXRESOLU_DP, MAINRECIPE_MINBATCH, MAINRECI"& _ 
                "PE_MAXBATCH, MAINRECIPE_TIMEOUT, MAINRECIPE_TIMEOUT_ENABLED, [~ORDER_IDENT], [~C"& _ 
                "USTOMER_IDENT], [~PROD_NUM], [~PROD_SETPOINT], [~START_SYNCHRON], [~PROD_CYCLE] "& _ 
                "FROM MAINRECIPE_HEADER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.MAINRECIPE_HEADERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.MAINRECIPE_HEADERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.MAINRECIPE_HEADERDataTable = New _840002P1DataSet.MAINRECIPE_HEADERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.MAINRECIPE_HEADERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINRECIPE_HEADER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_MAINRECIPE_NAME As String,  _
                    ByVal Original_MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_ENABLED As Boolean,  _
                    ByVal Original_MAINRECIPE_TOTAL As Double,  _
                    ByVal Original_MAINRECIPE_USER As String,  _
                    ByVal Original_MAINRECIPE_UNIT As String,  _
                    ByVal Original_MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__START_SYNCHRON As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MAINRECIPE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MAINRECIPE_CREATE_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MAINRECIPE_CHANGE_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MAINRECIPE_ENABLED,Boolean)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MAINRECIPE_TOTAL,Double)
            If (Original_MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MAINRECIPE_USER,String)
            End If
            If (Original_MAINRECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MAINRECIPE_UNIT,String)
            End If
            If (Original_MAINRECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MAINRECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_MAINRECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MINBATCH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MAINRECIPE_MINBATCH.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MAXBATCH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_MAINRECIPE_MAXBATCH.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (_Original__ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(_Original__ORDER_IDENT,String)
            End If
            If (_Original__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(_Original__CUSTOMER_IDENT,String)
            End If
            If (_Original__PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(_Original__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (_Original__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(_Original__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(36).Value = CType(_Original__START_SYNCHRON,Boolean)
            If (_Original__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(_Original__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal MAINRECIPE_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TOTAL As Double,  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_UNIT As String,  _
                    ByVal MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __START_SYNCHRON As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAINRECIPE_CREATE_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(MAINRECIPE_CHANGE_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(MAINRECIPE_ENABLED,Boolean)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MAINRECIPE_TOTAL,Double)
            If (MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAINRECIPE_USER,String)
            End If
            If (MAINRECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAINRECIPE_UNIT,String)
            End If
            If (MAINRECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAINRECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MAINRECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MINBATCH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MAINRECIPE_MINBATCH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MAXBATCH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MAINRECIPE_MAXBATCH.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (__ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(__ORDER_IDENT,String)
            End If
            If (__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(__CUSTOMER_IDENT,String)
            End If
            If (__PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(__START_SYNCHRON,Boolean)
            If (__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal MAINRECIPE_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TOTAL As Double,  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_UNIT As String,  _
                    ByVal MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __START_SYNCHRON As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_MAINRECIPE_NAME As String,  _
                    ByVal Original_MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_ENABLED As Boolean,  _
                    ByVal Original_MAINRECIPE_TOTAL As Double,  _
                    ByVal Original_MAINRECIPE_USER As String,  _
                    ByVal Original_MAINRECIPE_UNIT As String,  _
                    ByVal Original_MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__START_SYNCHRON As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAINRECIPE_CREATE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MAINRECIPE_CHANGE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MAINRECIPE_ENABLED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MAINRECIPE_TOTAL,Double)
            If (MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAINRECIPE_USER,String)
            End If
            If (MAINRECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAINRECIPE_UNIT,String)
            End If
            If (MAINRECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAINRECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MAINRECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MINBATCH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(MAINRECIPE_MINBATCH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_MAXBATCH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MAINRECIPE_MAXBATCH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (__ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__ORDER_IDENT,String)
            End If
            If (__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__CUSTOMER_IDENT,String)
            End If
            If (__PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__START_SYNCHRON,Boolean)
            If (__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_MAINRECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_MAINRECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_MAINRECIPE_CREATE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_MAINRECIPE_CHANGE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_MAINRECIPE_ENABLED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_MAINRECIPE_TOTAL,Double)
            If (Original_MAINRECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_MAINRECIPE_USER,String)
            End If
            If (Original_MAINRECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_MAINRECIPE_UNIT,String)
            End If
            If (Original_MAINRECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_MAINRECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_MAINRECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MINBATCH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_MAINRECIPE_MINBATCH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_MAXBATCH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_MAINRECIPE_MAXBATCH.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_MAINRECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_MAINRECIPE_TIMEOUT_ENABLED,Boolean)
            If (_Original__ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(_Original__ORDER_IDENT,String)
            End If
            If (_Original__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(_Original__CUSTOMER_IDENT,String)
            End If
            If (_Original__PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(_Original__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (_Original__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(_Original__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(_Original__START_SYNCHRON,Boolean)
            If (_Original__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(_Original__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPE_NAME As String,  _
                    ByVal MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal MAINRECIPE_ENABLED As Boolean,  _
                    ByVal MAINRECIPE_TOTAL As Double,  _
                    ByVal MAINRECIPE_USER As String,  _
                    ByVal MAINRECIPE_UNIT As String,  _
                    ByVal MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __START_SYNCHRON As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_MAINRECIPE_NAME As String,  _
                    ByVal Original_MAINRECIPE_CREATE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_MAINRECIPE_ENABLED As Boolean,  _
                    ByVal Original_MAINRECIPE_TOTAL As Double,  _
                    ByVal Original_MAINRECIPE_USER As String,  _
                    ByVal Original_MAINRECIPE_UNIT As String,  _
                    ByVal Original_MAINRECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAINRECIPE_MINBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_MAXBATCH As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAINRECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__START_SYNCHRON As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_MAINRECIPE_IDENT, MAINRECIPE_NAME, MAINRECIPE_CREATE_DATE, MAINRECIPE_CHANGE_DATE, MAINRECIPE_ENABLED, MAINRECIPE_TOTAL, MAINRECIPE_USER, MAINRECIPE_UNIT, MAINRECIPE_DECIMALPOINT, MAINRECIPE_MAXRESOLU_DP, MAINRECIPE_MINBATCH, MAINRECIPE_MAXBATCH, MAINRECIPE_TIMEOUT, MAINRECIPE_TIMEOUT_ENABLED, __ORDER_IDENT, __CUSTOMER_IDENT, __PROD_NUM, __PROD_SETPOINT, __START_SYNCHRON, __PROD_CYCLE, Original_MAINRECIPE_IDENT, Original_MAINRECIPE_NAME, Original_MAINRECIPE_CREATE_DATE, Original_MAINRECIPE_CHANGE_DATE, Original_MAINRECIPE_ENABLED, Original_MAINRECIPE_TOTAL, Original_MAINRECIPE_USER, Original_MAINRECIPE_UNIT, Original_MAINRECIPE_DECIMALPOINT, Original_MAINRECIPE_MAXRESOLU_DP, Original_MAINRECIPE_MINBATCH, Original_MAINRECIPE_MAXBATCH, Original_MAINRECIPE_TIMEOUT, Original_MAINRECIPE_TIMEOUT_ENABLED, _Original__ORDER_IDENT, _Original__CUSTOMER_IDENT, _Original__PROD_NUM, _Original__PROD_SETPOINT, _Original__START_SYNCHRON, _Original__PROD_CYCLE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINRECIPE_LINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINRECIPE_LINE"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("MAINRECIPE_IDENT", "MAINRECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_SETPOINT", "RECIPE_SETPOINT")
            tableMapping.ColumnMappings.Add("RECIPE_CALCULATE_SETPOINT", "RECIPE_CALCULATE_SETPOINT")
            tableMapping.ColumnMappings.Add("RECIPE_CYCLE", "RECIPE_CYCLE")
            tableMapping.ColumnMappings.Add("RECIPE_PRIORITY", "RECIPE_PRIORITY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINRECIPE_LINE` WHERE ((`PRODLINE_IDENT` = ?) AND (`MAINRECIPE_IDEN"& _ 
                "T` = ?) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT` = ?)) AND ((?"& _ 
                " = 1 AND `RECIPE_SETPOINT` IS NULL) OR (`RECIPE_SETPOINT` = ?)) AND ((? = 1 AND "& _ 
                "`RECIPE_CALCULATE_SETPOINT` IS NULL) OR (`RECIPE_CALCULATE_SETPOINT` = ?)) AND ("& _ 
                "(? = 1 AND `RECIPE_CYCLE` IS NULL) OR (`RECIPE_CYCLE` = ?)) AND ((? = 1 AND `REC"& _ 
                "IPE_PRIORITY` IS NULL) OR (`RECIPE_PRIORITY` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINRECIPE_LINE` (`PRODLINE_IDENT`, `MAINRECIPE_IDENT`, `RECIPE_IDEN"& _ 
                "T`, `RECIPE_SETPOINT`, `RECIPE_CALCULATE_SETPOINT`, `RECIPE_CYCLE`, `RECIPE_PRIO"& _ 
                "RITY`) VALUES (?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINRECIPE_LINE` SET `PRODLINE_IDENT` = ?, `MAINRECIPE_IDENT` = ?, `RECIP"& _ 
                "E_IDENT` = ?, `RECIPE_SETPOINT` = ?, `RECIPE_CALCULATE_SETPOINT` = ?, `RECIPE_CY"& _ 
                "CLE` = ?, `RECIPE_PRIORITY` = ? WHERE ((`PRODLINE_IDENT` = ?) AND (`MAINRECIPE_I"& _ 
                "DENT` = ?) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT` = ?)) AND "& _ 
                "((? = 1 AND `RECIPE_SETPOINT` IS NULL) OR (`RECIPE_SETPOINT` = ?)) AND ((? = 1 A"& _ 
                "ND `RECIPE_CALCULATE_SETPOINT` IS NULL) OR (`RECIPE_CALCULATE_SETPOINT` = ?)) AN"& _ 
                "D ((? = 1 AND `RECIPE_CYCLE` IS NULL) OR (`RECIPE_CYCLE` = ?)) AND ((? = 1 AND `"& _ 
                "RECIPE_PRIORITY` IS NULL) OR (`RECIPE_PRIORITY` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_PRIORITY", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_PRIORITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, MAINRECIPE_IDENT, RECIPE_IDENT, RECIPE_SETPOINT, RECIPE_CA"& _ 
                "LCULATE_SETPOINT, RECIPE_CYCLE, RECIPE_PRIORITY FROM MAINRECIPE_LINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.MAINRECIPE_LINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.MAINRECIPE_LINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.MAINRECIPE_LINEDataTable = New _840002P1DataSet.MAINRECIPE_LINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.MAINRECIPE_LINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINRECIPE_LINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAINRECIPE_IDENT As String, ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_RECIPE_CALCULATE_SETPOINT As Boolean, ByVal Original_RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_RECIPE_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_RECIPE_CALCULATE_SETPOINT,Boolean)
            If (Original_RECIPE_CYCLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RECIPE_CYCLE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal MAINRECIPE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal RECIPE_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RECIPE_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RECIPE_CALCULATE_SETPOINT,Boolean)
            If (RECIPE_CYCLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(RECIPE_CYCLE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRODLINE_IDENT As String, ByVal MAINRECIPE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal RECIPE_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short), ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAINRECIPE_IDENT As String, ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_RECIPE_CALCULATE_SETPOINT As Boolean, ByVal Original_RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RECIPE_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RECIPE_CALCULATE_SETPOINT,Boolean)
            If (RECIPE_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RECIPE_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_RECIPE_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RECIPE_CALCULATE_SETPOINT,Boolean)
            If (Original_RECIPE_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_RECIPE_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_PRIORITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_RECIPE_PRIORITY.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RECIPE_IDENT As String, ByVal RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal RECIPE_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal RECIPE_PRIORITY As Global.System.Nullable(Of Short), ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAINRECIPE_IDENT As String, ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_RECIPE_CALCULATE_SETPOINT As Boolean, ByVal Original_RECIPE_CYCLE As Global.System.Nullable(Of Short), ByVal Original_RECIPE_PRIORITY As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_MAINRECIPE_IDENT, RECIPE_IDENT, RECIPE_SETPOINT, RECIPE_CALCULATE_SETPOINT, RECIPE_CYCLE, RECIPE_PRIORITY, Original_PRODLINE_IDENT, Original_MAINRECIPE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_SETPOINT, Original_RECIPE_CALCULATE_SETPOINT, Original_RECIPE_CYCLE, Original_RECIPE_PRIORITY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINRECIPEPLAN_HEADERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINRECIPEPLAN_HEADER"
            tableMapping.ColumnMappings.Add("MAINRECIPEPLAN_IDENT", "MAINRECIPEPLAN_IDENT")
            tableMapping.ColumnMappings.Add("MAINRECIPEPLAN_NAME", "MAINRECIPEPLAN_NAME")
            tableMapping.ColumnMappings.Add("PLAN_USER", "PLAN_USER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINRECIPEPLAN_HEADER` WHERE ((`MAINRECIPEPLAN_IDENT` = ?) AND ((? ="& _ 
                " 1 AND `MAINRECIPEPLAN_NAME` IS NULL) OR (`MAINRECIPEPLAN_NAME` = ?)) AND ((? = "& _ 
                "1 AND `PLAN_USER` IS NULL) OR (`PLAN_USER` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINRECIPEPLAN_HEADER` (`MAINRECIPEPLAN_IDENT`, `MAINRECIPEPLAN_NAME"& _ 
                "`, `PLAN_USER`) VALUES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINRECIPEPLAN_HEADER` SET `MAINRECIPEPLAN_IDENT` = ?, `MAINRECIPEPLAN_NA"& _ 
                "ME` = ?, `PLAN_USER` = ? WHERE ((`MAINRECIPEPLAN_IDENT` = ?) AND ((? = 1 AND `MA"& _ 
                "INRECIPEPLAN_NAME` IS NULL) OR (`MAINRECIPEPLAN_NAME` = ?)) AND ((? = 1 AND `PLA"& _ 
                "N_USER` IS NULL) OR (`PLAN_USER` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINRECIPEPLAN_IDENT, MAINRECIPEPLAN_NAME, PLAN_USER FROM MAINRECIPEPLAN_H"& _ 
                "EADER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.MAINRECIPEPLAN_HEADERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.MAINRECIPEPLAN_HEADERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.MAINRECIPEPLAN_HEADERDataTable = New _840002P1DataSet.MAINRECIPEPLAN_HEADERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.MAINRECIPEPLAN_HEADERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINRECIPEPLAN_HEADER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MAINRECIPEPLAN_IDENT As String, ByVal Original_MAINRECIPEPLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            If (Original_MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINRECIPEPLAN_IDENT,String)
            End If
            If (Original_MAINRECIPEPLAN_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MAINRECIPEPLAN_NAME,String)
            End If
            If (Original_PLAN_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MAINRECIPEPLAN_IDENT As String, ByVal MAINRECIPEPLAN_NAME As String, ByVal PLAN_USER As String) As Integer
            If (MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINRECIPEPLAN_IDENT,String)
            End If
            If (MAINRECIPEPLAN_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPEPLAN_NAME,String)
            End If
            If (PLAN_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MAINRECIPEPLAN_IDENT As String, ByVal MAINRECIPEPLAN_NAME As String, ByVal PLAN_USER As String, ByVal Original_MAINRECIPEPLAN_IDENT As String, ByVal Original_MAINRECIPEPLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            If (MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINRECIPEPLAN_IDENT,String)
            End If
            If (MAINRECIPEPLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPEPLAN_NAME,String)
            End If
            If (PLAN_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLAN_USER,String)
            End If
            If (Original_MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MAINRECIPEPLAN_IDENT,String)
            End If
            If (Original_MAINRECIPEPLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MAINRECIPEPLAN_NAME,String)
            End If
            If (Original_PLAN_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MAINRECIPEPLAN_NAME As String, ByVal PLAN_USER As String, ByVal Original_MAINRECIPEPLAN_IDENT As String, ByVal Original_MAINRECIPEPLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            Return Me.Update(Original_MAINRECIPEPLAN_IDENT, MAINRECIPEPLAN_NAME, PLAN_USER, Original_MAINRECIPEPLAN_IDENT, Original_MAINRECIPEPLAN_NAME, Original_PLAN_USER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MAINRECIPEPLAN_LINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MAINRECIPEPLAN_LINE"
            tableMapping.ColumnMappings.Add("MAINRECIPEPLAN_IDENT", "MAINRECIPEPLAN_IDENT")
            tableMapping.ColumnMappings.Add("MAINRECIPEPLAN_LINE", "MAINRECIPEPLAN_LINE")
            tableMapping.ColumnMappings.Add("MAINRECIPE_IDENT", "MAINRECIPE_IDENT")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("PROD_CYCLE", "PROD_CYCLE")
            tableMapping.ColumnMappings.Add("PLAN_STATUS", "PLAN_STATUS")
            tableMapping.ColumnMappings.Add("START_DATETIME", "START_DATETIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MAINRECIPEPLAN_LINE` WHERE ((`MAINRECIPEPLAN_IDENT` = ?) AND (`MAINR"& _ 
                "ECIPEPLAN_LINE` = ?) AND ((? = 1 AND `MAINRECIPE_IDENT` IS NULL) OR (`MAINRECIPE"& _ 
                "_IDENT` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND"& _ 
                " ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AN"& _ 
                "D `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NU"& _ 
                "LL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNI"& _ 
                "T` = ?)) AND ((? = 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = "& _ 
                "1 AND `PLAN_STATUS` IS NULL) OR (`PLAN_STATUS` = ?)) AND ((? = 1 AND `START_DATE"& _ 
                "TIME` IS NULL) OR (`START_DATETIME` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MAINRECIPEPLAN_LINE` (`MAINRECIPEPLAN_IDENT`, `MAINRECIPEPLAN_LINE`,"& _ 
                " `MAINRECIPE_IDENT`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_NUM`, `PROD_SETPOINT"& _ 
                "`, `PROD_UNIT`, `PROD_CYCLE`, `PLAN_STATUS`, `START_DATETIME`) VALUES (?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MAINRECIPEPLAN_LINE` SET `MAINRECIPEPLAN_IDENT` = ?, `MAINRECIPEPLAN_LINE"& _ 
                "` = ?, `MAINRECIPE_IDENT` = ?, `ORDER_IDENT` = ?, `CUSTOMER_IDENT` = ?, `PROD_NU"& _ 
                "M` = ?, `PROD_SETPOINT` = ?, `PROD_UNIT` = ?, `PROD_CYCLE` = ?, `PLAN_STATUS` = "& _ 
                "?, `START_DATETIME` = ? WHERE ((`MAINRECIPEPLAN_IDENT` = ?) AND (`MAINRECIPEPLAN"& _ 
                "_LINE` = ?) AND ((? = 1 AND `MAINRECIPE_IDENT` IS NULL) OR (`MAINRECIPE_IDENT` ="& _ 
                " ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ((? = 1 "& _ 
                "AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `PROD_N"& _ 
                "UM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`"& _ 
                "PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) "& _ 
                "AND ((? = 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND `PL"& _ 
                "AN_STATUS` IS NULL) OR (`PLAN_STATUS` = ?)) AND ((? = 1 AND `START_DATETIME` IS "& _ 
                "NULL) OR (`START_DATETIME` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPEPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPEPLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPEPLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAINRECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MAINRECIPEPLAN_IDENT, MAINRECIPEPLAN_LINE, MAINRECIPE_IDENT, ORDER_IDENT, "& _ 
                "CUSTOMER_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_CYCLE, PLAN_STATUS, STA"& _ 
                "RT_DATETIME FROM MAINRECIPEPLAN_LINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.MAINRECIPEPLAN_LINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.MAINRECIPEPLAN_LINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.MAINRECIPEPLAN_LINEDataTable = New _840002P1DataSet.MAINRECIPEPLAN_LINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.MAINRECIPEPLAN_LINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MAINRECIPEPLAN_LINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MAINRECIPEPLAN_IDENT As String, ByVal Original_MAINRECIPEPLAN_LINE As Short, ByVal Original_MAINRECIPE_IDENT As String, ByVal Original_ORDER_IDENT As String, ByVal Original_CUSTOMER_IDENT As String, ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer), ByVal Original_PROD_SETPOINT As Double, ByVal Original_PROD_UNIT As String, ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short), ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short), ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (Original_MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MAINRECIPEPLAN_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MAINRECIPEPLAN_LINE,Short)
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_CYCLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MAINRECIPEPLAN_IDENT As String, ByVal MAINRECIPEPLAN_LINE As Short, ByVal MAINRECIPE_IDENT As String, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Global.System.Nullable(Of Integer), ByVal PROD_SETPOINT As Double, ByVal PROD_UNIT As String, ByVal PROD_CYCLE As Global.System.Nullable(Of Short), ByVal PLAN_STATUS As Global.System.Nullable(Of Short), ByVal START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MAINRECIPEPLAN_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAINRECIPEPLAN_LINE,Short)
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_CYCLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PLAN_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPEPLAN_IDENT As String,  _
                    ByVal MAINRECIPEPLAN_LINE As Short,  _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPEPLAN_IDENT As String,  _
                    ByVal Original_MAINRECIPEPLAN_LINE As Short,  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MAINRECIPEPLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAINRECIPEPLAN_LINE,Short)
            If (MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAINRECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROD_UNIT,String)
            End If
            If (PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (PLAN_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_MAINRECIPEPLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPEPLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_MAINRECIPEPLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MAINRECIPEPLAN_LINE,Short)
            If (Original_MAINRECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAINRECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MAINRECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_PROD_UNIT,String)
            End If
            If (Original_PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAINRECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_MAINRECIPEPLAN_IDENT As String,  _
                    ByVal Original_MAINRECIPEPLAN_LINE As Short,  _
                    ByVal Original_MAINRECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_MAINRECIPEPLAN_IDENT, Original_MAINRECIPEPLAN_LINE, MAINRECIPE_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_CYCLE, PLAN_STATUS, START_DATETIME, Original_MAINRECIPEPLAN_IDENT, Original_MAINRECIPEPLAN_LINE, Original_MAINRECIPE_IDENT, Original_ORDER_IDENT, Original_CUSTOMER_IDENT, Original_PROD_NUM, Original_PROD_SETPOINT, Original_PROD_UNIT, Original_PROD_CYCLE, Original_PLAN_STATUS, Original_START_DATETIME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MATERIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MATERIAL"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("MAT_IDENT", "MAT_IDENT")
            tableMapping.ColumnMappings.Add("MAT_NAME", "MAT_NAME")
            tableMapping.ColumnMappings.Add("MAT_BATCH_MODE", "MAT_BATCH_MODE")
            tableMapping.ColumnMappings.Add("WP_IDENT", "WP_IDENT")
            tableMapping.ColumnMappings.Add("MAT_SPM_OUTADR", "MAT_SPM_OUTADR")
            tableMapping.ColumnMappings.Add("MAT_SPM_INADR", "MAT_SPM_INADR")
            tableMapping.ColumnMappings.Add("MAT_PROD_REPORT", "MAT_PROD_REPORT")
            tableMapping.ColumnMappings.Add("MAT_BATCH_REPORT", "MAT_BATCH_REPORT")
            tableMapping.ColumnMappings.Add("MAT_USER", "MAT_USER")
            tableMapping.ColumnMappings.Add("MAT_PARA", "MAT_PARA")
            tableMapping.ColumnMappings.Add("MAT_PRESET", "MAT_PRESET")
            tableMapping.ColumnMappings.Add("MAT_OVERSHOOT", "MAT_OVERSHOOT")
            tableMapping.ColumnMappings.Add("MAT_POS_TOL", "MAT_POS_TOL")
            tableMapping.ColumnMappings.Add("MAT_NEG_TOL", "MAT_NEG_TOL")
            tableMapping.ColumnMappings.Add("MAT_FLOWRATE", "MAT_FLOWRATE")
            tableMapping.ColumnMappings.Add("MAT_CALMINGTIME", "MAT_CALMINGTIME")
            tableMapping.ColumnMappings.Add("MAT_RESTART_MODE", "MAT_RESTART_MODE")
            tableMapping.ColumnMappings.Add("MAT_DISCHARGETIME", "MAT_DISCHARGETIME")
            tableMapping.ColumnMappings.Add("MAT_A1_UNIT", "MAT_A1_UNIT")
            tableMapping.ColumnMappings.Add("MAT_A1_MAX", "MAT_A1_MAX")
            tableMapping.ColumnMappings.Add("MAT_A1_MIN", "MAT_A1_MIN")
            tableMapping.ColumnMappings.Add("MAT_STOCK", "MAT_STOCK")
            tableMapping.ColumnMappings.Add("MAT_MIN_STOCK", "MAT_MIN_STOCK")
            tableMapping.ColumnMappings.Add("MAT_IDENT_CORR", "MAT_IDENT_CORR")
            tableMapping.ColumnMappings.Add("MAT_IDENT_CORR_VAL", "MAT_IDENT_CORR_VAL")
            tableMapping.ColumnMappings.Add("MAT_POS_TOL_UNIT", "MAT_POS_TOL_UNIT")
            tableMapping.ColumnMappings.Add("MAT_NEG_TOL_UNIT", "MAT_NEG_TOL_UNIT")
            tableMapping.ColumnMappings.Add("MAT_ORDER", "MAT_ORDER")
            tableMapping.ColumnMappings.Add("MAT_DELIVERY", "MAT_DELIVERY")
            tableMapping.ColumnMappings.Add("MAT_LOT", "MAT_LOT")
            tableMapping.ColumnMappings.Add("MAT_DATETIME", "MAT_DATETIME")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_COD_SRC", "SCRIPT_VAR_COD_SRC")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_COD_LST", "SCRIPT_VAR_COD_LST")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_COD_ERR", "SCRIPT_VAR_COD_ERR")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_COD_ERRNUM", "SCRIPT_VAR_COD_ERRNUM")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            tableMapping.ColumnMappings.Add("SCRIPT_CIC", "SCRIPT_CIC")
            tableMapping.ColumnMappings.Add("LABEL_PRINT", "LABEL_PRINT")
            tableMapping.ColumnMappings.Add("LABEL_COPIES", "LABEL_COPIES")
            tableMapping.ColumnMappings.Add("LABEL_NAME", "LABEL_NAME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MATERIAL` WHERE ((`PRODLINE_IDENT` = ?) AND (`MAT_IDENT` = ?) AND (("& _ 
                "? = 1 AND `MAT_NAME` IS NULL) OR (`MAT_NAME` = ?)) AND ((? = 1 AND `MAT_BATCH_MO"& _ 
                "DE` IS NULL) OR (`MAT_BATCH_MODE` = ?)) AND ((? = 1 AND `WP_IDENT` IS NULL) OR ("& _ 
                "`WP_IDENT` = ?)) AND ((? = 1 AND `MAT_SPM_OUTADR` IS NULL) OR (`MAT_SPM_OUTADR` "& _ 
                "= ?)) AND ((? = 1 AND `MAT_SPM_INADR` IS NULL) OR (`MAT_SPM_INADR` = ?)) AND ((?"& _ 
                " = 1 AND `MAT_PROD_REPORT` IS NULL) OR (`MAT_PROD_REPORT` = ?)) AND ((? = 1 AND "& _ 
                "`MAT_BATCH_REPORT` IS NULL) OR (`MAT_BATCH_REPORT` = ?)) AND ((? = 1 AND `MAT_US"& _ 
                "ER` IS NULL) OR (`MAT_USER` = ?)) AND ((? = 1 AND `MAT_PARA` IS NULL) OR (`MAT_P"& _ 
                "ARA` = ?)) AND ((? = 1 AND `MAT_PRESET` IS NULL) OR (`MAT_PRESET` = ?)) AND ((? "& _ 
                "= 1 AND `MAT_OVERSHOOT` IS NULL) OR (`MAT_OVERSHOOT` = ?)) AND ((? = 1 AND `MAT_"& _ 
                "POS_TOL` IS NULL) OR (`MAT_POS_TOL` = ?)) AND ((? = 1 AND `MAT_NEG_TOL` IS NULL)"& _ 
                " OR (`MAT_NEG_TOL` = ?)) AND ((? = 1 AND `MAT_FLOWRATE` IS NULL) OR (`MAT_FLOWRA"& _ 
                "TE` = ?)) AND ((? = 1 AND `MAT_CALMINGTIME` IS NULL) OR (`MAT_CALMINGTIME` = ?))"& _ 
                " AND ((? = 1 AND `MAT_RESTART_MODE` IS NULL) OR (`MAT_RESTART_MODE` = ?)) AND (("& _ 
                "? = 1 AND `MAT_DISCHARGETIME` IS NULL) OR (`MAT_DISCHARGETIME` = ?)) AND ((? = 1"& _ 
                " AND `MAT_A1_UNIT` IS NULL) OR (`MAT_A1_UNIT` = ?)) AND ((? = 1 AND `MAT_A1_MAX`"& _ 
                " IS NULL) OR (`MAT_A1_MAX` = ?)) AND ((? = 1 AND `MAT_A1_MIN` IS NULL) OR (`MAT_"& _ 
                "A1_MIN` = ?)) AND ((? = 1 AND `MAT_STOCK` IS NULL) OR (`MAT_STOCK` = ?)) AND ((?"& _ 
                " = 1 AND `MAT_MIN_STOCK` IS NULL) OR (`MAT_MIN_STOCK` = ?)) AND ((? = 1 AND `MAT"& _ 
                "_IDENT_CORR` IS NULL) OR (`MAT_IDENT_CORR` = ?)) AND ((? = 1 AND `MAT_IDENT_CORR"& _ 
                "_VAL` IS NULL) OR (`MAT_IDENT_CORR_VAL` = ?)) AND ((? = 1 AND `MAT_POS_TOL_UNIT`"& _ 
                " IS NULL) OR (`MAT_POS_TOL_UNIT` = ?)) AND ((? = 1 AND `MAT_NEG_TOL_UNIT` IS NUL"& _ 
                "L) OR (`MAT_NEG_TOL_UNIT` = ?)) AND ((? = 1 AND `MAT_ORDER` IS NULL) OR (`MAT_OR"& _ 
                "DER` = ?)) AND ((? = 1 AND `MAT_DELIVERY` IS NULL) OR (`MAT_DELIVERY` = ?)) AND "& _ 
                "((? = 1 AND `MAT_LOT` IS NULL) OR (`MAT_LOT` = ?)) AND ((? = 1 AND `MAT_DATETIME"& _ 
                "` IS NULL) OR (`MAT_DATETIME` = ?)) AND ((? = 1 AND `SCRIPT_VAR_COD_ERRNUM` IS N"& _ 
                "ULL) OR (`SCRIPT_VAR_COD_ERRNUM` = ?)) AND ((? = 1 AND `LABEL_PRINT` IS NULL) OR"& _ 
                " (`LABEL_PRINT` = ?)) AND ((? = 1 AND `LABEL_COPIES` IS NULL) OR (`LABEL_COPIES`"& _ 
                " = ?)) AND ((? = 1 AND `LABEL_NAME` IS NULL) OR (`LABEL_NAME` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ORDER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_LOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MATERIAL` (`PRODLINE_IDENT`, `MAT_IDENT`, `MAT_NAME`, `MAT_BATCH_MOD"& _ 
                "E`, `WP_IDENT`, `MAT_SPM_OUTADR`, `MAT_SPM_INADR`, `MAT_PROD_REPORT`, `MAT_BATCH"& _ 
                "_REPORT`, `MAT_USER`, `MAT_PARA`, `MAT_PRESET`, `MAT_OVERSHOOT`, `MAT_POS_TOL`, "& _ 
                "`MAT_NEG_TOL`, `MAT_FLOWRATE`, `MAT_CALMINGTIME`, `MAT_RESTART_MODE`, `MAT_DISCH"& _ 
                "ARGETIME`, `MAT_A1_UNIT`, `MAT_A1_MAX`, `MAT_A1_MIN`, `MAT_STOCK`, `MAT_MIN_STOC"& _ 
                "K`, `MAT_IDENT_CORR`, `MAT_IDENT_CORR_VAL`, `MAT_POS_TOL_UNIT`, `MAT_NEG_TOL_UNI"& _ 
                "T`, `MAT_ORDER`, `MAT_DELIVERY`, `MAT_LOT`, `MAT_DATETIME`, `SCRIPT_VAR_COD_SRC`"& _ 
                ", `SCRIPT_VAR_COD_LST`, `SCRIPT_VAR_COD_ERR`, `SCRIPT_VAR_COD_ERRNUM`, `SCRIPT_D"& _ 
                "IT`, `SCRIPT_CIC`, `LABEL_PRINT`, `LABEL_COPIES`, `LABEL_NAME`) VALUES (?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_CIC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_CIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MATERIAL` SET `PRODLINE_IDENT` = ?, `MAT_IDENT` = ?, `MAT_NAME` = ?, `MAT"& _ 
                "_BATCH_MODE` = ?, `WP_IDENT` = ?, `MAT_SPM_OUTADR` = ?, `MAT_SPM_INADR` = ?, `MA"& _ 
                "T_PROD_REPORT` = ?, `MAT_BATCH_REPORT` = ?, `MAT_USER` = ?, `MAT_PARA` = ?, `MAT"& _ 
                "_PRESET` = ?, `MAT_OVERSHOOT` = ?, `MAT_POS_TOL` = ?, `MAT_NEG_TOL` = ?, `MAT_FL"& _ 
                "OWRATE` = ?, `MAT_CALMINGTIME` = ?, `MAT_RESTART_MODE` = ?, `MAT_DISCHARGETIME` "& _ 
                "= ?, `MAT_A1_UNIT` = ?, `MAT_A1_MAX` = ?, `MAT_A1_MIN` = ?, `MAT_STOCK` = ?, `MA"& _ 
                "T_MIN_STOCK` = ?, `MAT_IDENT_CORR` = ?, `MAT_IDENT_CORR_VAL` = ?, `MAT_POS_TOL_U"& _ 
                "NIT` = ?, `MAT_NEG_TOL_UNIT` = ?, `MAT_ORDER` = ?, `MAT_DELIVERY` = ?, `MAT_LOT`"& _ 
                " = ?, `MAT_DATETIME` = ?, `SCRIPT_VAR_COD_SRC` = ?, `SCRIPT_VAR_COD_LST` = ?, `S"& _ 
                "CRIPT_VAR_COD_ERR` = ?, `SCRIPT_VAR_COD_ERRNUM` = ?, `SCRIPT_DIT` = ?, `SCRIPT_C"& _ 
                "IC` = ?, `LABEL_PRINT` = ?, `LABEL_COPIES` = ?, `LABEL_NAME` = ? WHERE ((`PRODLI"& _ 
                "NE_IDENT` = ?) AND (`MAT_IDENT` = ?) AND ((? = 1 AND `MAT_NAME` IS NULL) OR (`MA"& _ 
                "T_NAME` = ?)) AND ((? = 1 AND `MAT_BATCH_MODE` IS NULL) OR (`MAT_BATCH_MODE` = ?"& _ 
                ")) AND ((? = 1 AND `WP_IDENT` IS NULL) OR (`WP_IDENT` = ?)) AND ((? = 1 AND `MAT"& _ 
                "_SPM_OUTADR` IS NULL) OR (`MAT_SPM_OUTADR` = ?)) AND ((? = 1 AND `MAT_SPM_INADR`"& _ 
                " IS NULL) OR (`MAT_SPM_INADR` = ?)) AND ((? = 1 AND `MAT_PROD_REPORT` IS NULL) O"& _ 
                "R (`MAT_PROD_REPORT` = ?)) AND ((? = 1 AND `MAT_BATCH_REPORT` IS NULL) OR (`MAT_"& _ 
                "BATCH_REPORT` = ?)) AND ((? = 1 AND `MAT_USER` IS NULL) OR (`MAT_USER` = ?)) AND"& _ 
                " ((? = 1 AND `MAT_PARA` IS NULL) OR (`MAT_PARA` = ?)) AND ((? = 1 AND `MAT_PRESE"& _ 
                "T` IS NULL) OR (`MAT_PRESET` = ?)) AND ((? = 1 AND `MAT_OVERSHOOT` IS NULL) OR ("& _ 
                "`MAT_OVERSHOOT` = ?)) AND ((? = 1 AND `MAT_POS_TOL` IS NULL) OR (`MAT_POS_TOL` ="& _ 
                " ?)) AND ((? = 1 AND `MAT_NEG_TOL` IS NULL) OR (`MAT_NEG_TOL` = ?)) AND ((? = 1 "& _ 
                "AND `MAT_FLOWRATE` IS NULL) OR (`MAT_FLOWRATE` = ?)) AND ((? = 1 AND `MAT_CALMIN"& _ 
                "GTIME` IS NULL) OR (`MAT_CALMINGTIME` = ?)) AND ((? = 1 AND `MAT_RESTART_MODE` I"& _ 
                "S NULL) OR (`MAT_RESTART_MODE` = ?)) AND ((? = 1 AND `MAT_DISCHARGETIME` IS NULL"& _ 
                ") OR (`MAT_DISCHARGETIME` = ?)) AND ((? = 1 AND `MAT_A1_UNIT` IS NULL) OR (`MAT_"& _ 
                "A1_UNIT` = ?)) AND ((? = 1 AND `MAT_A1_MAX` IS NULL) OR (`MAT_A1_MAX` = ?)) AND "& _ 
                "((? = 1 AND `MAT_A1_MIN` IS NULL) OR (`MAT_A1_MIN` = ?)) AND ((? = 1 AND `MAT_ST"& _ 
                "OCK` IS NULL) OR (`MAT_STOCK` = ?)) AND ((? = 1 AND `MAT_MIN_STOCK` IS NULL) OR "& _ 
                "(`MAT_MIN_STOCK` = ?)) AND ((? = 1 AND `MAT_IDENT_CORR` IS NULL) OR (`MAT_IDENT_"& _ 
                "CORR` = ?)) AND ((? = 1 AND `MAT_IDENT_CORR_VAL` IS NULL) OR (`MAT_IDENT_CORR_VA"& _ 
                "L` = ?)) AND ((? = 1 AND `MAT_POS_TOL_UNIT` IS NULL) OR (`MAT_POS_TOL_UNIT` = ?)"& _ 
                ") AND ((? = 1 AND `MAT_NEG_TOL_UNIT` IS NULL) OR (`MAT_NEG_TOL_UNIT` = ?)) AND ("& _ 
                "(? = 1 AND `MAT_ORDER` IS NULL) OR (`MAT_ORDER` = ?)) AND ((? = 1 AND `MAT_DELIV"& _ 
                "ERY` IS NULL) OR (`MAT_DELIVERY` = ?)) AND ((? = 1 AND `MAT_LOT` IS NULL) OR (`M"& _ 
                "AT_LOT` = ?)) AND ((? = 1 AND `MAT_DATETIME` IS NULL) OR (`MAT_DATETIME` = ?)) A"& _ 
                "ND ((? = 1 AND `SCRIPT_VAR_COD_ERRNUM` IS NULL) OR (`SCRIPT_VAR_COD_ERRNUM` = ?)"& _ 
                ") AND ((? = 1 AND `LABEL_PRINT` IS NULL) OR (`LABEL_PRINT` = ?)) AND ((? = 1 AND"& _ 
                " `LABEL_COPIES` IS NULL) OR (`LABEL_COPIES` = ?)) AND ((? = 1 AND `LABEL_NAME` I"& _ 
                "S NULL) OR (`LABEL_NAME` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_CIC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_CIC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_MODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_OUTADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_OUTADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SPM_INADR", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SPM_INADR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PROD_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PROD_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_BATCH_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_BATCH_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_PRESET", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_PRESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_OVERSHOOT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_OVERSHOOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_FLOWRATE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_FLOWRATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALMINGTIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALMINGTIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_RESTART_MODE", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_RESTART_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DISCHARGETIME", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DISCHARGETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MAX", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_A1_MIN", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_A1_MIN", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_STOCK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_MIN_STOCK", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_MIN_STOCK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT_CORR", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT_CORR_VAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT_CORR_VAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_POS_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_POS_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_NEG_TOL_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_NEG_TOL_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ORDER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ORDER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DELIVERY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DELIVERY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_LOT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_LOT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_LOT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_COD_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_COD_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_COPIES", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_COPIES", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, MAT_IDENT, MAT_NAME, MAT_BATCH_MODE, WP_IDENT, MAT_SPM_OUT"& _ 
                "ADR, MAT_SPM_INADR, MAT_PROD_REPORT, MAT_BATCH_REPORT, MAT_USER, MAT_PARA, MAT_P"& _ 
                "RESET, MAT_OVERSHOOT, MAT_POS_TOL, MAT_NEG_TOL, MAT_FLOWRATE, MAT_CALMINGTIME, M"& _ 
                "AT_RESTART_MODE, MAT_DISCHARGETIME, MAT_A1_UNIT, MAT_A1_MAX, MAT_A1_MIN, MAT_STO"& _ 
                "CK, MAT_MIN_STOCK, MAT_IDENT_CORR, MAT_IDENT_CORR_VAL, MAT_POS_TOL_UNIT, MAT_NEG"& _ 
                "_TOL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SCRIPT_VAR_COD_SRC, S"& _ 
                "CRIPT_VAR_COD_LST, SCRIPT_VAR_COD_ERR, SCRIPT_VAR_COD_ERRNUM, SCRIPT_DIT, SCRIPT"& _ 
                "_CIC, LABEL_PRINT, LABEL_COPIES, LABEL_NAME FROM MATERIAL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.MATERIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.MATERIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.MATERIALDataTable = New _840002P1DataSet.MATERIALDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.MATERIALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MATERIAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_USER As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_IDENT_CORR As String,  _
                    ByVal Original_MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MAT_NAME,String)
            End If
            If (Original_MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_BATCH_MODE")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MAT_BATCH_MODE,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WP_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_WP_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MAT_SPM_OUTADR,Short)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_MAT_SPM_INADR,Short)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_MAT_PROD_REPORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_MAT_BATCH_REPORT,Boolean)
            If (Original_MAT_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_MAT_USER,String)
            End If
            If (Original_MAT_PARA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_MAT_PARA,String)
            End If
            If (Original_MAT_PRESET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_MAT_PRESET.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_MAT_RESTART_MODE.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_MAT_A1_UNIT,String)
            End If
            If (Original_MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_STOCK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_MAT_STOCK.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_MIN_STOCK.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_MAT_MIN_STOCK.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_IDENT_CORR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_MAT_IDENT_CORR,String)
            End If
            If (Original_MAT_IDENT_CORR_VAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_MAT_IDENT_CORR_VAL.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_MAT_POS_TOL_UNIT,String)
            End If
            If (Original_MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_MAT_NEG_TOL_UNIT,String)
            End If
            If (Original_MAT_ORDER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_MAT_ORDER,String)
            End If
            If (Original_MAT_DELIVERY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_MAT_DELIVERY,String)
            End If
            If (Original_MAT_LOT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_MAT_LOT,String)
            End If
            If (Original_MAT_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_SCRIPT_VAR_COD_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_SCRIPT_VAR_COD_ERRNUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_LABEL_PRINT,Boolean)
            If (Original_LABEL_COPIES.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_LABEL_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_USER As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_IDENT_CORR As String,  _
                    ByVal MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal SCRIPT_VAR_COD_LST As String,  _
                    ByVal SCRIPT_VAR_COD_ERR As String,  _
                    ByVal SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MAT_NAME,String)
            End If
            If (MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_BATCH_MODE")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MAT_BATCH_MODE,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WP_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(WP_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MAT_SPM_OUTADR,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAT_SPM_INADR,Short)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAT_PROD_REPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAT_BATCH_REPORT,Boolean)
            If (MAT_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MAT_USER,String)
            End If
            If (MAT_PARA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MAT_PARA,String)
            End If
            If (MAT_PRESET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MAT_PRESET.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MAT_RESTART_MODE.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MAT_A1_UNIT,String)
            End If
            If (MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MAT_STOCK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(MAT_STOCK.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MAT_MIN_STOCK.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(MAT_MIN_STOCK.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MAT_IDENT_CORR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(MAT_IDENT_CORR,String)
            End If
            If (MAT_IDENT_CORR_VAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(MAT_IDENT_CORR_VAL.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(MAT_POS_TOL_UNIT,String)
            End If
            If (MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(MAT_NEG_TOL_UNIT,String)
            End If
            If (MAT_ORDER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(MAT_ORDER,String)
            End If
            If (MAT_DELIVERY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(MAT_DELIVERY,String)
            End If
            If (MAT_LOT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(MAT_LOT,String)
            End If
            If (MAT_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_VAR_COD_SRC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(SCRIPT_VAR_COD_SRC,String)
            End If
            If (SCRIPT_VAR_COD_LST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(SCRIPT_VAR_COD_LST,String)
            End If
            If (SCRIPT_VAR_COD_ERR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(SCRIPT_VAR_COD_ERR,String)
            End If
            If (SCRIPT_VAR_COD_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(SCRIPT_VAR_COD_ERRNUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(SCRIPT_DIT,String)
            End If
            If (SCRIPT_CIC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(SCRIPT_CIC,String)
            End If
            Me.Adapter.InsertCommand.Parameters(38).Value = CType(LABEL_PRINT,Boolean)
            If (LABEL_COPIES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (LABEL_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_USER As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_IDENT_CORR As String,  _
                    ByVal MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal SCRIPT_VAR_COD_LST As String,  _
                    ByVal SCRIPT_VAR_COD_ERR As String,  _
                    ByVal SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_USER As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_IDENT_CORR As String,  _
                    ByVal Original_MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MAT_NAME,String)
            End If
            If (MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_BATCH_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MAT_BATCH_MODE,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("WP_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(WP_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MAT_SPM_OUTADR,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAT_SPM_INADR,Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAT_PROD_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAT_BATCH_REPORT,Boolean)
            If (MAT_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MAT_USER,String)
            End If
            If (MAT_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(MAT_PARA,String)
            End If
            If (MAT_PRESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MAT_PRESET.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MAT_RESTART_MODE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MAT_A1_UNIT,String)
            End If
            If (MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (MAT_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(MAT_STOCK.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (MAT_MIN_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(MAT_MIN_STOCK.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (MAT_IDENT_CORR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(MAT_IDENT_CORR,String)
            End If
            If (MAT_IDENT_CORR_VAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(MAT_IDENT_CORR_VAL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(MAT_POS_TOL_UNIT,String)
            End If
            If (MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(MAT_NEG_TOL_UNIT,String)
            End If
            If (MAT_ORDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(MAT_ORDER,String)
            End If
            If (MAT_DELIVERY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(MAT_DELIVERY,String)
            End If
            If (MAT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(MAT_LOT,String)
            End If
            If (MAT_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_VAR_COD_SRC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(SCRIPT_VAR_COD_SRC,String)
            End If
            If (SCRIPT_VAR_COD_LST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(SCRIPT_VAR_COD_LST,String)
            End If
            If (SCRIPT_VAR_COD_ERR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(SCRIPT_VAR_COD_ERR,String)
            End If
            If (SCRIPT_VAR_COD_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(SCRIPT_VAR_COD_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(SCRIPT_DIT,String)
            End If
            If (SCRIPT_CIC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(SCRIPT_CIC,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(LABEL_PRINT,Boolean)
            If (LABEL_COPIES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (LABEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(LABEL_NAME,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_MAT_NAME,String)
            End If
            If (Original_MAT_BATCH_MODE Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_BATCH_MODE")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_MAT_BATCH_MODE,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_WP_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_WP_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_MAT_SPM_OUTADR,Short)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_MAT_SPM_INADR,Short)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_MAT_PROD_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_MAT_BATCH_REPORT,Boolean)
            If (Original_MAT_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_MAT_USER,String)
            End If
            If (Original_MAT_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_MAT_PARA,String)
            End If
            If (Original_MAT_PRESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_MAT_PRESET.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_OVERSHOOT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_MAT_OVERSHOOT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_MAT_POS_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_NEG_TOL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_MAT_NEG_TOL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_FLOWRATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_MAT_FLOWRATE.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_CALMINGTIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_MAT_CALMINGTIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_RESTART_MODE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_MAT_RESTART_MODE.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_DISCHARGETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_MAT_DISCHARGETIME.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_MAT_A1_UNIT,String)
            End If
            If (Original_MAT_A1_MAX.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_MAT_A1_MAX.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_A1_MIN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_MAT_A1_MIN.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_MAT_STOCK.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_MIN_STOCK.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_MAT_MIN_STOCK.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_IDENT_CORR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_MAT_IDENT_CORR,String)
            End If
            If (Original_MAT_IDENT_CORR_VAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_MAT_IDENT_CORR_VAL.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_POS_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_MAT_POS_TOL_UNIT,String)
            End If
            If (Original_MAT_NEG_TOL_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_MAT_NEG_TOL_UNIT,String)
            End If
            If (Original_MAT_ORDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_MAT_ORDER,String)
            End If
            If (Original_MAT_DELIVERY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_MAT_DELIVERY,String)
            End If
            If (Original_MAT_LOT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_MAT_LOT,String)
            End If
            If (Original_MAT_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_MAT_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_SCRIPT_VAR_COD_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_SCRIPT_VAR_COD_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_LABEL_PRINT,Boolean)
            If (Original_LABEL_COPIES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_LABEL_COPIES.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_LABEL_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_LABEL_NAME,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MAT_NAME As String,  _
                    ByVal MAT_BATCH_MODE As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal MAT_SPM_OUTADR As Short,  _
                    ByVal MAT_SPM_INADR As Short,  _
                    ByVal MAT_PROD_REPORT As Boolean,  _
                    ByVal MAT_BATCH_REPORT As Boolean,  _
                    ByVal MAT_USER As String,  _
                    ByVal MAT_PARA As String,  _
                    ByVal MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal MAT_A1_UNIT As String,  _
                    ByVal MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal MAT_IDENT_CORR As String,  _
                    ByVal MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal MAT_POS_TOL_UNIT As String,  _
                    ByVal MAT_NEG_TOL_UNIT As String,  _
                    ByVal MAT_ORDER As String,  _
                    ByVal MAT_DELIVERY As String,  _
                    ByVal MAT_LOT As String,  _
                    ByVal MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal SCRIPT_VAR_COD_SRC As String,  _
                    ByVal SCRIPT_VAR_COD_LST As String,  _
                    ByVal SCRIPT_VAR_COD_ERR As String,  _
                    ByVal SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal SCRIPT_CIC As String,  _
                    ByVal LABEL_PRINT As Boolean,  _
                    ByVal LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal LABEL_NAME As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_NAME As String,  _
                    ByVal Original_MAT_BATCH_MODE As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_MAT_SPM_OUTADR As Short,  _
                    ByVal Original_MAT_SPM_INADR As Short,  _
                    ByVal Original_MAT_PROD_REPORT As Boolean,  _
                    ByVal Original_MAT_BATCH_REPORT As Boolean,  _
                    ByVal Original_MAT_USER As String,  _
                    ByVal Original_MAT_PARA As String,  _
                    ByVal Original_MAT_PRESET As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_OVERSHOOT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_NEG_TOL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_FLOWRATE As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_CALMINGTIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_RESTART_MODE As Global.System.Nullable(Of Byte),  _
                    ByVal Original_MAT_DISCHARGETIME As Global.System.Nullable(Of Short),  _
                    ByVal Original_MAT_A1_UNIT As String,  _
                    ByVal Original_MAT_A1_MAX As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_A1_MIN As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_MIN_STOCK As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_IDENT_CORR As String,  _
                    ByVal Original_MAT_IDENT_CORR_VAL As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_POS_TOL_UNIT As String,  _
                    ByVal Original_MAT_NEG_TOL_UNIT As String,  _
                    ByVal Original_MAT_ORDER As String,  _
                    ByVal Original_MAT_DELIVERY As String,  _
                    ByVal Original_MAT_LOT As String,  _
                    ByVal Original_MAT_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_SCRIPT_VAR_COD_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LABEL_PRINT As Boolean,  _
                    ByVal Original_LABEL_COPIES As Global.System.Nullable(Of Short),  _
                    ByVal Original_LABEL_NAME As String) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_MAT_IDENT, MAT_NAME, MAT_BATCH_MODE, WP_IDENT, MAT_SPM_OUTADR, MAT_SPM_INADR, MAT_PROD_REPORT, MAT_BATCH_REPORT, MAT_USER, MAT_PARA, MAT_PRESET, MAT_OVERSHOOT, MAT_POS_TOL, MAT_NEG_TOL, MAT_FLOWRATE, MAT_CALMINGTIME, MAT_RESTART_MODE, MAT_DISCHARGETIME, MAT_A1_UNIT, MAT_A1_MAX, MAT_A1_MIN, MAT_STOCK, MAT_MIN_STOCK, MAT_IDENT_CORR, MAT_IDENT_CORR_VAL, MAT_POS_TOL_UNIT, MAT_NEG_TOL_UNIT, MAT_ORDER, MAT_DELIVERY, MAT_LOT, MAT_DATETIME, SCRIPT_VAR_COD_SRC, SCRIPT_VAR_COD_LST, SCRIPT_VAR_COD_ERR, SCRIPT_VAR_COD_ERRNUM, SCRIPT_DIT, SCRIPT_CIC, LABEL_PRINT, LABEL_COPIES, LABEL_NAME, Original_PRODLINE_IDENT, Original_MAT_IDENT, Original_MAT_NAME, Original_MAT_BATCH_MODE, Original_WP_IDENT, Original_MAT_SPM_OUTADR, Original_MAT_SPM_INADR, Original_MAT_PROD_REPORT, Original_MAT_BATCH_REPORT, Original_MAT_USER, Original_MAT_PARA, Original_MAT_PRESET, Original_MAT_OVERSHOOT, Original_MAT_POS_TOL, Original_MAT_NEG_TOL, Original_MAT_FLOWRATE, Original_MAT_CALMINGTIME, Original_MAT_RESTART_MODE, Original_MAT_DISCHARGETIME, Original_MAT_A1_UNIT, Original_MAT_A1_MAX, Original_MAT_A1_MIN, Original_MAT_STOCK, Original_MAT_MIN_STOCK, Original_MAT_IDENT_CORR, Original_MAT_IDENT_CORR_VAL, Original_MAT_POS_TOL_UNIT, Original_MAT_NEG_TOL_UNIT, Original_MAT_ORDER, Original_MAT_DELIVERY, Original_MAT_LOT, Original_MAT_DATETIME, Original_SCRIPT_VAR_COD_ERRNUM, Original_LABEL_PRINT, Original_LABEL_COPIES, Original_LABEL_NAME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PLAN_HEADERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PLAN_HEADER"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_IDENT", "PLAN_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_NAME", "PLAN_NAME")
            tableMapping.ColumnMappings.Add("PLAN_USER", "PLAN_USER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PLAN_HEADER` WHERE ((`PRODLINE_IDENT` = ?) AND (`PLAN_IDENT` = ?) AN"& _ 
                "D ((? = 1 AND `PLAN_NAME` IS NULL) OR (`PLAN_NAME` = ?)) AND ((? = 1 AND `PLAN_U"& _ 
                "SER` IS NULL) OR (`PLAN_USER` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PLAN_HEADER` (`PRODLINE_IDENT`, `PLAN_IDENT`, `PLAN_NAME`, `PLAN_USE"& _ 
                "R`) VALUES (?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PLAN_HEADER` SET `PRODLINE_IDENT` = ?, `PLAN_IDENT` = ?, `PLAN_NAME` = ?,"& _ 
                " `PLAN_USER` = ? WHERE ((`PRODLINE_IDENT` = ?) AND (`PLAN_IDENT` = ?) AND ((? = "& _ 
                "1 AND `PLAN_NAME` IS NULL) OR (`PLAN_NAME` = ?)) AND ((? = 1 AND `PLAN_USER` IS "& _ 
                "NULL) OR (`PLAN_USER` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, PLAN_IDENT, PLAN_NAME, PLAN_USER FROM PLAN_HEADER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.PLAN_HEADERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.PLAN_HEADERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.PLAN_HEADERDataTable = New _840002P1DataSet.PLAN_HEADERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.PLAN_HEADERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PLAN_HEADER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_PLAN_IDENT As String, ByVal Original_PLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLAN_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PLAN_IDENT,String)
            End If
            If (Original_PLAN_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PLAN_NAME,String)
            End If
            If (Original_PLAN_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String, ByVal PLAN_NAME As String, ByVal PLAN_USER As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLAN_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PLAN_IDENT,String)
            End If
            If (PLAN_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLAN_NAME,String)
            End If
            If (PLAN_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String, ByVal PLAN_NAME As String, ByVal PLAN_USER As String, ByVal Original_PRODLINE_IDENT As String, ByVal Original_PLAN_IDENT As String, ByVal Original_PLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PLAN_IDENT,String)
            End If
            If (PLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLAN_NAME,String)
            End If
            If (PLAN_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PLAN_USER,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PLAN_IDENT,String)
            End If
            If (Original_PLAN_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PLAN_NAME,String)
            End If
            If (Original_PLAN_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PLAN_USER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PLAN_NAME As String, ByVal PLAN_USER As String, ByVal Original_PRODLINE_IDENT As String, ByVal Original_PLAN_IDENT As String, ByVal Original_PLAN_NAME As String, ByVal Original_PLAN_USER As String) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_PLAN_IDENT, PLAN_NAME, PLAN_USER, Original_PRODLINE_IDENT, Original_PLAN_IDENT, Original_PLAN_NAME, Original_PLAN_USER)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PLAN_LINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PLAN_LINE"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_IDENT", "PLAN_IDENT")
            tableMapping.ColumnMappings.Add("PLAN_LINE", "PLAN_LINE")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("ORDER_IDENT", "ORDER_IDENT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT", "CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("PROD_NUM", "PROD_NUM")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT", "PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("PROD_UNIT", "PROD_UNIT")
            tableMapping.ColumnMappings.Add("PROD_PCAUTOSTART", "PROD_PCAUTOSTART")
            tableMapping.ColumnMappings.Add("PROD_CYCLE", "PROD_CYCLE")
            tableMapping.ColumnMappings.Add("PLAN_STATUS", "PLAN_STATUS")
            tableMapping.ColumnMappings.Add("START_DATETIME", "START_DATETIME")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PLAN_LINE` WHERE ((`PRODLINE_IDENT` = ?) AND (`PLAN_IDENT` = ?) AND "& _ 
                "(`PLAN_LINE` = ?) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECIPE_IDENT` = ?"& _ 
                ")) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) AND ((? = 1 AN"& _ 
                "D `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `PROD_NUM"& _ 
                "` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS NULL) OR (`PR"& _ 
                "OD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_UNIT` = ?)) AN"& _ 
                "D ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR (`PROD_PCAUTOSTART` = ?)) AND ((? ="& _ 
                " 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND `PLAN_STATUS"& _ 
                "` IS NULL) OR (`PLAN_STATUS` = ?)) AND ((? = 1 AND `START_DATETIME` IS NULL) OR "& _ 
                "(`START_DATETIME` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PLAN_LINE` (`PRODLINE_IDENT`, `PLAN_IDENT`, `PLAN_LINE`, `RECIPE_IDE"& _ 
                "NT`, `ORDER_IDENT`, `CUSTOMER_IDENT`, `PROD_NUM`, `PROD_SETPOINT`, `PROD_UNIT`, "& _ 
                "`PROD_PCAUTOSTART`, `PROD_CYCLE`, `PLAN_STATUS`, `START_DATETIME`) VALUES (?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PLAN_LINE` SET `PRODLINE_IDENT` = ?, `PLAN_IDENT` = ?, `PLAN_LINE` = ?, `"& _ 
                "RECIPE_IDENT` = ?, `ORDER_IDENT` = ?, `CUSTOMER_IDENT` = ?, `PROD_NUM` = ?, `PRO"& _ 
                "D_SETPOINT` = ?, `PROD_UNIT` = ?, `PROD_PCAUTOSTART` = ?, `PROD_CYCLE` = ?, `PLA"& _ 
                "N_STATUS` = ?, `START_DATETIME` = ? WHERE ((`PRODLINE_IDENT` = ?) AND (`PLAN_IDE"& _ 
                "NT` = ?) AND (`PLAN_LINE` = ?) AND ((? = 1 AND `RECIPE_IDENT` IS NULL) OR (`RECI"& _ 
                "PE_IDENT` = ?)) AND ((? = 1 AND `ORDER_IDENT` IS NULL) OR (`ORDER_IDENT` = ?)) A"& _ 
                "ND ((? = 1 AND `CUSTOMER_IDENT` IS NULL) OR (`CUSTOMER_IDENT` = ?)) AND ((? = 1 "& _ 
                "AND `PROD_NUM` IS NULL) OR (`PROD_NUM` = ?)) AND ((? = 1 AND `PROD_SETPOINT` IS "& _ 
                "NULL) OR (`PROD_SETPOINT` = ?)) AND ((? = 1 AND `PROD_UNIT` IS NULL) OR (`PROD_U"& _ 
                "NIT` = ?)) AND ((? = 1 AND `PROD_PCAUTOSTART` IS NULL) OR (`PROD_PCAUTOSTART` = "& _ 
                "?)) AND ((? = 1 AND `PROD_CYCLE` IS NULL) OR (`PROD_CYCLE` = ?)) AND ((? = 1 AND"& _ 
                " `PLAN_STATUS` IS NULL) OR (`PLAN_STATUS` = ?)) AND ((? = 1 AND `START_DATETIME`"& _ 
                " IS NULL) OR (`START_DATETIME` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PLAN_STATUS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PLAN_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_START_DATETIME", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "START_DATETIME", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, PLAN_IDENT, PLAN_LINE, RECIPE_IDENT, ORDER_IDENT, CUSTOMER"& _ 
                "_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_PCAUTOSTART, PROD_CYCLE, PLAN_S"& _ 
                "TATUS, START_DATETIME FROM PLAN_LINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.PLAN_LINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.PLAN_LINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.PLAN_LINEDataTable = New _840002P1DataSet.PLAN_LINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.PLAN_LINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PLAN_LINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_PLAN_IDENT As String, ByVal Original_PLAN_LINE As Short, ByVal Original_RECIPE_IDENT As String, ByVal Original_ORDER_IDENT As String, ByVal Original_CUSTOMER_IDENT As String, ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer), ByVal Original_PROD_SETPOINT As Double, ByVal Original_PROD_UNIT As String, ByVal Original_PROD_PCAUTOSTART As Boolean, ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short), ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short), ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLAN_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PLAN_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PROD_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_CYCLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_STATUS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal PLAN_IDENT As String, ByVal PLAN_LINE As Short, ByVal RECIPE_IDENT As String, ByVal ORDER_IDENT As String, ByVal CUSTOMER_IDENT As String, ByVal PROD_NUM As Global.System.Nullable(Of Integer), ByVal PROD_SETPOINT As Double, ByVal PROD_UNIT As String, ByVal PROD_PCAUTOSTART As Boolean, ByVal PROD_CYCLE As Global.System.Nullable(Of Short), ByVal PLAN_STATUS As Global.System.Nullable(Of Short), ByVal START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLAN_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PLAN_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROD_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_CYCLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PLAN_STATUS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PLAN_IDENT As String,  _
                    ByVal PLAN_LINE As Short,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PLAN_LINE,Short)
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RECIPE_IDENT,String)
            End If
            If (ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ORDER_IDENT,String)
            End If
            If (CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CUSTOMER_IDENT,String)
            End If
            If (PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PROD_SETPOINT,Double)
            If (PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROD_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PROD_PCAUTOSTART,Boolean)
            If (PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (PLAN_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_PLAN_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PLAN_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PLAN_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_PLAN_LINE,Short)
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ORDER_IDENT,String)
            End If
            If (Original_CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CUSTOMER_IDENT,String)
            End If
            If (Original_PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_PROD_SETPOINT,Double)
            If (Original_PROD_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROD_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_PROD_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_PROD_PCAUTOSTART,Boolean)
            If (Original_PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_PLAN_STATUS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_PLAN_STATUS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_START_DATETIME.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_START_DATETIME.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal ORDER_IDENT As String,  _
                    ByVal CUSTOMER_IDENT As String,  _
                    ByVal PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal PROD_SETPOINT As Double,  _
                    ByVal PROD_UNIT As String,  _
                    ByVal PROD_PCAUTOSTART As Boolean,  _
                    ByVal PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal START_DATETIME As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PLAN_IDENT As String,  _
                    ByVal Original_PLAN_LINE As Short,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_ORDER_IDENT As String,  _
                    ByVal Original_CUSTOMER_IDENT As String,  _
                    ByVal Original_PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROD_SETPOINT As Double,  _
                    ByVal Original_PROD_UNIT As String,  _
                    ByVal Original_PROD_PCAUTOSTART As Boolean,  _
                    ByVal Original_PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PLAN_STATUS As Global.System.Nullable(Of Short),  _
                    ByVal Original_START_DATETIME As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_PLAN_IDENT, Original_PLAN_LINE, RECIPE_IDENT, ORDER_IDENT, CUSTOMER_IDENT, PROD_NUM, PROD_SETPOINT, PROD_UNIT, PROD_PCAUTOSTART, PROD_CYCLE, PLAN_STATUS, START_DATETIME, Original_PRODLINE_IDENT, Original_PLAN_IDENT, Original_PLAN_LINE, Original_RECIPE_IDENT, Original_ORDER_IDENT, Original_CUSTOMER_IDENT, Original_PROD_NUM, Original_PROD_SETPOINT, Original_PROD_UNIT, Original_PROD_PCAUTOSTART, Original_PROD_CYCLE, Original_PLAN_STATUS, Original_START_DATETIME)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PR8400TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PR8400"
            tableMapping.ColumnMappings.Add("PR8400_MODE", "PR8400_MODE")
            tableMapping.ColumnMappings.Add("PRINT_MAINPRODREPORT", "PRINT_MAINPRODREPORT")
            tableMapping.ColumnMappings.Add("PRINT_MAINBATCHREPORT", "PRINT_MAINBATCHREPORT")
            tableMapping.ColumnMappings.Add("ORDER_IDENT_CAPTION_MAINREPORT", "ORDER_IDENT_CAPTION_MAINREPORT")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT_CAPTION_MAINREPORT", "CUSTOMER_IDENT_CAPTION_MAINREPORT")
            tableMapping.ColumnMappings.Add("HEADER1_MAINREPORT", "HEADER1_MAINREPORT")
            tableMapping.ColumnMappings.Add("HEADER2_MAINREPORT", "HEADER2_MAINREPORT")
            tableMapping.ColumnMappings.Add("LOG_MAINREPORT", "LOG_MAINREPORT")
            tableMapping.ColumnMappings.Add("LOG_MAINREPORT_DAYS", "LOG_MAINREPORT_DAYS")
            tableMapping.ColumnMappings.Add("MAINRECIPE_ENABLED", "MAINRECIPE_ENABLED")
            tableMapping.ColumnMappings.Add("MAINSEQUENCE_NUMBER", "MAINSEQUENCE_NUMBER")
            tableMapping.ColumnMappings.Add("PROD_RECIPE_TOTAL", "PROD_RECIPE_TOTAL")
            tableMapping.ColumnMappings.Add("MAINPROD_SETPOINT_%", "MAINPROD_SETPOINT_%")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PR8400` (`PR8400_MODE`, `PRINT_MAINPRODREPORT`, `PRINT_MAINBATCHREPO"& _ 
                "RT`, `ORDER_IDENT_CAPTION_MAINREPORT`, `CUSTOMER_IDENT_CAPTION_MAINREPORT`, `HEA"& _ 
                "DER1_MAINREPORT`, `HEADER2_MAINREPORT`, `LOG_MAINREPORT`, `LOG_MAINREPORT_DAYS`,"& _ 
                " `MAINRECIPE_ENABLED`, `MAINSEQUENCE_NUMBER`, `PROD_RECIPE_TOTAL`, `MAINPROD_SET"& _ 
                "POINT_%`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PR8400_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PR8400_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_MAINPRODREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_MAINPRODREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_MAINBATCHREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_MAINBATCHREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT_CAPTION_MAINREPORT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION_MAINREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT_CAPTION_MAINREPORT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION_MAINREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER1_MAINREPORT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1_MAINREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER2_MAINREPORT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2_MAINREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_MAINREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_MAINREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_MAINREPORT_DAYS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_MAINREPORT_DAYS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINRECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINRECIPE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINSEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINSEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAINPROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAINPROD_SETPOINT_%", Global.System.Data.DataRowVersion.Current, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PR8400_MODE, PRINT_MAINPRODREPORT, PRINT_MAINBATCHREPORT, ORDER_IDENT_CAPT"& _ 
                "ION_MAINREPORT, CUSTOMER_IDENT_CAPTION_MAINREPORT, HEADER1_MAINREPORT, HEADER2_M"& _ 
                "AINREPORT, LOG_MAINREPORT, LOG_MAINREPORT_DAYS, MAINRECIPE_ENABLED, MAINSEQUENCE"& _ 
                "_NUMBER, PROD_RECIPE_TOTAL, [MAINPROD_SETPOINT_%] FROM PR8400"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.PR8400DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.PR8400DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.PR8400DataTable = New _840002P1DataSet.PR8400DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.PR8400DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PR8400")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PR8400_MODE As Global.System.Nullable(Of Short), ByVal PRINT_MAINPRODREPORT As Boolean, ByVal PRINT_MAINBATCHREPORT As Boolean, ByVal ORDER_IDENT_CAPTION_MAINREPORT As String, ByVal CUSTOMER_IDENT_CAPTION_MAINREPORT As String, ByVal HEADER1_MAINREPORT As String, ByVal HEADER2_MAINREPORT As String, ByVal LOG_MAINREPORT As Boolean, ByVal LOG_MAINREPORT_DAYS As Global.System.Nullable(Of Short), ByVal MAINRECIPE_ENABLED As Boolean, ByVal MAINSEQUENCE_NUMBER As Global.System.Nullable(Of Integer), ByVal PROD_RECIPE_TOTAL As Boolean, ByVal _MAINPROD_SETPOINT__ As Boolean) As Integer
            If (PR8400_MODE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PR8400_MODE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRINT_MAINPRODREPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRINT_MAINBATCHREPORT,Boolean)
            If (ORDER_IDENT_CAPTION_MAINREPORT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ORDER_IDENT_CAPTION_MAINREPORT,String)
            End If
            If (CUSTOMER_IDENT_CAPTION_MAINREPORT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CUSTOMER_IDENT_CAPTION_MAINREPORT,String)
            End If
            If (HEADER1_MAINREPORT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(HEADER1_MAINREPORT,String)
            End If
            If (HEADER2_MAINREPORT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(HEADER2_MAINREPORT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(LOG_MAINREPORT,Boolean)
            If (LOG_MAINREPORT_DAYS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LOG_MAINREPORT_DAYS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(MAINRECIPE_ENABLED,Boolean)
            If (MAINSEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MAINSEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(PROD_RECIPE_TOTAL,Boolean)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(_MAINPROD_SETPOINT__,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODLINE_WPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODLINE_WP"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("WP_IDENT", "WP_IDENT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PRODLINE_WP` WHERE ((`PRODLINE_IDENT` = ?) AND (`WP_IDENT` = ?))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PRODLINE_WP` (`PRODLINE_IDENT`, `WP_IDENT`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PRODLINE_WP` SET `PRODLINE_IDENT` = ?, `WP_IDENT` = ? WHERE ((`PRODLINE_I"& _ 
                "DENT` = ?) AND (`WP_IDENT` = ?))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, WP_IDENT FROM PRODLINE_WP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.PRODLINE_WPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.PRODLINE_WPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.PRODLINE_WPDataTable = New _840002P1DataSet.PRODLINE_WPDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.PRODLINE_WPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PRODLINE_WP")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_WP_IDENT As String) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_WP_IDENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal WP_IDENT As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WP_IDENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRODLINE_IDENT As String, ByVal WP_IDENT As String, ByVal Original_PRODLINE_IDENT As String, ByVal Original_WP_IDENT As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WP_IDENT,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_WP_IDENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_PRODLINE_IDENT As String, ByVal Original_WP_IDENT As String) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_WP_IDENT, Original_PRODLINE_IDENT, Original_WP_IDENT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PRODUCTIONLINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PRODUCTIONLINE"
            tableMapping.ColumnMappings.Add("DEVICE_IDENT", "DEVICE_IDENT")
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("PRODLINE_NUMBER", "PRODLINE_NUMBER")
            tableMapping.ColumnMappings.Add("DDESET", "DDESET")
            tableMapping.ColumnMappings.Add("ORDER_IDENT_CAPTION", "ORDER_IDENT_CAPTION")
            tableMapping.ColumnMappings.Add("CUSTOMER_IDENT_CAPTION", "CUSTOMER_IDENT_CAPTION")
            tableMapping.ColumnMappings.Add("HEADER1", "HEADER1")
            tableMapping.ColumnMappings.Add("HEADER2", "HEADER2")
            tableMapping.ColumnMappings.Add("PROD_SETPOINT_%", "PROD_SETPOINT_%")
            tableMapping.ColumnMappings.Add("PROD_MODE", "PROD_MODE")
            tableMapping.ColumnMappings.Add("PROD_RECIPE_TOTAL", "PROD_RECIPE_TOTAL")
            tableMapping.ColumnMappings.Add("LOG_REPORT", "LOG_REPORT")
            tableMapping.ColumnMappings.Add("PRINT_PRODREPORT", "PRINT_PRODREPORT")
            tableMapping.ColumnMappings.Add("PRINT_BATCHREPORT", "PRINT_BATCHREPORT")
            tableMapping.ColumnMappings.Add("PROD_MANUAL_START", "PROD_MANUAL_START")
            tableMapping.ColumnMappings.Add("BATCH_MANUAL_START", "BATCH_MANUAL_START")
            tableMapping.ColumnMappings.Add("PRODLINE_ENABLED", "PRODLINE_ENABLED")
            tableMapping.ColumnMappings.Add("SEQUENCE_NUMBER", "SEQUENCE_NUMBER")
            tableMapping.ColumnMappings.Add("LOG_REPORT_DAYS", "LOG_REPORT_DAYS")
            tableMapping.ColumnMappings.Add("LOAD_RECIPE_CHANGED", "LOAD_RECIPE_CHANGED")
            tableMapping.ColumnMappings.Add("LOG_FLOWALARM", "LOG_FLOWALARM")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_SRC", "SCRIPT_VAR_SRC")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_LST", "SCRIPT_VAR_LST")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERR", "SCRIPT_VAR_ERR")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERRNUM", "SCRIPT_VAR_ERRNUM")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PRODUCTIONLINE` WHERE (((? = 1 AND `DEVICE_IDENT` IS NULL) OR (`DEVI"& _ 
                "CE_IDENT` = ?)) AND (`PRODLINE_IDENT` = ?) AND ((? = 1 AND `PRODLINE_NUMBER` IS "& _ 
                "NULL) OR (`PRODLINE_NUMBER` = ?)) AND ((? = 1 AND `DDESET` IS NULL) OR (`DDESET`"& _ 
                " = ?)) AND ((? = 1 AND `ORDER_IDENT_CAPTION` IS NULL) OR (`ORDER_IDENT_CAPTION` "& _ 
                "= ?)) AND ((? = 1 AND `CUSTOMER_IDENT_CAPTION` IS NULL) OR (`CUSTOMER_IDENT_CAPT"& _ 
                "ION` = ?)) AND ((? = 1 AND `HEADER1` IS NULL) OR (`HEADER1` = ?)) AND ((? = 1 AN"& _ 
                "D `HEADER2` IS NULL) OR (`HEADER2` = ?)) AND ((? = 1 AND `PROD_SETPOINT_%` IS NU"& _ 
                "LL) OR (`PROD_SETPOINT_%` = ?)) AND ((? = 1 AND `PROD_MODE` IS NULL) OR (`PROD_M"& _ 
                "ODE` = ?)) AND ((? = 1 AND `PROD_RECIPE_TOTAL` IS NULL) OR (`PROD_RECIPE_TOTAL` "& _ 
                "= ?)) AND ((? = 1 AND `LOG_REPORT` IS NULL) OR (`LOG_REPORT` = ?)) AND ((? = 1 A"& _ 
                "ND `PRINT_PRODREPORT` IS NULL) OR (`PRINT_PRODREPORT` = ?)) AND ((? = 1 AND `PRI"& _ 
                "NT_BATCHREPORT` IS NULL) OR (`PRINT_BATCHREPORT` = ?)) AND ((? = 1 AND `PROD_MAN"& _ 
                "UAL_START` IS NULL) OR (`PROD_MANUAL_START` = ?)) AND ((? = 1 AND `BATCH_MANUAL_"& _ 
                "START` IS NULL) OR (`BATCH_MANUAL_START` = ?)) AND ((? = 1 AND `PRODLINE_ENABLED"& _ 
                "` IS NULL) OR (`PRODLINE_ENABLED` = ?)) AND ((? = 1 AND `SEQUENCE_NUMBER` IS NUL"& _ 
                "L) OR (`SEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `LOG_REPORT_DAYS` IS NULL) OR (`L"& _ 
                "OG_REPORT_DAYS` = ?)) AND ((? = 1 AND `LOAD_RECIPE_CHANGED` IS NULL) OR (`LOAD_R"& _ 
                "ECIPE_CHANGED` = ?)) AND ((? = 1 AND `LOG_FLOWALARM` IS NULL) OR (`LOG_FLOWALARM"& _ 
                "` = ?)) AND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`SCRIPT_VAR_ERRNUM` = ?"& _ 
                ")))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDESET", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEADER1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEADER1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEADER2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEADER2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PRODUCTIONLINE` (`DEVICE_IDENT`, `PRODLINE_IDENT`, `PRODLINE_NUMBER`"& _ 
                ", `DDESET`, `ORDER_IDENT_CAPTION`, `CUSTOMER_IDENT_CAPTION`, `HEADER1`, `HEADER2"& _ 
                "`, `PROD_SETPOINT_%`, `PROD_MODE`, `PROD_RECIPE_TOTAL`, `LOG_REPORT`, `PRINT_PRO"& _ 
                "DREPORT`, `PRINT_BATCHREPORT`, `PROD_MANUAL_START`, `BATCH_MANUAL_START`, `PRODL"& _ 
                "INE_ENABLED`, `SEQUENCE_NUMBER`, `LOG_REPORT_DAYS`, `LOAD_RECIPE_CHANGED`, `LOG_"& _ 
                "FLOWALARM`, `SCRIPT_VAR_SRC`, `SCRIPT_VAR_LST`, `SCRIPT_VAR_ERR`, `SCRIPT_VAR_ER"& _ 
                "RNUM`, `SCRIPT_DIT`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "& _ 
                "?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDESET", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PRODUCTIONLINE` SET `DEVICE_IDENT` = ?, `PRODLINE_IDENT` = ?, `PRODLINE_N"& _ 
                "UMBER` = ?, `DDESET` = ?, `ORDER_IDENT_CAPTION` = ?, `CUSTOMER_IDENT_CAPTION` = "& _ 
                "?, `HEADER1` = ?, `HEADER2` = ?, `PROD_SETPOINT_%` = ?, `PROD_MODE` = ?, `PROD_R"& _ 
                "ECIPE_TOTAL` = ?, `LOG_REPORT` = ?, `PRINT_PRODREPORT` = ?, `PRINT_BATCHREPORT` "& _ 
                "= ?, `PROD_MANUAL_START` = ?, `BATCH_MANUAL_START` = ?, `PRODLINE_ENABLED` = ?, "& _ 
                "`SEQUENCE_NUMBER` = ?, `LOG_REPORT_DAYS` = ?, `LOAD_RECIPE_CHANGED` = ?, `LOG_FL"& _ 
                "OWALARM` = ?, `SCRIPT_VAR_SRC` = ?, `SCRIPT_VAR_LST` = ?, `SCRIPT_VAR_ERR` = ?, "& _ 
                "`SCRIPT_VAR_ERRNUM` = ?, `SCRIPT_DIT` = ? WHERE (((? = 1 AND `DEVICE_IDENT` IS N"& _ 
                "ULL) OR (`DEVICE_IDENT` = ?)) AND (`PRODLINE_IDENT` = ?) AND ((? = 1 AND `PRODLI"& _ 
                "NE_NUMBER` IS NULL) OR (`PRODLINE_NUMBER` = ?)) AND ((? = 1 AND `DDESET` IS NULL"& _ 
                ") OR (`DDESET` = ?)) AND ((? = 1 AND `ORDER_IDENT_CAPTION` IS NULL) OR (`ORDER_I"& _ 
                "DENT_CAPTION` = ?)) AND ((? = 1 AND `CUSTOMER_IDENT_CAPTION` IS NULL) OR (`CUSTO"& _ 
                "MER_IDENT_CAPTION` = ?)) AND ((? = 1 AND `HEADER1` IS NULL) OR (`HEADER1` = ?)) "& _ 
                "AND ((? = 1 AND `HEADER2` IS NULL) OR (`HEADER2` = ?)) AND ((? = 1 AND `PROD_SET"& _ 
                "POINT_%` IS NULL) OR (`PROD_SETPOINT_%` = ?)) AND ((? = 1 AND `PROD_MODE` IS NUL"& _ 
                "L) OR (`PROD_MODE` = ?)) AND ((? = 1 AND `PROD_RECIPE_TOTAL` IS NULL) OR (`PROD_"& _ 
                "RECIPE_TOTAL` = ?)) AND ((? = 1 AND `LOG_REPORT` IS NULL) OR (`LOG_REPORT` = ?))"& _ 
                " AND ((? = 1 AND `PRINT_PRODREPORT` IS NULL) OR (`PRINT_PRODREPORT` = ?)) AND (("& _ 
                "? = 1 AND `PRINT_BATCHREPORT` IS NULL) OR (`PRINT_BATCHREPORT` = ?)) AND ((? = 1"& _ 
                " AND `PROD_MANUAL_START` IS NULL) OR (`PROD_MANUAL_START` = ?)) AND ((? = 1 AND "& _ 
                "`BATCH_MANUAL_START` IS NULL) OR (`BATCH_MANUAL_START` = ?)) AND ((? = 1 AND `PR"& _ 
                "ODLINE_ENABLED` IS NULL) OR (`PRODLINE_ENABLED` = ?)) AND ((? = 1 AND `SEQUENCE_"& _ 
                "NUMBER` IS NULL) OR (`SEQUENCE_NUMBER` = ?)) AND ((? = 1 AND `LOG_REPORT_DAYS` I"& _ 
                "S NULL) OR (`LOG_REPORT_DAYS` = ?)) AND ((? = 1 AND `LOAD_RECIPE_CHANGED` IS NUL"& _ 
                "L) OR (`LOAD_RECIPE_CHANGED` = ?)) AND ((? = 1 AND `LOG_FLOWALARM` IS NULL) OR ("& _ 
                "`LOG_FLOWALARM` = ?)) AND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`SCRIPT_V"& _ 
                "AR_ERRNUM` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DDESET", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("HEADER2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_NUMBER", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DDESET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DDESET", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DDESET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ORDER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ORDER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CUSTOMER_IDENT_CAPTION", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CUSTOMER_IDENT_CAPTION", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEADER1", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEADER1", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER1", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_HEADER2", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_HEADER2", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HEADER2", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_SETPOINT_%", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_SETPOINT_%", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MODE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRINT_PRODREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_PRODREPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRINT_BATCHREPORT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRINT_BATCHREPORT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PROD_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROD_MANUAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_BATCH_MANUAL_START", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "BATCH_MANUAL_START", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SEQUENCE_NUMBER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SEQUENCE_NUMBER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_REPORT_DAYS", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_REPORT_DAYS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOAD_RECIPE_CHANGED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOAD_RECIPE_CHANGED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LOG_FLOWALARM", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOG_FLOWALARM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEVICE_IDENT, PRODLINE_IDENT, PRODLINE_NUMBER, DDESET, ORDER_IDENT_CAPTION"& _ 
                ", CUSTOMER_IDENT_CAPTION, HEADER1, HEADER2, [PROD_SETPOINT_%], PROD_MODE, PROD_R"& _ 
                "ECIPE_TOTAL, LOG_REPORT, PRINT_PRODREPORT, PRINT_BATCHREPORT, PROD_MANUAL_START,"& _ 
                " BATCH_MANUAL_START, PRODLINE_ENABLED, SEQUENCE_NUMBER, LOG_REPORT_DAYS, LOAD_RE"& _ 
                "CIPE_CHANGED, LOG_FLOWALARM, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCR"& _ 
                "IPT_VAR_ERRNUM, SCRIPT_DIT FROM PRODUCTIONLINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.PRODUCTIONLINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.PRODUCTIONLINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.PRODUCTIONLINEDataTable = New _840002P1DataSet.PRODUCTIONLINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.PRODUCTIONLINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PRODUCTIONLINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PRODLINE_NUMBER As Short,  _
                    ByVal Original_DDESET As Global.System.Nullable(Of Short),  _
                    ByVal Original_ORDER_IDENT_CAPTION As String,  _
                    ByVal Original_CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal Original_HEADER1 As String,  _
                    ByVal Original_HEADER2 As String,  _
                    ByVal _Original_PROD_SETPOINT__ As Boolean,  _
                    ByVal Original_PROD_MODE As Short,  _
                    ByVal Original_PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal Original_LOG_REPORT As Boolean,  _
                    ByVal Original_PRINT_PRODREPORT As Boolean,  _
                    ByVal Original_PRINT_BATCHREPORT As Boolean,  _
                    ByVal Original_PROD_MANUAL_START As Boolean,  _
                    ByVal Original_BATCH_MANUAL_START As Boolean,  _
                    ByVal Original_PRODLINE_ENABLED As Boolean,  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal Original_LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal Original_LOG_FLOWALARM As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer)) As Integer
            If (Original_DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PRODLINE_NUMBER,Short)
            If (Original_DDESET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DDESET.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ORDER_IDENT_CAPTION,String)
            End If
            If (Original_CUSTOMER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CUSTOMER_IDENT_CAPTION,String)
            End If
            If (Original_HEADER1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_HEADER1,String)
            End If
            If (Original_HEADER2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_HEADER2,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(_Original_PROD_SETPOINT__,Boolean)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PROD_MODE,Short)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PROD_RECIPE_TOTAL,Boolean)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_LOG_REPORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_PRINT_PRODREPORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_PRINT_BATCHREPORT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_PROD_MANUAL_START,Boolean)
            Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_BATCH_MANUAL_START,Boolean)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_PRODLINE_ENABLED,Boolean)
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_LOG_REPORT_DAYS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_LOG_REPORT_DAYS.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_LOAD_RECIPE_CHANGED,Boolean)
            Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_LOG_FLOWALARM,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PRODLINE_NUMBER As Short,  _
                    ByVal DDESET As Global.System.Nullable(Of Short),  _
                    ByVal ORDER_IDENT_CAPTION As String,  _
                    ByVal CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal HEADER1 As String,  _
                    ByVal HEADER2 As String,  _
                    ByVal _PROD_SETPOINT__ As Boolean,  _
                    ByVal PROD_MODE As Short,  _
                    ByVal PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal LOG_REPORT As Boolean,  _
                    ByVal PRINT_PRODREPORT As Boolean,  _
                    ByVal PRINT_BATCHREPORT As Boolean,  _
                    ByVal PROD_MANUAL_START As Boolean,  _
                    ByVal BATCH_MANUAL_START As Boolean,  _
                    ByVal PRODLINE_ENABLED As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal LOG_FLOWALARM As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRODLINE_NUMBER,Short)
            If (DDESET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DDESET.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ORDER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORDER_IDENT_CAPTION,String)
            End If
            If (CUSTOMER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CUSTOMER_IDENT_CAPTION,String)
            End If
            If (HEADER1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(HEADER1,String)
            End If
            If (HEADER2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(HEADER2,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(_PROD_SETPOINT__,Boolean)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PROD_MODE,Short)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(PROD_RECIPE_TOTAL,Boolean)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(LOG_REPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(PRINT_PRODREPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(PRINT_BATCHREPORT,Boolean)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(PROD_MANUAL_START,Boolean)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(BATCH_MANUAL_START,Boolean)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(PRODLINE_ENABLED,Boolean)
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LOG_REPORT_DAYS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(LOG_REPORT_DAYS.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(LOAD_RECIPE_CHANGED,Boolean)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(LOG_FLOWALARM,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(SCRIPT_DIT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal PRODLINE_NUMBER As Short,  _
                    ByVal DDESET As Global.System.Nullable(Of Short),  _
                    ByVal ORDER_IDENT_CAPTION As String,  _
                    ByVal CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal HEADER1 As String,  _
                    ByVal HEADER2 As String,  _
                    ByVal _PROD_SETPOINT__ As Boolean,  _
                    ByVal PROD_MODE As Short,  _
                    ByVal PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal LOG_REPORT As Boolean,  _
                    ByVal PRINT_PRODREPORT As Boolean,  _
                    ByVal PRINT_BATCHREPORT As Boolean,  _
                    ByVal PROD_MANUAL_START As Boolean,  _
                    ByVal BATCH_MANUAL_START As Boolean,  _
                    ByVal PRODLINE_ENABLED As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal LOG_FLOWALARM As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PRODLINE_NUMBER As Short,  _
                    ByVal Original_DDESET As Global.System.Nullable(Of Short),  _
                    ByVal Original_ORDER_IDENT_CAPTION As String,  _
                    ByVal Original_CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal Original_HEADER1 As String,  _
                    ByVal Original_HEADER2 As String,  _
                    ByVal _Original_PROD_SETPOINT__ As Boolean,  _
                    ByVal Original_PROD_MODE As Short,  _
                    ByVal Original_PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal Original_LOG_REPORT As Boolean,  _
                    ByVal Original_PRINT_PRODREPORT As Boolean,  _
                    ByVal Original_PRINT_BATCHREPORT As Boolean,  _
                    ByVal Original_PROD_MANUAL_START As Boolean,  _
                    ByVal Original_BATCH_MANUAL_START As Boolean,  _
                    ByVal Original_PRODLINE_ENABLED As Boolean,  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal Original_LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal Original_LOG_FLOWALARM As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer)) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRODLINE_NUMBER,Short)
            If (DDESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DDESET.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ORDER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ORDER_IDENT_CAPTION,String)
            End If
            If (CUSTOMER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CUSTOMER_IDENT_CAPTION,String)
            End If
            If (HEADER1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HEADER1,String)
            End If
            If (HEADER2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(HEADER2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(_PROD_SETPOINT__,Boolean)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PROD_MODE,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PROD_RECIPE_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(LOG_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(PRINT_PRODREPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PRINT_BATCHREPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PROD_MANUAL_START,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(BATCH_MANUAL_START,Boolean)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PRODLINE_ENABLED,Boolean)
            If (SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (LOG_REPORT_DAYS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(LOG_REPORT_DAYS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LOAD_RECIPE_CHANGED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(LOG_FLOWALARM,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(SCRIPT_DIT,String)
            End If
            If (Original_DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PRODLINE_NUMBER,Short)
            If (Original_DDESET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_DDESET.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_ORDER_IDENT_CAPTION,String)
            End If
            If (Original_CUSTOMER_IDENT_CAPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_CUSTOMER_IDENT_CAPTION,String)
            End If
            If (Original_HEADER1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_HEADER1,String)
            End If
            If (Original_HEADER2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_HEADER2,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(_Original_PROD_SETPOINT__,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PROD_MODE,Short)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PROD_RECIPE_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_LOG_REPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_PRINT_PRODREPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_PRINT_BATCHREPORT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_PROD_MANUAL_START,Boolean)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_BATCH_MANUAL_START,Boolean)
            Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_PRODLINE_ENABLED,Boolean)
            If (Original_SEQUENCE_NUMBER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_SEQUENCE_NUMBER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_LOG_REPORT_DAYS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_LOG_REPORT_DAYS.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_LOAD_RECIPE_CHANGED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_LOG_FLOWALARM,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal PRODLINE_NUMBER As Short,  _
                    ByVal DDESET As Global.System.Nullable(Of Short),  _
                    ByVal ORDER_IDENT_CAPTION As String,  _
                    ByVal CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal HEADER1 As String,  _
                    ByVal HEADER2 As String,  _
                    ByVal _PROD_SETPOINT__ As Boolean,  _
                    ByVal PROD_MODE As Short,  _
                    ByVal PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal LOG_REPORT As Boolean,  _
                    ByVal PRINT_PRODREPORT As Boolean,  _
                    ByVal PRINT_BATCHREPORT As Boolean,  _
                    ByVal PROD_MANUAL_START As Boolean,  _
                    ByVal BATCH_MANUAL_START As Boolean,  _
                    ByVal PRODLINE_ENABLED As Boolean,  _
                    ByVal SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal LOG_FLOWALARM As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_PRODLINE_NUMBER As Short,  _
                    ByVal Original_DDESET As Global.System.Nullable(Of Short),  _
                    ByVal Original_ORDER_IDENT_CAPTION As String,  _
                    ByVal Original_CUSTOMER_IDENT_CAPTION As String,  _
                    ByVal Original_HEADER1 As String,  _
                    ByVal Original_HEADER2 As String,  _
                    ByVal _Original_PROD_SETPOINT__ As Boolean,  _
                    ByVal Original_PROD_MODE As Short,  _
                    ByVal Original_PROD_RECIPE_TOTAL As Boolean,  _
                    ByVal Original_LOG_REPORT As Boolean,  _
                    ByVal Original_PRINT_PRODREPORT As Boolean,  _
                    ByVal Original_PRINT_BATCHREPORT As Boolean,  _
                    ByVal Original_PROD_MANUAL_START As Boolean,  _
                    ByVal Original_BATCH_MANUAL_START As Boolean,  _
                    ByVal Original_PRODLINE_ENABLED As Boolean,  _
                    ByVal Original_SEQUENCE_NUMBER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LOG_REPORT_DAYS As Global.System.Nullable(Of Short),  _
                    ByVal Original_LOAD_RECIPE_CHANGED As Boolean,  _
                    ByVal Original_LOG_FLOWALARM As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(DEVICE_IDENT, Original_PRODLINE_IDENT, PRODLINE_NUMBER, DDESET, ORDER_IDENT_CAPTION, CUSTOMER_IDENT_CAPTION, HEADER1, HEADER2, _PROD_SETPOINT__, PROD_MODE, PROD_RECIPE_TOTAL, LOG_REPORT, PRINT_PRODREPORT, PRINT_BATCHREPORT, PROD_MANUAL_START, BATCH_MANUAL_START, PRODLINE_ENABLED, SEQUENCE_NUMBER, LOG_REPORT_DAYS, LOAD_RECIPE_CHANGED, LOG_FLOWALARM, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT, Original_DEVICE_IDENT, Original_PRODLINE_IDENT, Original_PRODLINE_NUMBER, Original_DDESET, Original_ORDER_IDENT_CAPTION, Original_CUSTOMER_IDENT_CAPTION, Original_HEADER1, Original_HEADER2, _Original_PROD_SETPOINT__, Original_PROD_MODE, Original_PROD_RECIPE_TOTAL, Original_LOG_REPORT, Original_PRINT_PRODREPORT, Original_PRINT_BATCHREPORT, Original_PROD_MANUAL_START, Original_BATCH_MANUAL_START, Original_PRODLINE_ENABLED, Original_SEQUENCE_NUMBER, Original_LOG_REPORT_DAYS, Original_LOAD_RECIPE_CHANGED, Original_LOG_FLOWALARM, Original_SCRIPT_VAR_ERRNUM)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RECIPE_HEADERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RECIPE_HEADER"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_NAME", "RECIPE_NAME")
            tableMapping.ColumnMappings.Add("RECIPE_CREATE_DATE", "RECIPE_CREATE_DATE")
            tableMapping.ColumnMappings.Add("RECIPE_CHANGE_DATE", "RECIPE_CHANGE_DATE")
            tableMapping.ColumnMappings.Add("RECIPE_ENABLED", "RECIPE_ENABLED")
            tableMapping.ColumnMappings.Add("RECIPE_USER", "RECIPE_USER")
            tableMapping.ColumnMappings.Add("RECIPE_TOTAL", "RECIPE_TOTAL")
            tableMapping.ColumnMappings.Add("RECIPE_REFWEIGHT", "RECIPE_REFWEIGHT")
            tableMapping.ColumnMappings.Add("RECIPE_UNIT", "RECIPE_UNIT")
            tableMapping.ColumnMappings.Add("RECIPE_DECIMALPOINT", "RECIPE_DECIMALPOINT")
            tableMapping.ColumnMappings.Add("RECIPE_MAXRESOLU_DP", "RECIPE_MAXRESOLU_DP")
            tableMapping.ColumnMappings.Add("RECIPE_IN_PERCENT", "RECIPE_IN_PERCENT")
            tableMapping.ColumnMappings.Add("RECIPE_CHECK", "RECIPE_CHECK")
            tableMapping.ColumnMappings.Add("RECIPE_TIMEOUT", "RECIPE_TIMEOUT")
            tableMapping.ColumnMappings.Add("RECIPE_TIMEOUT_ENABLED", "RECIPE_TIMEOUT_ENABLED")
            tableMapping.ColumnMappings.Add("CORR_RECIPE", "CORR_RECIPE")
            tableMapping.ColumnMappings.Add("MAIN_RECIPE_IDENT", "MAIN_RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("SUB_RECIPE", "SUB_RECIPE")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_SRC", "SCRIPT_VAR_SRC")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_LST", "SCRIPT_VAR_LST")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERR", "SCRIPT_VAR_ERR")
            tableMapping.ColumnMappings.Add("SCRIPT_VAR_ERRNUM", "SCRIPT_VAR_ERRNUM")
            tableMapping.ColumnMappings.Add("SCRIPT_DIT", "SCRIPT_DIT")
            tableMapping.ColumnMappings.Add("~ORDER_IDENT", "~ORDER_IDENT")
            tableMapping.ColumnMappings.Add("~CUSTOMER_IDENT", "~CUSTOMER_IDENT")
            tableMapping.ColumnMappings.Add("~PROD_NUM", "~PROD_NUM")
            tableMapping.ColumnMappings.Add("~PROD_SETPOINT", "~PROD_SETPOINT")
            tableMapping.ColumnMappings.Add("~PROD_PCAUTOSTART", "~PROD_PCAUTOSTART")
            tableMapping.ColumnMappings.Add("~PROD_CYCLE", "~PROD_CYCLE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `RECIPE_HEADER` WHERE ((`PRODLINE_IDENT` = ?) AND (`RECIPE_IDENT` = ?"& _ 
                ") AND ((? = 1 AND `RECIPE_NAME` IS NULL) OR (`RECIPE_NAME` = ?)) AND ((? = 1 AND"& _ 
                " `RECIPE_CREATE_DATE` IS NULL) OR (`RECIPE_CREATE_DATE` = ?)) AND ((? = 1 AND `R"& _ 
                "ECIPE_CHANGE_DATE` IS NULL) OR (`RECIPE_CHANGE_DATE` = ?)) AND ((? = 1 AND `RECI"& _ 
                "PE_ENABLED` IS NULL) OR (`RECIPE_ENABLED` = ?)) AND ((? = 1 AND `RECIPE_USER` IS"& _ 
                " NULL) OR (`RECIPE_USER` = ?)) AND ((? = 1 AND `RECIPE_TOTAL` IS NULL) OR (`RECI"& _ 
                "PE_TOTAL` = ?)) AND ((? = 1 AND `RECIPE_REFWEIGHT` IS NULL) OR (`RECIPE_REFWEIGH"& _ 
                "T` = ?)) AND ((? = 1 AND `RECIPE_UNIT` IS NULL) OR (`RECIPE_UNIT` = ?)) AND ((? "& _ 
                "= 1 AND `RECIPE_DECIMALPOINT` IS NULL) OR (`RECIPE_DECIMALPOINT` = ?)) AND ((? ="& _ 
                " 1 AND `RECIPE_MAXRESOLU_DP` IS NULL) OR (`RECIPE_MAXRESOLU_DP` = ?)) AND ((? = "& _ 
                "1 AND `RECIPE_IN_PERCENT` IS NULL) OR (`RECIPE_IN_PERCENT` = ?)) AND ((? = 1 AND"& _ 
                " `RECIPE_CHECK` IS NULL) OR (`RECIPE_CHECK` = ?)) AND ((? = 1 AND `RECIPE_TIMEOU"& _ 
                "T` IS NULL) OR (`RECIPE_TIMEOUT` = ?)) AND ((? = 1 AND `RECIPE_TIMEOUT_ENABLED` "& _ 
                "IS NULL) OR (`RECIPE_TIMEOUT_ENABLED` = ?)) AND ((? = 1 AND `CORR_RECIPE` IS NUL"& _ 
                "L) OR (`CORR_RECIPE` = ?)) AND ((? = 1 AND `MAIN_RECIPE_IDENT` IS NULL) OR (`MAI"& _ 
                "N_RECIPE_IDENT` = ?)) AND ((? = 1 AND `SUB_RECIPE` IS NULL) OR (`SUB_RECIPE` = ?"& _ 
                ")) AND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`SCRIPT_VAR_ERRNUM` = ?)) AN"& _ 
                "D ((? = 1 AND `~ORDER_IDENT` IS NULL) OR (`~ORDER_IDENT` = ?)) AND ((? = 1 AND `"& _ 
                "~CUSTOMER_IDENT` IS NULL) OR (`~CUSTOMER_IDENT` = ?)) AND ((? = 1 AND `~PROD_NUM"& _ 
                "` IS NULL) OR (`~PROD_NUM` = ?)) AND ((? = 1 AND `~PROD_SETPOINT` IS NULL) OR (`"& _ 
                "~PROD_SETPOINT` = ?)) AND ((? = 1 AND `~PROD_PCAUTOSTART` IS NULL) OR (`~PROD_PC"& _ 
                "AUTOSTART` = ?)) AND ((? = 1 AND `~PROD_CYCLE` IS NULL) OR (`~PROD_CYCLE` = ?)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `RECIPE_HEADER` (`PRODLINE_IDENT`, `RECIPE_IDENT`, `RECIPE_NAME`, `RE"& _ 
                "CIPE_CREATE_DATE`, `RECIPE_CHANGE_DATE`, `RECIPE_ENABLED`, `RECIPE_USER`, `RECIP"& _ 
                "E_TOTAL`, `RECIPE_REFWEIGHT`, `RECIPE_UNIT`, `RECIPE_DECIMALPOINT`, `RECIPE_MAXR"& _ 
                "ESOLU_DP`, `RECIPE_IN_PERCENT`, `RECIPE_CHECK`, `RECIPE_TIMEOUT`, `RECIPE_TIMEOU"& _ 
                "T_ENABLED`, `CORR_RECIPE`, `MAIN_RECIPE_IDENT`, `SUB_RECIPE`, `SCRIPT_VAR_SRC`, "& _ 
                "`SCRIPT_VAR_LST`, `SCRIPT_VAR_ERR`, `SCRIPT_VAR_ERRNUM`, `SCRIPT_DIT`, `~ORDER_I"& _ 
                "DENT`, `~CUSTOMER_IDENT`, `~PROD_NUM`, `~PROD_SETPOINT`, `~PROD_PCAUTOSTART`, `~"& _ 
                "PROD_CYCLE`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `RECIPE_HEADER` SET `PRODLINE_IDENT` = ?, `RECIPE_IDENT` = ?, `RECIPE_NAME"& _ 
                "` = ?, `RECIPE_CREATE_DATE` = ?, `RECIPE_CHANGE_DATE` = ?, `RECIPE_ENABLED` = ?,"& _ 
                " `RECIPE_USER` = ?, `RECIPE_TOTAL` = ?, `RECIPE_REFWEIGHT` = ?, `RECIPE_UNIT` = "& _ 
                "?, `RECIPE_DECIMALPOINT` = ?, `RECIPE_MAXRESOLU_DP` = ?, `RECIPE_IN_PERCENT` = ?"& _ 
                ", `RECIPE_CHECK` = ?, `RECIPE_TIMEOUT` = ?, `RECIPE_TIMEOUT_ENABLED` = ?, `CORR_"& _ 
                "RECIPE` = ?, `MAIN_RECIPE_IDENT` = ?, `SUB_RECIPE` = ?, `SCRIPT_VAR_SRC` = ?, `S"& _ 
                "CRIPT_VAR_LST` = ?, `SCRIPT_VAR_ERR` = ?, `SCRIPT_VAR_ERRNUM` = ?, `SCRIPT_DIT` "& _ 
                "= ?, `~ORDER_IDENT` = ?, `~CUSTOMER_IDENT` = ?, `~PROD_NUM` = ?, `~PROD_SETPOINT"& _ 
                "` = ?, `~PROD_PCAUTOSTART` = ?, `~PROD_CYCLE` = ? WHERE ((`PRODLINE_IDENT` = ?) "& _ 
                "AND (`RECIPE_IDENT` = ?) AND ((? = 1 AND `RECIPE_NAME` IS NULL) OR (`RECIPE_NAME"& _ 
                "` = ?)) AND ((? = 1 AND `RECIPE_CREATE_DATE` IS NULL) OR (`RECIPE_CREATE_DATE` ="& _ 
                " ?)) AND ((? = 1 AND `RECIPE_CHANGE_DATE` IS NULL) OR (`RECIPE_CHANGE_DATE` = ?)"& _ 
                ") AND ((? = 1 AND `RECIPE_ENABLED` IS NULL) OR (`RECIPE_ENABLED` = ?)) AND ((? ="& _ 
                " 1 AND `RECIPE_USER` IS NULL) OR (`RECIPE_USER` = ?)) AND ((? = 1 AND `RECIPE_TO"& _ 
                "TAL` IS NULL) OR (`RECIPE_TOTAL` = ?)) AND ((? = 1 AND `RECIPE_REFWEIGHT` IS NUL"& _ 
                "L) OR (`RECIPE_REFWEIGHT` = ?)) AND ((? = 1 AND `RECIPE_UNIT` IS NULL) OR (`RECI"& _ 
                "PE_UNIT` = ?)) AND ((? = 1 AND `RECIPE_DECIMALPOINT` IS NULL) OR (`RECIPE_DECIMA"& _ 
                "LPOINT` = ?)) AND ((? = 1 AND `RECIPE_MAXRESOLU_DP` IS NULL) OR (`RECIPE_MAXRESO"& _ 
                "LU_DP` = ?)) AND ((? = 1 AND `RECIPE_IN_PERCENT` IS NULL) OR (`RECIPE_IN_PERCENT"& _ 
                "` = ?)) AND ((? = 1 AND `RECIPE_CHECK` IS NULL) OR (`RECIPE_CHECK` = ?)) AND ((?"& _ 
                " = 1 AND `RECIPE_TIMEOUT` IS NULL) OR (`RECIPE_TIMEOUT` = ?)) AND ((? = 1 AND `R"& _ 
                "ECIPE_TIMEOUT_ENABLED` IS NULL) OR (`RECIPE_TIMEOUT_ENABLED` = ?)) AND ((? = 1 A"& _ 
                "ND `CORR_RECIPE` IS NULL) OR (`CORR_RECIPE` = ?)) AND ((? = 1 AND `MAIN_RECIPE_I"& _ 
                "DENT` IS NULL) OR (`MAIN_RECIPE_IDENT` = ?)) AND ((? = 1 AND `SUB_RECIPE` IS NUL"& _ 
                "L) OR (`SUB_RECIPE` = ?)) AND ((? = 1 AND `SCRIPT_VAR_ERRNUM` IS NULL) OR (`SCRI"& _ 
                "PT_VAR_ERRNUM` = ?)) AND ((? = 1 AND `~ORDER_IDENT` IS NULL) OR (`~ORDER_IDENT` "& _ 
                "= ?)) AND ((? = 1 AND `~CUSTOMER_IDENT` IS NULL) OR (`~CUSTOMER_IDENT` = ?)) AND"& _ 
                " ((? = 1 AND `~PROD_NUM` IS NULL) OR (`~PROD_NUM` = ?)) AND ((? = 1 AND `~PROD_S"& _ 
                "ETPOINT` IS NULL) OR (`~PROD_SETPOINT` = ?)) AND ((? = 1 AND `~PROD_PCAUTOSTART`"& _ 
                " IS NULL) OR (`~PROD_PCAUTOSTART` = ?)) AND ((? = 1 AND `~PROD_CYCLE` IS NULL) O"& _ 
                "R (`~PROD_CYCLE` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_SRC", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_SRC", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_LST", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_LST", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERR", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERR", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SCRIPT_DIT", Global.System.Data.OleDb.OleDbType.LongVarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_DIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CREATE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHANGE_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHANGE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_USER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_USER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_USER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TOTAL", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_REFWEIGHT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_REFWEIGHT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_MAXRESOLU_DP", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_MAXRESOLU_DP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IN_PERCENT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IN_PERCENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_CHECK", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_CHECK", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_TIMEOUT_ENABLED", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_TIMEOUT_ENABLED", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CORR_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CORR_RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAIN_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAIN_RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUB_RECIPE", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUB_RECIPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SCRIPT_VAR_ERRNUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SCRIPT_VAR_ERRNUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~ORDER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~ORDER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~CUSTOMER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~CUSTOMER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_NUM", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_NUM", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_PCAUTOSTART", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_PCAUTOSTART", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_~PROD_CYCLE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "~PROD_CYCLE", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, RECIPE_IDENT, RECIPE_NAME, RECIPE_CREATE_DATE, RECIPE_CHAN"& _ 
                "GE_DATE, RECIPE_ENABLED, RECIPE_USER, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_UNI"& _ 
                "T, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_IN_PERCENT, RECIPE_CHECK, RE"& _ 
                "CIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, CORR_RECIPE, MAIN_RECIPE_IDENT, SUB_RECIPE"& _ 
                ", SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT,"& _ 
                " [~ORDER_IDENT], [~CUSTOMER_IDENT], [~PROD_NUM], [~PROD_SETPOINT], [~PROD_PCAUTO"& _ 
                "START], [~PROD_CYCLE] FROM RECIPE_HEADER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.RECIPE_HEADERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.RECIPE_HEADERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.RECIPE_HEADERDataTable = New _840002P1DataSet.RECIPE_HEADERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.RECIPE_HEADERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RECIPE_HEADER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_CREATE_DATE As Date,  _
                    ByVal Original_RECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_RECIPE_ENABLED As Boolean,  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_UNIT As String,  _
                    ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_IN_PERCENT As Boolean,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_CORR_RECIPE As Boolean,  _
                    ByVal Original_MAIN_RECIPE_IDENT As String,  _
                    ByVal Original_SUB_RECIPE As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__PROD_PCAUTOSTART As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_RECIPE_NAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_RECIPE_CREATE_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_RECIPE_CHANGE_DATE,Date)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RECIPE_ENABLED,Boolean)
            If (Original_RECIPE_USER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_RECIPE_USER,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_RECIPE_TOTAL,Double)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_RECIPE_REFWEIGHT,Double)
            If (Original_RECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_UNIT")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_RECIPE_UNIT,String)
            End If
            If (Original_RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_RECIPE_IN_PERCENT,Boolean)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_RECIPE_CHECK,Boolean)
            If (Original_RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_RECIPE_TIMEOUT_ENABLED,Boolean)
            Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_CORR_RECIPE,Boolean)
            If (Original_MAIN_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_MAIN_RECIPE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_SUB_RECIPE,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (_Original__ORDER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(_Original__ORDER_IDENT,String)
            End If
            If (_Original__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(_Original__CUSTOMER_IDENT,String)
            End If
            If (_Original__PROD_NUM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(_Original__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (_Original__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(_Original__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(47).Value = CType(_Original__PROD_PCAUTOSTART,Boolean)
            If (_Original__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(_Original__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_CREATE_DATE As Date,  _
                    ByVal RECIPE_CHANGE_DATE As Date,  _
                    ByVal RECIPE_ENABLED As Boolean,  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_IN_PERCENT As Boolean,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal CORR_RECIPE As Boolean,  _
                    ByVal MAIN_RECIPE_IDENT As String,  _
                    ByVal SUB_RECIPE As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __PROD_PCAUTOSTART As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(RECIPE_NAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(RECIPE_CREATE_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(RECIPE_CHANGE_DATE,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(RECIPE_ENABLED,Boolean)
            If (RECIPE_USER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RECIPE_USER,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(RECIPE_TOTAL,Double)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RECIPE_REFWEIGHT,Double)
            If (RECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_UNIT")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RECIPE_UNIT,String)
            End If
            If (RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(RECIPE_IN_PERCENT,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(RECIPE_CHECK,Boolean)
            If (RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(RECIPE_TIMEOUT_ENABLED,Boolean)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(CORR_RECIPE,Boolean)
            If (MAIN_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(MAIN_RECIPE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(SUB_RECIPE,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SCRIPT_DIT,String)
            End If
            If (__ORDER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(__ORDER_IDENT,String)
            End If
            If (__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(__CUSTOMER_IDENT,String)
            End If
            If (__PROD_NUM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(__PROD_PCAUTOSTART,Boolean)
            If (__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_CREATE_DATE As Date,  _
                    ByVal RECIPE_CHANGE_DATE As Date,  _
                    ByVal RECIPE_ENABLED As Boolean,  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_IN_PERCENT As Boolean,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal CORR_RECIPE As Boolean,  _
                    ByVal MAIN_RECIPE_IDENT As String,  _
                    ByVal SUB_RECIPE As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __PROD_PCAUTOSTART As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_CREATE_DATE As Date,  _
                    ByVal Original_RECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_RECIPE_ENABLED As Boolean,  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_UNIT As String,  _
                    ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_IN_PERCENT As Boolean,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_CORR_RECIPE As Boolean,  _
                    ByVal Original_MAIN_RECIPE_IDENT As String,  _
                    ByVal Original_SUB_RECIPE As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__PROD_PCAUTOSTART As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            If (RECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RECIPE_CREATE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(RECIPE_CHANGE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RECIPE_ENABLED,Boolean)
            If (RECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RECIPE_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RECIPE_TOTAL,Double)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RECIPE_REFWEIGHT,Double)
            If (RECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RECIPE_UNIT,String)
            End If
            If (RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(RECIPE_IN_PERCENT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RECIPE_CHECK,Boolean)
            If (RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RECIPE_TIMEOUT_ENABLED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CORR_RECIPE,Boolean)
            If (MAIN_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(MAIN_RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(SUB_RECIPE,Boolean)
            If (SCRIPT_VAR_SRC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(SCRIPT_VAR_SRC,String)
            End If
            If (SCRIPT_VAR_LST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(SCRIPT_VAR_LST,String)
            End If
            If (SCRIPT_VAR_ERR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(SCRIPT_VAR_ERR,String)
            End If
            If (SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (SCRIPT_DIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SCRIPT_DIT,String)
            End If
            If (__ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__ORDER_IDENT,String)
            End If
            If (__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__CUSTOMER_IDENT,String)
            End If
            If (__PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__PROD_PCAUTOSTART,Boolean)
            If (__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_RECIPE_IDENT,String)
            End If
            If (Original_RECIPE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_RECIPE_NAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_RECIPE_CREATE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_RECIPE_CHANGE_DATE,Date)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_RECIPE_ENABLED,Boolean)
            If (Original_RECIPE_USER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_RECIPE_USER,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_RECIPE_TOTAL,Double)
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_RECIPE_REFWEIGHT,Double)
            If (Original_RECIPE_UNIT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_UNIT")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_RECIPE_UNIT,String)
            End If
            If (Original_RECIPE_DECIMALPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_RECIPE_DECIMALPOINT.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_RECIPE_MAXRESOLU_DP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_RECIPE_MAXRESOLU_DP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_RECIPE_IN_PERCENT,Boolean)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_RECIPE_CHECK,Boolean)
            If (Original_RECIPE_TIMEOUT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_RECIPE_TIMEOUT.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_RECIPE_TIMEOUT_ENABLED,Boolean)
            Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_CORR_RECIPE,Boolean)
            If (Original_MAIN_RECIPE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_MAIN_RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_SUB_RECIPE,Boolean)
            If (Original_SCRIPT_VAR_ERRNUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_SCRIPT_VAR_ERRNUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (_Original__ORDER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(_Original__ORDER_IDENT,String)
            End If
            If (_Original__CUSTOMER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(_Original__CUSTOMER_IDENT,String)
            End If
            If (_Original__PROD_NUM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(_Original__PROD_NUM.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (_Original__PROD_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(_Original__PROD_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(77).Value = CType(_Original__PROD_PCAUTOSTART,Boolean)
            If (_Original__PROD_CYCLE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(_Original__PROD_CYCLE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RECIPE_NAME As String,  _
                    ByVal RECIPE_CREATE_DATE As Date,  _
                    ByVal RECIPE_CHANGE_DATE As Date,  _
                    ByVal RECIPE_ENABLED As Boolean,  _
                    ByVal RECIPE_USER As String,  _
                    ByVal RECIPE_TOTAL As Double,  _
                    ByVal RECIPE_REFWEIGHT As Double,  _
                    ByVal RECIPE_UNIT As String,  _
                    ByVal RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal RECIPE_IN_PERCENT As Boolean,  _
                    ByVal RECIPE_CHECK As Boolean,  _
                    ByVal RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal CORR_RECIPE As Boolean,  _
                    ByVal MAIN_RECIPE_IDENT As String,  _
                    ByVal SUB_RECIPE As Boolean,  _
                    ByVal SCRIPT_VAR_SRC As String,  _
                    ByVal SCRIPT_VAR_LST As String,  _
                    ByVal SCRIPT_VAR_ERR As String,  _
                    ByVal SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal SCRIPT_DIT As String,  _
                    ByVal __ORDER_IDENT As String,  _
                    ByVal __CUSTOMER_IDENT As String,  _
                    ByVal __PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal __PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal __PROD_PCAUTOSTART As Boolean,  _
                    ByVal __PROD_CYCLE As Global.System.Nullable(Of Short),  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_NAME As String,  _
                    ByVal Original_RECIPE_CREATE_DATE As Date,  _
                    ByVal Original_RECIPE_CHANGE_DATE As Date,  _
                    ByVal Original_RECIPE_ENABLED As Boolean,  _
                    ByVal Original_RECIPE_USER As String,  _
                    ByVal Original_RECIPE_TOTAL As Double,  _
                    ByVal Original_RECIPE_REFWEIGHT As Double,  _
                    ByVal Original_RECIPE_UNIT As String,  _
                    ByVal Original_RECIPE_DECIMALPOINT As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_MAXRESOLU_DP As Global.System.Nullable(Of Short),  _
                    ByVal Original_RECIPE_IN_PERCENT As Boolean,  _
                    ByVal Original_RECIPE_CHECK As Boolean,  _
                    ByVal Original_RECIPE_TIMEOUT As Global.System.Nullable(Of Date),  _
                    ByVal Original_RECIPE_TIMEOUT_ENABLED As Boolean,  _
                    ByVal Original_CORR_RECIPE As Boolean,  _
                    ByVal Original_MAIN_RECIPE_IDENT As String,  _
                    ByVal Original_SUB_RECIPE As Boolean,  _
                    ByVal Original_SCRIPT_VAR_ERRNUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__ORDER_IDENT As String,  _
                    ByVal _Original__CUSTOMER_IDENT As String,  _
                    ByVal _Original__PROD_NUM As Global.System.Nullable(Of Integer),  _
                    ByVal _Original__PROD_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal _Original__PROD_PCAUTOSTART As Boolean,  _
                    ByVal _Original__PROD_CYCLE As Global.System.Nullable(Of Short)) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_RECIPE_IDENT, RECIPE_NAME, RECIPE_CREATE_DATE, RECIPE_CHANGE_DATE, RECIPE_ENABLED, RECIPE_USER, RECIPE_TOTAL, RECIPE_REFWEIGHT, RECIPE_UNIT, RECIPE_DECIMALPOINT, RECIPE_MAXRESOLU_DP, RECIPE_IN_PERCENT, RECIPE_CHECK, RECIPE_TIMEOUT, RECIPE_TIMEOUT_ENABLED, CORR_RECIPE, MAIN_RECIPE_IDENT, SUB_RECIPE, SCRIPT_VAR_SRC, SCRIPT_VAR_LST, SCRIPT_VAR_ERR, SCRIPT_VAR_ERRNUM, SCRIPT_DIT, __ORDER_IDENT, __CUSTOMER_IDENT, __PROD_NUM, __PROD_SETPOINT, __PROD_PCAUTOSTART, __PROD_CYCLE, Original_PRODLINE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_NAME, Original_RECIPE_CREATE_DATE, Original_RECIPE_CHANGE_DATE, Original_RECIPE_ENABLED, Original_RECIPE_USER, Original_RECIPE_TOTAL, Original_RECIPE_REFWEIGHT, Original_RECIPE_UNIT, Original_RECIPE_DECIMALPOINT, Original_RECIPE_MAXRESOLU_DP, Original_RECIPE_IN_PERCENT, Original_RECIPE_CHECK, Original_RECIPE_TIMEOUT, Original_RECIPE_TIMEOUT_ENABLED, Original_CORR_RECIPE, Original_MAIN_RECIPE_IDENT, Original_SUB_RECIPE, Original_SCRIPT_VAR_ERRNUM, _Original__ORDER_IDENT, _Original__CUSTOMER_IDENT, _Original__PROD_NUM, _Original__PROD_SETPOINT, _Original__PROD_PCAUTOSTART, _Original__PROD_CYCLE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RECIPE_LINETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RECIPE_LINE"
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_IDENT", "RECIPE_IDENT")
            tableMapping.ColumnMappings.Add("RECIPE_LINE", "RECIPE_LINE")
            tableMapping.ColumnMappings.Add("MAT_IDENT", "MAT_IDENT")
            tableMapping.ColumnMappings.Add("MAT_SETPOINT", "MAT_SETPOINT")
            tableMapping.ColumnMappings.Add("MAT_UNIT", "MAT_UNIT")
            tableMapping.ColumnMappings.Add("MAT_ADD_TO_TOTAL", "MAT_ADD_TO_TOTAL")
            tableMapping.ColumnMappings.Add("MAT_CALCULATE_SETPOINT", "MAT_CALCULATE_SETPOINT")
            tableMapping.ColumnMappings.Add("RECIPE_LINE_PARA", "RECIPE_LINE_PARA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `RECIPE_LINE` WHERE ((`PRODLINE_IDENT` = ?) AND (`RECIPE_IDENT` = ?) "& _ 
                "AND (`RECIPE_LINE` = ?) AND ((? = 1 AND `MAT_IDENT` IS NULL) OR (`MAT_IDENT` = ?"& _ 
                ")) AND ((? = 1 AND `MAT_SETPOINT` IS NULL) OR (`MAT_SETPOINT` = ?)) AND ((? = 1 "& _ 
                "AND `MAT_UNIT` IS NULL) OR (`MAT_UNIT` = ?)) AND ((? = 1 AND `MAT_ADD_TO_TOTAL` "& _ 
                "IS NULL) OR (`MAT_ADD_TO_TOTAL` = ?)) AND ((? = 1 AND `MAT_CALCULATE_SETPOINT` I"& _ 
                "S NULL) OR (`MAT_CALCULATE_SETPOINT` = ?)) AND ((? = 1 AND `RECIPE_LINE_PARA` IS"& _ 
                " NULL) OR (`RECIPE_LINE_PARA` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `RECIPE_LINE` (`PRODLINE_IDENT`, `RECIPE_IDENT`, `RECIPE_LINE`, `MAT_"& _ 
                "IDENT`, `MAT_SETPOINT`, `MAT_UNIT`, `MAT_ADD_TO_TOTAL`, `MAT_CALCULATE_SETPOINT`"& _ 
                ", `RECIPE_LINE_PARA`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `RECIPE_LINE` SET `PRODLINE_IDENT` = ?, `RECIPE_IDENT` = ?, `RECIPE_LINE` "& _ 
                "= ?, `MAT_IDENT` = ?, `MAT_SETPOINT` = ?, `MAT_UNIT` = ?, `MAT_ADD_TO_TOTAL` = ?"& _ 
                ", `MAT_CALCULATE_SETPOINT` = ?, `RECIPE_LINE_PARA` = ? WHERE ((`PRODLINE_IDENT` "& _ 
                "= ?) AND (`RECIPE_IDENT` = ?) AND (`RECIPE_LINE` = ?) AND ((? = 1 AND `MAT_IDENT"& _ 
                "` IS NULL) OR (`MAT_IDENT` = ?)) AND ((? = 1 AND `MAT_SETPOINT` IS NULL) OR (`MA"& _ 
                "T_SETPOINT` = ?)) AND ((? = 1 AND `MAT_UNIT` IS NULL) OR (`MAT_UNIT` = ?)) AND ("& _ 
                "(? = 1 AND `MAT_ADD_TO_TOTAL` IS NULL) OR (`MAT_ADD_TO_TOTAL` = ?)) AND ((? = 1 "& _ 
                "AND `MAT_CALCULATE_SETPOINT` IS NULL) OR (`MAT_CALCULATE_SETPOINT` = ?)) AND ((?"& _ 
                " = 1 AND `RECIPE_LINE_PARA` IS NULL) OR (`RECIPE_LINE_PARA` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_SETPOINT", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_ADD_TO_TOTAL", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_ADD_TO_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_CALCULATE_SETPOINT", Global.System.Data.OleDb.OleDbType.[Boolean], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_CALCULATE_SETPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_RECIPE_LINE_PARA", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "RECIPE_LINE_PARA", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRODLINE_IDENT, RECIPE_IDENT, RECIPE_LINE, MAT_IDENT, MAT_SETPOINT, MAT_UN"& _ 
                "IT, MAT_ADD_TO_TOTAL, MAT_CALCULATE_SETPOINT, RECIPE_LINE_PARA FROM RECIPE_LINE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.RECIPE_LINEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.RECIPE_LINEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.RECIPE_LINEDataTable = New _840002P1DataSet.RECIPE_LINEDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.RECIPE_LINEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RECIPE_LINE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRODLINE_IDENT As String, ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_LINE As Short, ByVal Original_MAT_IDENT As String, ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_MAT_UNIT As String, ByVal Original_MAT_ADD_TO_TOTAL As Boolean, ByVal Original_MAT_CALCULATE_SETPOINT As Boolean, ByVal Original_RECIPE_LINE_PARA As String) As Integer
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RECIPE_IDENT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_RECIPE_LINE,Short)
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MAT_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MAT_CALCULATE_SETPOINT,Boolean)
            If (Original_RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_RECIPE_LINE_PARA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal RECIPE_IDENT As String, ByVal RECIPE_LINE As Short, ByVal MAT_IDENT As String, ByVal MAT_SETPOINT As Global.System.Nullable(Of Double), ByVal MAT_UNIT As String, ByVal MAT_ADD_TO_TOTAL As Boolean, ByVal MAT_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_LINE_PARA As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(RECIPE_LINE,Short)
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MAT_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MAT_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAT_CALCULATE_SETPOINT,Boolean)
            If (RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RECIPE_LINE_PARA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PRODLINE_IDENT As String,  _
                    ByVal RECIPE_IDENT As String,  _
                    ByVal RECIPE_LINE As Short,  _
                    ByVal MAT_IDENT As String,  _
                    ByVal MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal MAT_UNIT As String,  _
                    ByVal MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal RECIPE_LINE_PARA As String,  _
                    ByVal Original_PRODLINE_IDENT As String,  _
                    ByVal Original_RECIPE_IDENT As String,  _
                    ByVal Original_RECIPE_LINE As Short,  _
                    ByVal Original_MAT_IDENT As String,  _
                    ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double),  _
                    ByVal Original_MAT_UNIT As String,  _
                    ByVal Original_MAT_ADD_TO_TOTAL As Boolean,  _
                    ByVal Original_MAT_CALCULATE_SETPOINT As Boolean,  _
                    ByVal Original_RECIPE_LINE_PARA As String) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RECIPE_LINE,Short)
            If (MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MAT_IDENT,String)
            End If
            If (MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MAT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MAT_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAT_CALCULATE_SETPOINT,Boolean)
            If (RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RECIPE_LINE_PARA,String)
            End If
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PRODLINE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_RECIPE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_RECIPE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_RECIPE_IDENT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_RECIPE_LINE,Short)
            If (Original_MAT_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MAT_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_MAT_SETPOINT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_MAT_SETPOINT.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_MAT_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_MAT_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_MAT_ADD_TO_TOTAL,Boolean)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_MAT_CALCULATE_SETPOINT,Boolean)
            If (Original_RECIPE_LINE_PARA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_RECIPE_LINE_PARA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MAT_IDENT As String, ByVal MAT_SETPOINT As Global.System.Nullable(Of Double), ByVal MAT_UNIT As String, ByVal MAT_ADD_TO_TOTAL As Boolean, ByVal MAT_CALCULATE_SETPOINT As Boolean, ByVal RECIPE_LINE_PARA As String, ByVal Original_PRODLINE_IDENT As String, ByVal Original_RECIPE_IDENT As String, ByVal Original_RECIPE_LINE As Short, ByVal Original_MAT_IDENT As String, ByVal Original_MAT_SETPOINT As Global.System.Nullable(Of Double), ByVal Original_MAT_UNIT As String, ByVal Original_MAT_ADD_TO_TOTAL As Boolean, ByVal Original_MAT_CALCULATE_SETPOINT As Boolean, ByVal Original_RECIPE_LINE_PARA As String) As Integer
            Return Me.Update(Original_PRODLINE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_LINE, MAT_IDENT, MAT_SETPOINT, MAT_UNIT, MAT_ADD_TO_TOTAL, MAT_CALCULATE_SETPOINT, RECIPE_LINE_PARA, Original_PRODLINE_IDENT, Original_RECIPE_IDENT, Original_RECIPE_LINE, Original_MAT_IDENT, Original_MAT_SETPOINT, Original_MAT_UNIT, Original_MAT_ADD_TO_TOTAL, Original_MAT_CALCULATE_SETPOINT, Original_RECIPE_LINE_PARA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SUPPLIERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SUPPLIER"
            tableMapping.ColumnMappings.Add("SUPPLIER_IDENT", "SUPPLIER_IDENT")
            tableMapping.ColumnMappings.Add("SUPPLIER_NAME", "SUPPLIER_NAME")
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS")
            tableMapping.ColumnMappings.Add("CITY", "CITY")
            tableMapping.ColumnMappings.Add("COUNTRY", "COUNTRY")
            tableMapping.ColumnMappings.Add("POSTAL_CODE", "POSTAL_CODE")
            tableMapping.ColumnMappings.Add("PHONE", "PHONE")
            tableMapping.ColumnMappings.Add("FAX", "FAX")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `SUPPLIER` WHERE ((`SUPPLIER_IDENT` = ?) AND ((? = 1 AND `SUPPLIER_NA"& _ 
                "ME` IS NULL) OR (`SUPPLIER_NAME` = ?)) AND ((? = 1 AND `ADDRESS` IS NULL) OR (`A"& _ 
                "DDRESS` = ?)) AND ((? = 1 AND `CITY` IS NULL) OR (`CITY` = ?)) AND ((? = 1 AND `"& _ 
                "COUNTRY` IS NULL) OR (`COUNTRY` = ?)) AND ((? = 1 AND `POSTAL_CODE` IS NULL) OR "& _ 
                "(`POSTAL_CODE` = ?)) AND ((? = 1 AND `PHONE` IS NULL) OR (`PHONE` = ?)) AND ((? "& _ 
                "= 1 AND `FAX` IS NULL) OR (`FAX` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CITY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COUNTRY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COUNTRY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_POSTAL_CODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_POSTAL_CODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PHONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PHONE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FAX", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `SUPPLIER` (`SUPPLIER_IDENT`, `SUPPLIER_NAME`, `ADDRESS`, `CITY`, `CO"& _ 
                "UNTRY`, `POSTAL_CODE`, `PHONE`, `FAX`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CITY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COUNTRY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("POSTAL_CODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PHONE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FAX", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `SUPPLIER` SET `SUPPLIER_IDENT` = ?, `SUPPLIER_NAME` = ?, `ADDRESS` = ?, `"& _ 
                "CITY` = ?, `COUNTRY` = ?, `POSTAL_CODE` = ?, `PHONE` = ?, `FAX` = ? WHERE ((`SUP"& _ 
                "PLIER_IDENT` = ?) AND ((? = 1 AND `SUPPLIER_NAME` IS NULL) OR (`SUPPLIER_NAME` ="& _ 
                " ?)) AND ((? = 1 AND `ADDRESS` IS NULL) OR (`ADDRESS` = ?)) AND ((? = 1 AND `CIT"& _ 
                "Y` IS NULL) OR (`CITY` = ?)) AND ((? = 1 AND `COUNTRY` IS NULL) OR (`COUNTRY` = "& _ 
                "?)) AND ((? = 1 AND `POSTAL_CODE` IS NULL) OR (`POSTAL_CODE` = ?)) AND ((? = 1 A"& _ 
                "ND `PHONE` IS NULL) OR (`PHONE` = ?)) AND ((? = 1 AND `FAX` IS NULL) OR (`FAX` ="& _ 
                " ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("CITY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("COUNTRY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("POSTAL_CODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PHONE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FAX", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_CITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_CITY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "CITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_COUNTRY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_COUNTRY", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "COUNTRY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_POSTAL_CODE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_POSTAL_CODE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "POSTAL_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PHONE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PHONE", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PHONE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FAX", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FAX", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FAX", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SUPPLIER_IDENT, SUPPLIER_NAME, ADDRESS, CITY, COUNTRY, POSTAL_CODE, PHONE,"& _ 
                " FAX FROM SUPPLIER"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.SUPPLIERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.SUPPLIERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.SUPPLIERDataTable = New _840002P1DataSet.SUPPLIERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.SUPPLIERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SUPPLIER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SUPPLIER_IDENT As String, ByVal Original_SUPPLIER_NAME As String, ByVal Original_ADDRESS As String, ByVal Original_CITY As String, ByVal Original_COUNTRY As String, ByVal Original_POSTAL_CODE As String, ByVal Original_PHONE As String, ByVal Original_FAX As String) As Integer
            If (Original_SUPPLIER_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUPPLIER_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SUPPLIER_IDENT,String)
            End If
            If (Original_SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SUPPLIER_NAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_CITY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CITY,String)
            End If
            If (Original_COUNTRY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_COUNTRY,String)
            End If
            If (Original_POSTAL_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_POSTAL_CODE,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_FAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SUPPLIER_IDENT As String, ByVal SUPPLIER_NAME As String, ByVal ADDRESS As String, ByVal CITY As String, ByVal COUNTRY As String, ByVal POSTAL_CODE As String, ByVal PHONE As String, ByVal FAX As String) As Integer
            If (SUPPLIER_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUPPLIER_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SUPPLIER_IDENT,String)
            End If
            If (SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUPPLIER_NAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ADDRESS,String)
            End If
            If (CITY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CITY,String)
            End If
            If (COUNTRY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COUNTRY,String)
            End If
            If (POSTAL_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(POSTAL_CODE,String)
            End If
            If (PHONE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PHONE,String)
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SUPPLIER_IDENT As String,  _
                    ByVal SUPPLIER_NAME As String,  _
                    ByVal ADDRESS As String,  _
                    ByVal CITY As String,  _
                    ByVal COUNTRY As String,  _
                    ByVal POSTAL_CODE As String,  _
                    ByVal PHONE As String,  _
                    ByVal FAX As String,  _
                    ByVal Original_SUPPLIER_IDENT As String,  _
                    ByVal Original_SUPPLIER_NAME As String,  _
                    ByVal Original_ADDRESS As String,  _
                    ByVal Original_CITY As String,  _
                    ByVal Original_COUNTRY As String,  _
                    ByVal Original_POSTAL_CODE As String,  _
                    ByVal Original_PHONE As String,  _
                    ByVal Original_FAX As String) As Integer
            If (SUPPLIER_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SUPPLIER_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SUPPLIER_IDENT,String)
            End If
            If (SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUPPLIER_NAME,String)
            End If
            If (ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ADDRESS,String)
            End If
            If (CITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CITY,String)
            End If
            If (COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COUNTRY,String)
            End If
            If (POSTAL_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(POSTAL_CODE,String)
            End If
            If (PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PHONE,String)
            End If
            If (FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FAX,String)
            End If
            If (Original_SUPPLIER_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SUPPLIER_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SUPPLIER_IDENT,String)
            End If
            If (Original_SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SUPPLIER_NAME,String)
            End If
            If (Original_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ADDRESS,String)
            End If
            If (Original_CITY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CITY,String)
            End If
            If (Original_COUNTRY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_COUNTRY,String)
            End If
            If (Original_POSTAL_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_POSTAL_CODE,String)
            End If
            If (Original_PHONE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PHONE,String)
            End If
            If (Original_FAX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_FAX,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SUPPLIER_NAME As String, ByVal ADDRESS As String, ByVal CITY As String, ByVal COUNTRY As String, ByVal POSTAL_CODE As String, ByVal PHONE As String, ByVal FAX As String, ByVal Original_SUPPLIER_IDENT As String, ByVal Original_SUPPLIER_NAME As String, ByVal Original_ADDRESS As String, ByVal Original_CITY As String, ByVal Original_COUNTRY As String, ByVal Original_POSTAL_CODE As String, ByVal Original_PHONE As String, ByVal Original_FAX As String) As Integer
            Return Me.Update(Original_SUPPLIER_IDENT, SUPPLIER_NAME, ADDRESS, CITY, COUNTRY, POSTAL_CODE, PHONE, FAX, Original_SUPPLIER_IDENT, Original_SUPPLIER_NAME, Original_ADDRESS, Original_CITY, Original_COUNTRY, Original_POSTAL_CODE, Original_PHONE, Original_FAX)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SUPPLYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SUPPLY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PRODLINE_IDENT", "PRODLINE_IDENT")
            tableMapping.ColumnMappings.Add("MAT_IDENT", "MAT_IDENT")
            tableMapping.ColumnMappings.Add("SUPPLIER_IDENT", "SUPPLIER_IDENT")
            tableMapping.ColumnMappings.Add("DATE", "DATE")
            tableMapping.ColumnMappings.Add("QUANTITY", "QUANTITY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `SUPPLY` WHERE ((`ID` = ?) AND ((? = 1 AND `PRODLINE_IDENT` IS NULL) "& _ 
                "OR (`PRODLINE_IDENT` = ?)) AND ((? = 1 AND `MAT_IDENT` IS NULL) OR (`MAT_IDENT` "& _ 
                "= ?)) AND ((? = 1 AND `SUPPLIER_IDENT` IS NULL) OR (`SUPPLIER_IDENT` = ?)) AND ("& _ 
                "(? = 1 AND `DATE` IS NULL) OR (`DATE` = ?)) AND ((? = 1 AND `QUANTITY` IS NULL) "& _ 
                "OR (`QUANTITY` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_QUANTITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_QUANTITY", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `SUPPLY` (`PRODLINE_IDENT`, `MAT_IDENT`, `SUPPLIER_IDENT`, `DATE`, `Q"& _ 
                "UANTITY`) VALUES (?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("QUANTITY", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `SUPPLY` SET `PRODLINE_IDENT` = ?, `MAT_IDENT` = ?, `SUPPLIER_IDENT` = ?, "& _ 
                "`DATE` = ?, `QUANTITY` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `PRODLINE_IDENT` IS"& _ 
                " NULL) OR (`PRODLINE_IDENT` = ?)) AND ((? = 1 AND `MAT_IDENT` IS NULL) OR (`MAT_"& _ 
                "IDENT` = ?)) AND ((? = 1 AND `SUPPLIER_IDENT` IS NULL) OR (`SUPPLIER_IDENT` = ?)"& _ 
                ") AND ((? = 1 AND `DATE` IS NULL) OR (`DATE` = ?)) AND ((? = 1 AND `QUANTITY` IS"& _ 
                " NULL) OR (`QUANTITY` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("QUANTITY", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_ID", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "ID", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_PRODLINE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PRODLINE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAT_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAT_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAT_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_SUPPLIER_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SUPPLIER_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DATE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DATE", Global.System.Data.OleDb.OleDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DATE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_QUANTITY", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_QUANTITY", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "QUANTITY", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, PRODLINE_IDENT, MAT_IDENT, SUPPLIER_IDENT, [DATE], QUANTITY FROM SUPPL"& _ 
                "Y"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.SUPPLYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.SUPPLYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.SUPPLYDataTable = New _840002P1DataSet.SUPPLYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.SUPPLYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SUPPLY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAT_IDENT As String, ByVal Original_SUPPLIER_IDENT As String, ByVal Original_DATE As Global.System.Nullable(Of Date), ByVal Original_QUANTITY As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_SUPPLIER_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SUPPLIER_IDENT,String)
            End If
            If (Original_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_QUANTITY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_QUANTITY.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PRODLINE_IDENT As String, ByVal MAT_IDENT As String, ByVal SUPPLIER_IDENT As String, ByVal _DATE As Global.System.Nullable(Of Date), ByVal QUANTITY As Global.System.Nullable(Of Double)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MAT_IDENT,String)
            End If
            If (SUPPLIER_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUPPLIER_IDENT,String)
            End If
            If (_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (QUANTITY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(QUANTITY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PRODLINE_IDENT As String, ByVal MAT_IDENT As String, ByVal SUPPLIER_IDENT As String, ByVal _DATE As Global.System.Nullable(Of Date), ByVal QUANTITY As Global.System.Nullable(Of Double), ByVal Original_ID As Integer, ByVal Original_PRODLINE_IDENT As String, ByVal Original_MAT_IDENT As String, ByVal Original_SUPPLIER_IDENT As String, ByVal Original_DATE As Global.System.Nullable(Of Date), ByVal Original_QUANTITY As Global.System.Nullable(Of Double)) As Integer
            If (PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PRODLINE_IDENT,String)
            End If
            If (MAT_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MAT_IDENT,String)
            End If
            If (SUPPLIER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUPPLIER_IDENT,String)
            End If
            If (_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (QUANTITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(QUANTITY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            If (Original_PRODLINE_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PRODLINE_IDENT,String)
            End If
            If (Original_MAT_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MAT_IDENT,String)
            End If
            If (Original_SUPPLIER_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SUPPLIER_IDENT,String)
            End If
            If (Original_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_QUANTITY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_QUANTITY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class WPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As Global.System.Data.OleDb.OleDbConnection
        
        Private _transaction As Global.System.Data.OleDb.OleDbTransaction
        
        Private _commandCollection() As Global.System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.OleDb.OleDbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.OleDb.OleDbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "WP"
            tableMapping.ColumnMappings.Add("DEVICE_IDENT", "DEVICE_IDENT")
            tableMapping.ColumnMappings.Add("WP_IDENT", "WP_IDENT")
            tableMapping.ColumnMappings.Add("WP_NAME", "WP_NAME")
            tableMapping.ColumnMappings.Add("WP_ADDRESS", "WP_ADDRESS")
            tableMapping.ColumnMappings.Add("FULLSCALE", "FULLSCALE")
            tableMapping.ColumnMappings.Add("DECIMALPOINT", "DECIMALPOINT")
            tableMapping.ColumnMappings.Add("WP_UNIT", "WP_UNIT")
            tableMapping.ColumnMappings.Add("MAX_RESIDUE", "MAX_RESIDUE")
            tableMapping.ColumnMappings.Add("WP_TYPE", "WP_TYPE")
            tableMapping.ColumnMappings.Add("OPC_SERVER", "OPC_SERVER")
            tableMapping.ColumnMappings.Add("OPC_GROUP", "OPC_GROUP")
            tableMapping.ColumnMappings.Add("OPC_GROUP_OFFSET", "OPC_GROUP_OFFSET")
            tableMapping.ColumnMappings.Add("LABEL_PRINTER", "LABEL_PRINTER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `WP` WHERE (((? = 1 AND `DEVICE_IDENT` IS NULL) OR (`DEVICE_IDENT` = "& _ 
                "?)) AND (`WP_IDENT` = ?) AND ((? = 1 AND `WP_NAME` IS NULL) OR (`WP_NAME` = ?)) "& _ 
                "AND ((? = 1 AND `WP_ADDRESS` IS NULL) OR (`WP_ADDRESS` = ?)) AND ((? = 1 AND `FU"& _ 
                "LLSCALE` IS NULL) OR (`FULLSCALE` = ?)) AND ((? = 1 AND `DECIMALPOINT` IS NULL) "& _ 
                "OR (`DECIMALPOINT` = ?)) AND ((? = 1 AND `WP_UNIT` IS NULL) OR (`WP_UNIT` = ?)) "& _ 
                "AND ((? = 1 AND `MAX_RESIDUE` IS NULL) OR (`MAX_RESIDUE` = ?)) AND ((? = 1 AND `"& _ 
                "WP_TYPE` IS NULL) OR (`WP_TYPE` = ?)) AND ((? = 1 AND `OPC_SERVER` IS NULL) OR ("& _ 
                "`OPC_SERVER` = ?)) AND ((? = 1 AND `OPC_GROUP` IS NULL) OR (`OPC_GROUP` = ?)) AN"& _ 
                "D ((? = 1 AND `OPC_GROUP_OFFSET` IS NULL) OR (`OPC_GROUP_OFFSET` = ?)) AND ((? ="& _ 
                " 1 AND `LABEL_PRINTER` IS NULL) OR (`LABEL_PRINTER` = ?)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FULLSCALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FULLSCALE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_TYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_TYPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_SERVER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_SERVER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_GROUP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_GROUP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `WP` (`DEVICE_IDENT`, `WP_IDENT`, `WP_NAME`, `WP_ADDRESS`, `FULLSCALE"& _ 
                "`, `DECIMALPOINT`, `WP_UNIT`, `MAX_RESIDUE`, `WP_TYPE`, `OPC_SERVER`, `OPC_GROUP"& _ 
                "`, `OPC_GROUP_OFFSET`, `LABEL_PRINTER`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?, ?)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FULLSCALE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DECIMALPOINT", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_TYPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_SERVER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_GROUP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New Global.System.Data.OleDb.OleDbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `WP` SET `DEVICE_IDENT` = ?, `WP_IDENT` = ?, `WP_NAME` = ?, `WP_ADDRESS` ="& _ 
                " ?, `FULLSCALE` = ?, `DECIMALPOINT` = ?, `WP_UNIT` = ?, `MAX_RESIDUE` = ?, `WP_T"& _ 
                "YPE` = ?, `OPC_SERVER` = ?, `OPC_GROUP` = ?, `OPC_GROUP_OFFSET` = ?, `LABEL_PRIN"& _ 
                "TER` = ? WHERE (((? = 1 AND `DEVICE_IDENT` IS NULL) OR (`DEVICE_IDENT` = ?)) AND"& _ 
                " (`WP_IDENT` = ?) AND ((? = 1 AND `WP_NAME` IS NULL) OR (`WP_NAME` = ?)) AND ((?"& _ 
                " = 1 AND `WP_ADDRESS` IS NULL) OR (`WP_ADDRESS` = ?)) AND ((? = 1 AND `FULLSCALE"& _ 
                "` IS NULL) OR (`FULLSCALE` = ?)) AND ((? = 1 AND `DECIMALPOINT` IS NULL) OR (`DE"& _ 
                "CIMALPOINT` = ?)) AND ((? = 1 AND `WP_UNIT` IS NULL) OR (`WP_UNIT` = ?)) AND ((?"& _ 
                " = 1 AND `MAX_RESIDUE` IS NULL) OR (`MAX_RESIDUE` = ?)) AND ((? = 1 AND `WP_TYPE"& _ 
                "` IS NULL) OR (`WP_TYPE` = ?)) AND ((? = 1 AND `OPC_SERVER` IS NULL) OR (`OPC_SE"& _ 
                "RVER` = ?)) AND ((? = 1 AND `OPC_GROUP` IS NULL) OR (`OPC_GROUP` = ?)) AND ((? ="& _ 
                " 1 AND `OPC_GROUP_OFFSET` IS NULL) OR (`OPC_GROUP_OFFSET` = ?)) AND ((? = 1 AND "& _ 
                "`LABEL_PRINTER` IS NULL) OR (`LABEL_PRINTER` = ?)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("FULLSCALE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("DECIMALPOINT", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("WP_TYPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_SERVER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_GROUP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DEVICE_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DEVICE_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_IDENT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_IDENT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_NAME", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_NAME", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_ADDRESS", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_ADDRESS", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_FULLSCALE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_FULLSCALE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "FULLSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_DECIMALPOINT", Global.System.Data.OleDb.OleDbType.UnsignedTinyInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DECIMALPOINT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_UNIT", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_UNIT", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_MAX_RESIDUE", Global.System.Data.OleDb.OleDbType.[Double], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MAX_RESIDUE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_WP_TYPE", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_WP_TYPE", Global.System.Data.OleDb.OleDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "WP_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_SERVER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_SERVER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_SERVER", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_GROUP", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_GROUP", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_OPC_GROUP_OFFSET", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OPC_GROUP_OFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("IsNull_LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.[Integer], 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.OleDb.OleDbParameter("Original_LABEL_PRINTER", Global.System.Data.OleDb.OleDbType.VarWChar, 0, Global.System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LABEL_PRINTER", Global.System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.OleDb.OleDbConnection()
            Me._connection.ConnectionString = Global.ProBatchExportMov.My.MySettings.Default._840002P1ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.OleDb.OleDbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DEVICE_IDENT, WP_IDENT, WP_NAME, WP_ADDRESS, FULLSCALE, DECIMALPOINT, WP_U"& _ 
                "NIT, MAX_RESIDUE, WP_TYPE, OPC_SERVER, OPC_GROUP, OPC_GROUP_OFFSET, LABEL_PRINTE"& _ 
                "R FROM WP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As _840002P1DataSet.WPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As _840002P1DataSet.WPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As _840002P1DataSet.WPDataTable = New _840002P1DataSet.WPDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As _840002P1DataSet.WPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As _840002P1DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "WP")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DEVICE_IDENT As String, ByVal Original_WP_IDENT As String, ByVal Original_WP_NAME As String, ByVal Original_WP_ADDRESS As String, ByVal Original_FULLSCALE As Double, ByVal Original_DECIMALPOINT As Byte, ByVal Original_WP_UNIT As String, ByVal Original_MAX_RESIDUE As Double, ByVal Original_WP_TYPE As Global.System.Nullable(Of Short), ByVal Original_OPC_SERVER As String, ByVal Original_OPC_GROUP As String, ByVal Original_OPC_GROUP_OFFSET As String, ByVal Original_LABEL_PRINTER As String) As Integer
            If (Original_DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_IDENT")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WP_IDENT,String)
            End If
            If (Original_WP_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_WP_NAME,String)
            End If
            If (Original_WP_ADDRESS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_WP_ADDRESS,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_FULLSCALE,Double)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DECIMALPOINT,Byte)
            If (Original_WP_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_WP_UNIT,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MAX_RESIDUE,Double)
            If (Original_WP_TYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_WP_TYPE.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_OPC_SERVER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_OPC_SERVER,String)
            End If
            If (Original_OPC_GROUP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_OPC_GROUP,String)
            End If
            If (Original_OPC_GROUP_OFFSET Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_OPC_GROUP_OFFSET,String)
            End If
            If (Original_LABEL_PRINTER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_LABEL_PRINTER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DEVICE_IDENT As String, ByVal WP_IDENT As String, ByVal WP_NAME As String, ByVal WP_ADDRESS As String, ByVal FULLSCALE As Double, ByVal DECIMALPOINT As Byte, ByVal WP_UNIT As String, ByVal MAX_RESIDUE As Double, ByVal WP_TYPE As Global.System.Nullable(Of Short), ByVal OPC_SERVER As String, ByVal OPC_GROUP As String, ByVal OPC_GROUP_OFFSET As String, ByVal LABEL_PRINTER As String) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_IDENT")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(WP_IDENT,String)
            End If
            If (WP_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(WP_NAME,String)
            End If
            If (WP_ADDRESS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(WP_ADDRESS,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(FULLSCALE,Double)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(DECIMALPOINT,Byte)
            If (WP_UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(WP_UNIT,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAX_RESIDUE,Double)
            If (WP_TYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(WP_TYPE.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (OPC_SERVER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(OPC_SERVER,String)
            End If
            If (OPC_GROUP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OPC_GROUP,String)
            End If
            If (OPC_GROUP_OFFSET Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(OPC_GROUP_OFFSET,String)
            End If
            If (LABEL_PRINTER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(LABEL_PRINTER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal WP_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal FULLSCALE As Double,  _
                    ByVal DECIMALPOINT As Byte,  _
                    ByVal WP_UNIT As String,  _
                    ByVal MAX_RESIDUE As Double,  _
                    ByVal WP_TYPE As Global.System.Nullable(Of Short),  _
                    ByVal OPC_SERVER As String,  _
                    ByVal OPC_GROUP As String,  _
                    ByVal OPC_GROUP_OFFSET As String,  _
                    ByVal LABEL_PRINTER As String,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_WP_NAME As String,  _
                    ByVal Original_WP_ADDRESS As String,  _
                    ByVal Original_FULLSCALE As Double,  _
                    ByVal Original_DECIMALPOINT As Byte,  _
                    ByVal Original_WP_UNIT As String,  _
                    ByVal Original_MAX_RESIDUE As Double,  _
                    ByVal Original_WP_TYPE As Global.System.Nullable(Of Short),  _
                    ByVal Original_OPC_SERVER As String,  _
                    ByVal Original_OPC_GROUP As String,  _
                    ByVal Original_OPC_GROUP_OFFSET As String,  _
                    ByVal Original_LABEL_PRINTER As String) As Integer
            If (DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DEVICE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DEVICE_IDENT,String)
            End If
            If (WP_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(WP_IDENT,String)
            End If
            If (WP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(WP_NAME,String)
            End If
            If (WP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(WP_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FULLSCALE,Double)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DECIMALPOINT,Byte)
            If (WP_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WP_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAX_RESIDUE,Double)
            If (WP_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(WP_TYPE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (OPC_SERVER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OPC_SERVER,String)
            End If
            If (OPC_GROUP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OPC_GROUP,String)
            End If
            If (OPC_GROUP_OFFSET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(OPC_GROUP_OFFSET,String)
            End If
            If (LABEL_PRINTER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(LABEL_PRINTER,String)
            End If
            If (Original_DEVICE_IDENT Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DEVICE_IDENT")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DEVICE_IDENT,String)
            End If
            If (Original_WP_IDENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_WP_IDENT,String)
            End If
            If (Original_WP_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_WP_NAME,String)
            End If
            If (Original_WP_ADDRESS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_WP_ADDRESS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_FULLSCALE,Double)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_DECIMALPOINT,Byte)
            If (Original_WP_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_WP_UNIT,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_MAX_RESIDUE,Double)
            If (Original_WP_TYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_WP_TYPE.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_OPC_SERVER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_OPC_SERVER,String)
            End If
            If (Original_OPC_GROUP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_OPC_GROUP,String)
            End If
            If (Original_OPC_GROUP_OFFSET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_OPC_GROUP_OFFSET,String)
            End If
            If (Original_LABEL_PRINTER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_LABEL_PRINTER,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DEVICE_IDENT As String,  _
                    ByVal WP_NAME As String,  _
                    ByVal WP_ADDRESS As String,  _
                    ByVal FULLSCALE As Double,  _
                    ByVal DECIMALPOINT As Byte,  _
                    ByVal WP_UNIT As String,  _
                    ByVal MAX_RESIDUE As Double,  _
                    ByVal WP_TYPE As Global.System.Nullable(Of Short),  _
                    ByVal OPC_SERVER As String,  _
                    ByVal OPC_GROUP As String,  _
                    ByVal OPC_GROUP_OFFSET As String,  _
                    ByVal LABEL_PRINTER As String,  _
                    ByVal Original_DEVICE_IDENT As String,  _
                    ByVal Original_WP_IDENT As String,  _
                    ByVal Original_WP_NAME As String,  _
                    ByVal Original_WP_ADDRESS As String,  _
                    ByVal Original_FULLSCALE As Double,  _
                    ByVal Original_DECIMALPOINT As Byte,  _
                    ByVal Original_WP_UNIT As String,  _
                    ByVal Original_MAX_RESIDUE As Double,  _
                    ByVal Original_WP_TYPE As Global.System.Nullable(Of Short),  _
                    ByVal Original_OPC_SERVER As String,  _
                    ByVal Original_OPC_GROUP As String,  _
                    ByVal Original_OPC_GROUP_OFFSET As String,  _
                    ByVal Original_LABEL_PRINTER As String) As Integer
            Return Me.Update(DEVICE_IDENT, Original_WP_IDENT, WP_NAME, WP_ADDRESS, FULLSCALE, DECIMALPOINT, WP_UNIT, MAX_RESIDUE, WP_TYPE, OPC_SERVER, OPC_GROUP, OPC_GROUP_OFFSET, LABEL_PRINTER, Original_DEVICE_IDENT, Original_WP_IDENT, Original_WP_NAME, Original_WP_ADDRESS, Original_FULLSCALE, Original_DECIMALPOINT, Original_WP_UNIT, Original_MAX_RESIDUE, Original_WP_TYPE, Original_OPC_SERVER, Original_OPC_GROUP, Original_OPC_GROUP_OFFSET, Original_LABEL_PRINTER)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _dEVICETableAdapter As DEVICETableAdapter
        
        Private _mAINRECIPE_HEADERTableAdapter As MAINRECIPE_HEADERTableAdapter
        
        Private _mAINRECIPE_LINETableAdapter As MAINRECIPE_LINETableAdapter
        
        Private _mAINRECIPEPLAN_HEADERTableAdapter As MAINRECIPEPLAN_HEADERTableAdapter
        
        Private _mAINRECIPEPLAN_LINETableAdapter As MAINRECIPEPLAN_LINETableAdapter
        
        Private _mATERIALTableAdapter As MATERIALTableAdapter
        
        Private _pLAN_HEADERTableAdapter As PLAN_HEADERTableAdapter
        
        Private _pLAN_LINETableAdapter As PLAN_LINETableAdapter
        
        Private _pR8400TableAdapter As PR8400TableAdapter
        
        Private _pRODLINE_WPTableAdapter As PRODLINE_WPTableAdapter
        
        Private _pRODUCTIONLINETableAdapter As PRODUCTIONLINETableAdapter
        
        Private _rECIPE_HEADERTableAdapter As RECIPE_HEADERTableAdapter
        
        Private _rECIPE_LINETableAdapter As RECIPE_LINETableAdapter
        
        Private _sUPPLIERTableAdapter As SUPPLIERTableAdapter
        
        Private _sUPPLYTableAdapter As SUPPLYTableAdapter
        
        Private _wPTableAdapter As WPTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DEVICETableAdapter() As DEVICETableAdapter
            Get
                Return Me._dEVICETableAdapter
            End Get
            Set
                Me._dEVICETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINRECIPE_HEADERTableAdapter() As MAINRECIPE_HEADERTableAdapter
            Get
                Return Me._mAINRECIPE_HEADERTableAdapter
            End Get
            Set
                Me._mAINRECIPE_HEADERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINRECIPE_LINETableAdapter() As MAINRECIPE_LINETableAdapter
            Get
                Return Me._mAINRECIPE_LINETableAdapter
            End Get
            Set
                Me._mAINRECIPE_LINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINRECIPEPLAN_HEADERTableAdapter() As MAINRECIPEPLAN_HEADERTableAdapter
            Get
                Return Me._mAINRECIPEPLAN_HEADERTableAdapter
            End Get
            Set
                Me._mAINRECIPEPLAN_HEADERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MAINRECIPEPLAN_LINETableAdapter() As MAINRECIPEPLAN_LINETableAdapter
            Get
                Return Me._mAINRECIPEPLAN_LINETableAdapter
            End Get
            Set
                Me._mAINRECIPEPLAN_LINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MATERIALTableAdapter() As MATERIALTableAdapter
            Get
                Return Me._mATERIALTableAdapter
            End Get
            Set
                Me._mATERIALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PLAN_HEADERTableAdapter() As PLAN_HEADERTableAdapter
            Get
                Return Me._pLAN_HEADERTableAdapter
            End Get
            Set
                Me._pLAN_HEADERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PLAN_LINETableAdapter() As PLAN_LINETableAdapter
            Get
                Return Me._pLAN_LINETableAdapter
            End Get
            Set
                Me._pLAN_LINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PR8400TableAdapter() As PR8400TableAdapter
            Get
                Return Me._pR8400TableAdapter
            End Get
            Set
                Me._pR8400TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PRODLINE_WPTableAdapter() As PRODLINE_WPTableAdapter
            Get
                Return Me._pRODLINE_WPTableAdapter
            End Get
            Set
                Me._pRODLINE_WPTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PRODUCTIONLINETableAdapter() As PRODUCTIONLINETableAdapter
            Get
                Return Me._pRODUCTIONLINETableAdapter
            End Get
            Set
                Me._pRODUCTIONLINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RECIPE_HEADERTableAdapter() As RECIPE_HEADERTableAdapter
            Get
                Return Me._rECIPE_HEADERTableAdapter
            End Get
            Set
                Me._rECIPE_HEADERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RECIPE_LINETableAdapter() As RECIPE_LINETableAdapter
            Get
                Return Me._rECIPE_LINETableAdapter
            End Get
            Set
                Me._rECIPE_LINETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SUPPLIERTableAdapter() As SUPPLIERTableAdapter
            Get
                Return Me._sUPPLIERTableAdapter
            End Get
            Set
                Me._sUPPLIERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SUPPLYTableAdapter() As SUPPLYTableAdapter
            Get
                Return Me._sUPPLYTableAdapter
            End Get
            Set
                Me._sUPPLYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property WPTableAdapter() As WPTableAdapter
            Get
                Return Me._wPTableAdapter
            End Get
            Set
                Me._wPTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._dEVICETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dEVICETableAdapter.Connection) Is Nothing)) Then
                    Return Me._dEVICETableAdapter.Connection
                End If
                If ((Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINRECIPE_HEADERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINRECIPE_HEADERTableAdapter.Connection
                End If
                If ((Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINRECIPE_LINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINRECIPE_LINETableAdapter.Connection
                End If
                If ((Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection
                End If
                If ((Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mAINRECIPEPLAN_LINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._mAINRECIPEPLAN_LINETableAdapter.Connection
                End If
                If ((Not (Me._mATERIALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mATERIALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mATERIALTableAdapter.Connection
                End If
                If ((Not (Me._pLAN_HEADERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pLAN_HEADERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pLAN_HEADERTableAdapter.Connection
                End If
                If ((Not (Me._pLAN_LINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pLAN_LINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._pLAN_LINETableAdapter.Connection
                End If
                If ((Not (Me._pR8400TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pR8400TableAdapter.Connection) Is Nothing)) Then
                    Return Me._pR8400TableAdapter.Connection
                End If
                If ((Not (Me._pRODLINE_WPTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pRODLINE_WPTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pRODLINE_WPTableAdapter.Connection
                End If
                If ((Not (Me._pRODUCTIONLINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pRODUCTIONLINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._pRODUCTIONLINETableAdapter.Connection
                End If
                If ((Not (Me._rECIPE_HEADERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rECIPE_HEADERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._rECIPE_HEADERTableAdapter.Connection
                End If
                If ((Not (Me._rECIPE_LINETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._rECIPE_LINETableAdapter.Connection) Is Nothing)) Then
                    Return Me._rECIPE_LINETableAdapter.Connection
                End If
                If ((Not (Me._sUPPLIERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sUPPLIERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sUPPLIERTableAdapter.Connection
                End If
                If ((Not (Me._sUPPLYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sUPPLYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sUPPLYTableAdapter.Connection
                End If
                If ((Not (Me._wPTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._wPTableAdapter.Connection) Is Nothing)) Then
                    Return Me._wPTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._wPTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As _840002P1DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DEVICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dEVICETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PRODUCTIONLINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pRODUCTIONLINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._wPTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._wPTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_HEADERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_HEADERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pLAN_HEADERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PRODLINE_WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pRODLINE_WPTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rECIPE_HEADERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_LINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_LINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MATERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mATERIALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pLAN_LINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PR8400.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pR8400TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._rECIPE_LINETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sUPPLIERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SUPPLY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sUPPLYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As _840002P1DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DEVICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dEVICETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PRODUCTIONLINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pRODUCTIONLINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._wPTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._wPTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_HEADERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_HEADERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pLAN_HEADERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PRODLINE_WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pRODLINE_WPTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rECIPE_HEADERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_LINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_LINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MATERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mATERIALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pLAN_LINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PR8400.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pR8400TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._rECIPE_LINETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sUPPLIERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SUPPLY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sUPPLYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As _840002P1DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SUPPLY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sUPPLYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SUPPLIER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sUPPLIERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rECIPE_LINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PR8400.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pR8400TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pLAN_LINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MATERIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mATERIALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_LINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_LINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_LINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._rECIPE_HEADERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PRODLINE_WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pRODLINE_WPTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pLAN_HEADERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPEPLAN_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINRECIPEPLAN_HEADERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MAINRECIPE_HEADER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mAINRECIPE_HEADERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._wPTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.WP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._wPTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PRODUCTIONLINE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pRODUCTIONLINETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DEVICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dEVICETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As _840002P1DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._dEVICETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dEVICETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINRECIPE_HEADERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINRECIPE_LINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mAINRECIPEPLAN_LINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mATERIALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mATERIALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pLAN_HEADERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pLAN_HEADERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pLAN_LINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pLAN_LINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pR8400TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pR8400TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pRODLINE_WPTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pRODLINE_WPTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pRODUCTIONLINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pRODUCTIONLINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rECIPE_HEADERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rECIPE_HEADERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._rECIPE_LINETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._rECIPE_LINETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sUPPLIERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sUPPLIERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sUPPLYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sUPPLYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._wPTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._wPTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dEVICETableAdapter, Me._dEVICETableAdapter.Connection)
                    Me._dEVICETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._dEVICETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._dEVICETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dEVICETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dEVICETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINRECIPE_HEADERTableAdapter, Me._mAINRECIPE_HEADERTableAdapter.Connection)
                    Me._mAINRECIPE_HEADERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPE_HEADERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINRECIPE_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINRECIPE_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINRECIPE_HEADERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINRECIPE_LINETableAdapter, Me._mAINRECIPE_LINETableAdapter.Connection)
                    Me._mAINRECIPE_LINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPE_LINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINRECIPE_LINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINRECIPE_LINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINRECIPE_LINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINRECIPEPLAN_HEADERTableAdapter, Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection)
                    Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPEPLAN_HEADERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINRECIPEPLAN_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINRECIPEPLAN_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINRECIPEPLAN_HEADERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mAINRECIPEPLAN_LINETableAdapter, Me._mAINRECIPEPLAN_LINETableAdapter.Connection)
                    Me._mAINRECIPEPLAN_LINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPEPLAN_LINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mAINRECIPEPLAN_LINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mAINRECIPEPLAN_LINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mAINRECIPEPLAN_LINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mATERIALTableAdapter, Me._mATERIALTableAdapter.Connection)
                    Me._mATERIALTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._mATERIALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._mATERIALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mATERIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mATERIALTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pLAN_HEADERTableAdapter, Me._pLAN_HEADERTableAdapter.Connection)
                    Me._pLAN_HEADERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pLAN_HEADERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pLAN_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pLAN_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pLAN_HEADERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pLAN_LINETableAdapter, Me._pLAN_LINETableAdapter.Connection)
                    Me._pLAN_LINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pLAN_LINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pLAN_LINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pLAN_LINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pLAN_LINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pR8400TableAdapter, Me._pR8400TableAdapter.Connection)
                    Me._pR8400TableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pR8400TableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pR8400TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pR8400TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pR8400TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pRODLINE_WPTableAdapter, Me._pRODLINE_WPTableAdapter.Connection)
                    Me._pRODLINE_WPTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODLINE_WPTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pRODLINE_WPTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pRODLINE_WPTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pRODLINE_WPTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pRODUCTIONLINETableAdapter, Me._pRODUCTIONLINETableAdapter.Connection)
                    Me._pRODUCTIONLINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODUCTIONLINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._pRODUCTIONLINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pRODUCTIONLINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pRODUCTIONLINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rECIPE_HEADERTableAdapter, Me._rECIPE_HEADERTableAdapter.Connection)
                    Me._rECIPE_HEADERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPE_HEADERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._rECIPE_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rECIPE_HEADERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rECIPE_HEADERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._rECIPE_LINETableAdapter, Me._rECIPE_LINETableAdapter.Connection)
                    Me._rECIPE_LINETableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPE_LINETableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._rECIPE_LINETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._rECIPE_LINETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._rECIPE_LINETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sUPPLIERTableAdapter, Me._sUPPLIERTableAdapter.Connection)
                    Me._sUPPLIERTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._sUPPLIERTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._sUPPLIERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sUPPLIERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sUPPLIERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sUPPLYTableAdapter, Me._sUPPLYTableAdapter.Connection)
                    Me._sUPPLYTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._sUPPLYTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._sUPPLYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sUPPLYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sUPPLYTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._wPTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._wPTableAdapter, Me._wPTableAdapter.Connection)
                    Me._wPTableAdapter.Connection = CType(workConnection,Global.System.Data.OleDb.OleDbConnection)
                    Me._wPTableAdapter.Transaction = CType(workTransaction,Global.System.Data.OleDb.OleDbTransaction)
                    If Me._wPTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._wPTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._wPTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._dEVICETableAdapter) Is Nothing) Then
                    Me._dEVICETableAdapter.Connection = CType(revertConnections(Me._dEVICETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._dEVICETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINRECIPE_HEADERTableAdapter) Is Nothing) Then
                    Me._mAINRECIPE_HEADERTableAdapter.Connection = CType(revertConnections(Me._mAINRECIPE_HEADERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPE_HEADERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINRECIPE_LINETableAdapter) Is Nothing) Then
                    Me._mAINRECIPE_LINETableAdapter.Connection = CType(revertConnections(Me._mAINRECIPE_LINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPE_LINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINRECIPEPLAN_HEADERTableAdapter) Is Nothing) Then
                    Me._mAINRECIPEPLAN_HEADERTableAdapter.Connection = CType(revertConnections(Me._mAINRECIPEPLAN_HEADERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPEPLAN_HEADERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mAINRECIPEPLAN_LINETableAdapter) Is Nothing) Then
                    Me._mAINRECIPEPLAN_LINETableAdapter.Connection = CType(revertConnections(Me._mAINRECIPEPLAN_LINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mAINRECIPEPLAN_LINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mATERIALTableAdapter) Is Nothing) Then
                    Me._mATERIALTableAdapter.Connection = CType(revertConnections(Me._mATERIALTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._mATERIALTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pLAN_HEADERTableAdapter) Is Nothing) Then
                    Me._pLAN_HEADERTableAdapter.Connection = CType(revertConnections(Me._pLAN_HEADERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pLAN_HEADERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pLAN_LINETableAdapter) Is Nothing) Then
                    Me._pLAN_LINETableAdapter.Connection = CType(revertConnections(Me._pLAN_LINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pLAN_LINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pR8400TableAdapter) Is Nothing) Then
                    Me._pR8400TableAdapter.Connection = CType(revertConnections(Me._pR8400TableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pR8400TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pRODLINE_WPTableAdapter) Is Nothing) Then
                    Me._pRODLINE_WPTableAdapter.Connection = CType(revertConnections(Me._pRODLINE_WPTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODLINE_WPTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pRODUCTIONLINETableAdapter) Is Nothing) Then
                    Me._pRODUCTIONLINETableAdapter.Connection = CType(revertConnections(Me._pRODUCTIONLINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._pRODUCTIONLINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rECIPE_HEADERTableAdapter) Is Nothing) Then
                    Me._rECIPE_HEADERTableAdapter.Connection = CType(revertConnections(Me._rECIPE_HEADERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPE_HEADERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._rECIPE_LINETableAdapter) Is Nothing) Then
                    Me._rECIPE_LINETableAdapter.Connection = CType(revertConnections(Me._rECIPE_LINETableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._rECIPE_LINETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sUPPLIERTableAdapter) Is Nothing) Then
                    Me._sUPPLIERTableAdapter.Connection = CType(revertConnections(Me._sUPPLIERTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._sUPPLIERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sUPPLYTableAdapter) Is Nothing) Then
                    Me._sUPPLYTableAdapter.Connection = CType(revertConnections(Me._sUPPLYTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._sUPPLYTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._wPTableAdapter) Is Nothing) Then
                    Me._wPTableAdapter.Connection = CType(revertConnections(Me._wPTableAdapter),Global.System.Data.OleDb.OleDbConnection)
                    Me._wPTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
